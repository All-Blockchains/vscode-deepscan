{"rules":[{"key":"ACCESS_INNER_FUNC_FROM_DEFAULT_PARAM","name":"Inner functions should not be accessed at default parameter declaration","description":"This rule applies when a default parameter declaration references an inner function declared in the body.\n\nInner functions cannot be used when computing the default value of a parameter because they are defined after resolving all parameters. Trying to access them may result in a `ReferenceError` exception or using a wrong variable.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["es6"],"examples":"function add(x, y = getZero(x)) { // ACCESS_INNER_FUNC_FROM_DEFAULT_PARAM alarm\n  function getZero(x) {\n    if (typeof x == \"number\") return 0;\n    else return \"\";\n  }\n  return x + y;\n}","examplesRevised":"function getZero(x) {\n  if (typeof x == \"number\") return 0;\n  else return \"\";\n}\nfunction add(x, y = getZero(x)) {\n  return x + y;\n}","cwe":[],"see":["[Default parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters)"]},{"key":"ACCESS_THIS_BEFORE_SUPER_CALL","name":"`this` should be accessed after calling `super` in constructor of inherited class","description":"This rule applies when `this` is accessed before calling `super` in constructor of inherited class.\n\nWhen instantiating an inherited class, `this` is bound in `super` call. Therefore, accessing `this` before calling `super` throws a `ReferenceError` exception.\n\nFor more information, please see [super](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super).","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["es6"],"examples":"class A {\n  constructor() {}\n}\nclass B extends A {\n  constructor() {\n    this.a = 1;\n    super(); // ACCESS_THIS_BEFORE_SUPER_CALL alarm\n  }\n}\n\nnew B();","examplesRevised":"class A {\n  constructor() {}\n}\nclass B extends A {\n  constructor() {\n    super();\n    this.a = 1;\n  }\n}\n\nnew B();","cwe":[],"see":["[super keyword](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super)"]},{"key":"AMBIGUOUS_BRANCH_BODY","name":"`if` branch bodies should be formatted unambiguously","description":"This rule applies when `if` branch bodies are formatted ambiguously.\n\nWithout braces (`{}`), `if` branch body can have only one statement. This rule detects the following cases where the next statement not belonging to the branch is ambiguously formatted:\n\n 1. The next statement is on the same line as the branch body.\n 2. The next statement is aligned with the branch body.\n\nThis rule also applies to `for` and `while` loop bodies.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Formatted","tag":["cwe"],"examples":"// Example 1\nif (a)\n  foo(); bar(); // AMBIGUOUS_BRANCH_BODY alarm\n\n// Example 2\nfor (let i = 0; i < len; i++)\n  foo();\n  bar(); // AMBIGUOUS_BRANCH_BODY alarm","examplesRevised":"// Example 1\nif (a) {\n  foo();\n}\nbar();\n\n// Example 2\nfor (let i = 0; i < len; i++) {\n  foo();\n}\nbar();","cwe":["483"],"see":["[if...else statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if%2e%2e%2eelse)"]},{"key":"AMBIGUOUS_ELSE_BRANCH","name":"The indentation of `else` branch should be unambiguous","description":"This rule applies when `else` branches are indented ambiguously.\n\nWithout braces (`{}`), the `else` branch belongs to the nearest `if` statement. This rule detects an alarm when the `else` branch is ambiguously aligned with an outer `if` statement.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Formatted","tag":["cwe"],"examples":"if (a)\n  if (b)\n    foo();\nelse // AMBIGUOUS_ELSE_BRANCH alarm\n  bar();","examplesRevised":"if (a) {\n  if (b) {\n    foo();\n  } else {\n    bar();\n  }\n}\n// or\nif (a) {\n  if (b) {\n    foo();\n  }\n} else {\n  bar();\n}","cwe":["670"],"see":["[if...else statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if%2e%2e%2eelse)"]},{"key":"ARRAY_CALLBACK_RETURN_MISSING","name":"Callback function argument of `Array` functions should have `return` statement","description":"This rule applies when a callback function argument of the following `Array` functions does not have `return` statement.\n\n1. `Array.from()`\n2. `Array.prototype.every()`\n3. `Array.prototype.filter()`\n4. `Array.prototype.find()`\n5. `Array.prototype.findIndex()`\n6. `Array.prototype.flatMap()`\n7. `Array.prototype.map()`\n8. `Array.prototype.reduce()`\n9. `Array.prototype.reduceRight()`\n10. `Array.prototype.some()`\n11. `Array.prototype.sort()`\n\nReturn value of the above functions with missing `return` statement is always the same (an array filled with undefined in the case of `Array.from` or `Array.prototype.map` functions), and it is not likely to be a programmer's intent.\n\nWhen the return value is not needed, it is recommended to use `Array.prototype.forEach` function which does not make a new array as a return value.","severity":["Low","Medium"],"type":"Code Quality","cleanCodeAttribute":"Logical","tag":[],"examples":"const memo = {}, arr = [\"apple\", \"lemon\", \"orange\"];\nconst ret1 = arr.map(function (curval, index) { // ARRAY_CALLBACK_RETURN_MISSING alarm because no value is returned in the callback function.\n  memo[curval] = index;\n});\nconsole.log(ret1); // 'ret1' is filled with undefined.\n\nconst ret2 = Array.from([1, 2, 3], function (x) { // ARRAY_CALLBACK_RETURN_MISSING alarm because no value is returned in the callback function.\n  x = x + 3;\n});\nconsole.log(ret2); // 'ret2' is filled with undefined.","examplesRevised":"const memo = {}, arr = [\"apple\", \"lemon\", \"orange\"];\nconst ret1 = arr.map(function (curval, index) {\n  memo[curval] = index;\n  return memo[curval];\n});\n\nconst ret2 = Array.from([1, 2, 3], function (x) {\n  x = x + 3;\n  return x;\n});","cwe":[],"see":[]},{"key":"ARRAY_INDEX_NEGATIVE","name":"Negative index should not be used on arrays","description":"This rule applies when a variable with negative value is used as an array index by wrong condition check.\n\nWhen a variable is checked as negative, using it as an array index is not likely to be a programmer's intent.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["cwe"],"examples":"const arr = [1, 2, 3];\nif (x < 0) {\n  arr[x] = 3; // ARRAY_INDEX_NEGATIVE alarm: x is negative but is used as array index.\n}","examplesRevised":"const arr = [1, 2, 3];\nif (x > 0) {\n  arr[x] = 3;\n}","cwe":["129"],"see":[]},{"key":"ARROW_FUNC_RETURN_OBJECT_MISSING","name":"Arrow function should use parentheses to return an object literal","description":"This rule applies when an arrow function tries to return an object literal improperly.\n\nAt the start of arrow function's body, `{` is regarded as a block statement. To return an object literal properly, use parentheses.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["es6"],"examples":"const func = num => { square: num * num }; // ARROW_FUNC_RETURN_OBJECT_MISSING alarm because an object literal is not returned.","examplesRevised":"const func = num => ({ square: num * num });","cwe":[],"see":[]},{"key":"ASSIGN_BEFORE_DECL","name":"Variables should be declared before they are assigned","description":"This rule applies when local variables are assigned before they are declared.\n\nIn JavaScript, variables are hoisted and it is possible to use a variable before its declaration. But it is not recommended because it causes confusion as to where the variable is actually declared.\n\nTherefore to avoid confusion, variables should be declared in the beginning of the function body before they are used.\n\n**Note:** Not applied for the variables in inner functions because it is likely to be a programmer's intent.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":[],"examples":"function foo() {\n  bar = 4; // ASSIGN_BEFORE_DECL alarm\n  var bar;\n  console.log(bar);\n}\nfoo();","examplesRevised":"function foo() {\n  var bar = 4;\n  console.log(bar);\n}\nfoo();","cwe":[],"see":[]},{"key":"ASSIGN_SAME_VALUE","name":"The same value is assigned to the variable again","description":"This rule applies when a variable is assigned with the same value as the following:\n\n1. Assignment made to same variable\n2. Redundant assignment\n3. Swapping the assignment with LHS and RHS variables\n\nThe above assignments can be unnecessary code, but they can be assigned with a wrong variable which is not likely to be a programmer's intent.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":[],"examples":"function example1() {\n  a = a; // ASSIGN_SAME_VALUE alarm\n}\n\nfunction example2() {\n  a = b;\n  a = b; // ASSIGN_SAME_VALUE alarm\n}\n\nfunction example3() {\n  r = a;\n  a = b;\n  b = a; // ASSIGN_SAME_VALUE alarm because b already has the same value as a.\n}","examplesRevised":"function example1() {\n  a = b;\n}\n\nfunction example2() {\n  a = b;\n}\n\nfunction example3() {\n  r = a;\n  a = b;\n  b = r; // a and b are correctly swapped.\n}","cwe":[],"see":[]},{"key":"ASSIGN_TO_PROPERTY_OF_PRIMITIVE","name":"Assignment should not be made to property of primitive value","description":"This rule applies when assignment is made to property of primitive value.\n\nIn such a case, an exception is thrown in strict mode. In non-strict mode, assignment is ignored unlike the intention of a programmer.","severity":["Medium","High"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"function h() {\n  'use strict';\n  const a = 'str1';\n  a.prop = 42; // ASSIGN_TO_PROPERTY_OF_PRIMITIVE alarm because 'a' is a primitive string value.\n}","examplesRevised":"function h() {\n  'use strict';\n  const a = new String('str1');\n  a.prop = 42;\n}","cwe":[],"see":[]},{"key":"AWAIT_NON_PROMISE","name":"`await` operator should not be used on a non-Promise value","description":"This rule applies when the `await` operator is used on a non-Promise value.\n\n`await` operator pauses the execution of the current `async` function until the operand `Promise` is resolved.\nWhen the `Promise` is resolved, the execution is resumed and the resolved value is used as the result of the `await`.\n\nAlthough awaiting a non-Promise value is possible under the JavaScript specification (it will be converted to a resolved `Promise`), it is often a programmer's mistake and may cause an unexpected order of execution.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["es8"],"examples":"function say(msg) {\n  return (() => {\n    console.log(msg);\n    return 'Done';\n  });\n}\nfunction doSomethingAfter1Sec(something) {\n  setTimeout(() => {\n    something();\n  }, 1000);\n}\nasync function asyncCall() {\n  console.log('Start');\n  const result = await doSomethingAfter1Sec(say('Hi')); // AWAIT_NON_PROMISE alarm because 'doSomethingAfter1Sec(...)' is not Promise.\n  console.log('Result: ' + result);\n  console.log('End');\n\n  console.log('Start');\n  await [1, 2, 3].map(x => doSomethingAfter1Sec(say(x))); // AWAIT_NON_PROMISE alarm because awaiting an array has no effect.\n  console.log('End');\n}","examplesRevised":"function say(msg) {\n  return (() => {\n    console.log(msg);\n    return 'Done';\n  });\n}\nfunction doSomethingAfter1Sec(something) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(something());\n    }, 1000);\n  });\n}\nasync function asyncCall() {\n  console.log('Start');\n  const result = await doSomethingAfter1Sec(say('Hi'));\n  console.log('Result: ' + result);\n  console.log('End');\n\n  console.log('Start');\n  await Promise.all([1, 2, 3].map(x => doSomethingAfter1Sec(say(x))));\n  console.log('End');\n}","cwe":[],"see":["[await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await)","[async function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)"]},{"key":"BAD_ARRAY_METHOD_ON_ARGUMENTS","name":"Array methods should not be called on the `arguments` object itself","description":"This rule applies when an array method is called on the `arguments` object itself.\n\nThe `arguments` object is not an array, but an array-like object. It should be converted to a real array before calling an array method. Otherwise, a `TypeError` exception will be thrown because of the non-existent method.\n\nIn general, instead of using `arguments`, it is recommended to use rest parameters which are real `Array` objects.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":[""],"examples":"function add(x, y) {\n  return x + y;\n}\nfunction sum() {\n  return arguments.reduce(add, 0); // BAD_ARRAY_METHOD_ON_ARGUMENTS alarm because 'reduce()' is an array method.\n}","examplesRevised":"function add(x, y) {\n  return x + y;\n}\nfunction sum(...args) { // Use rest parameter instead of 'arguments'\n  return args.reduce(add, 0);\n}","cwe":[],"see":["[The arguments object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments)","[Rest parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters)"]},{"key":"BAD_ASSIGN_IN_CONDITION","name":"An equality operator should be used instead of an assignment operator in a conditional statement","description":"This rule applies when an assignment operator is unintentionally used in a conditional statement instead of an equality operator.\n\n**Note:** There are cases where an assignment operator is intentionally used in a conditional statement to simplify an assignment and a truthy value check. In order not to detect these intentional cases as alarms, this rule only applies when the RHS of the assignment is evaluated to a constant value.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["cwe"],"examples":"x = str.indexOf(y);\nif (x = -1) return \"no\"; // BAD_ASSIGN_IN_CONDITION alarm. The true branch is always taken and \"no\" is returned.\nelse return \"yes\";","examplesRevised":"x = str.indexOf(y);\nif (x == -1) return \"no\";\nelse return \"yes\";","cwe":["480","481"],"see":[]},{"key":"BAD_ASSIGN_TO_CONST","name":"Reassignment should not be made to a variable that is declared using `const` keyword","description":"This rule applies when reassignment is made to a variable declared using `const` keyword.\n\nThe value of the `const` variable is constant in block-scope. So a `TypeError` exception occurs when the `const` variable is reassigned in block-scope.\n\nThis rule also applies to `using` and `await using` variables for explicit resource management because they are also read-only.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["es6"],"examples":"// Example 1\nconst A = 1;\nA = A + 1; // BAD_ASSIGN_TO_CONST alarm\n\n// Example 2\nconst MY_OBJECT = { key1: 'value1' };\nMY_OBJECT = { key2: 'value2' }; // BAD_ASSIGN_TO_CONST alarm\n\n// Example 3\nconst MY_ARRAY = [];\nMY_ARRAY = [\"A\"]; // BAD_ASSIGN_TO_CONST alarm","examplesRevised":"// Example 1\nlet A = 1;\nA = A + 1;\n\n// Example 2\nconst MY_OBJECT = { key1: 'value1' };\nMY_OBJECT.key2 = \"value2\";\n\n// Example 3\nconst MY_ARRAY = [];\nMY_ARRAY.push(\"A\");","cwe":[],"see":["[const](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const)"]},{"key":"BAD_ASSIGN_TO_PROTO","name":"The `__proto__` property of an object should be assigned with a proper value.","description":"This rule applies when an invalid value is assigned to the `__proto__` property of an object.\n\nOnly objects and `null` can be assigned to the `__proto__` property; other values will be ignored.\n\n**Note:** It is recommended to use `Object.getPrototypeOf()` and `Object.setPrototypeOf()` instead of `__proto__` property.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"const x = {}\nx.__proto__ = undefined; // BAD_ASSIGN_TO_PROTO alarm","examplesRevised":"const x = {}\nObject.setPrototypeOf(x, null);","cwe":[],"see":["[Object.prototype.\\_\\_proto\\_\\_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto)"]},{"key":"BAD_BACK_REFERENCE_IN_REGEXP","name":"Back reference in a regular expression should be used after the referred group","description":"This rule applies when a back reference in a regular expression is used before the referred group matches.\n\nA back reference like `\\1` is used to refer the input characters previously matched by a capture group. For example, `/(foo|bar)\\1/` will match `foofoo` or `barbar` but not `foobar`.\n\nHowever, when a back reference is placed before the referred group, it will always match just the empty string. This is not likely to be a programmer's intent.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"const re = /\\1(foo|bar)/; // BAD_BACK_REFERENCE_IN_REGEXP alarm because the referred group '(foo|bar)` appears after the reference '\\1'.","examplesRevised":"const re = /(foo|bar)\\1/;","cwe":[],"see":["[Backreference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference)"]},{"key":"BAD_BITWISE_OPERATOR","name":"Bitwise operators should not be used where logical operators are expected","description":"This rule applies when bitwise operators are used where logical operators are expected.\n\nBitwise operators have different results from logical operators and a `TypeError` exception may be thrown because short-circuit evaluation is not applied. (In short-circuit evaluation, right operand evaluation is skipped according to left operand value, e.g. `x` is `false` in `x && y`.)\n\nIt is obvious that logical operators are expected in the following code patterns:\n\n1. `e && e.x`\n2. `e || {}`\n3. `e || ''`","severity":["Medium","High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["cwe"],"examples":"// Example 1\nif (obj & obj.prop) { // BAD_BITWISE_OPERATOR alarm\n  console.log(obj.prop);\n}\n\n// Example 2\noptions = options | {}; // BAD_BITWISE_OPERATOR alarm\n\n// Example 3\ninput |= ''; // BAD_BITWISE_OPERATOR alarm","examplesRevised":"// Example 1\nif (obj && obj.prop) {\n  console.log(obj.prop);\n}\n\n// Example 2\noptions = options || {};\n\n// Example 3\ninput = input || '';","cwe":["480"],"see":[]},{"key":"BAD_CHAR_AT_COMPARISON","name":"The result of `String.prototype.charAt()` should not be compared with a string of length 2 or more","description":"This rule applies when the result of `String.prototype.charAt()` is compared with a string of length 2 or more.\n\nNormally, `String.prototype.charAt()` returns just a character or an empty string if the index is out of range.\n\nTherefore, when it is compared with a string of length 2 or more, the result will be always `false`. This is not likely to be a programmer's intent.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"const str = \"\\nfoo\";\nif (str.charAt(0) === \"/n\") { // BAD_CHAR_AT_COMPARISON alarm because \"/n\" is of length 2.\n  console.log(\"new line at the beginning.\");\n}","examplesRevised":"const str = \"\\nfoo\";\nif (str.charAt(0) === \"\\n\") {\n  console.log(\"new line at the beginning.\");\n}","cwe":[],"see":["[String.prototype.charAt()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt)"]},{"key":"BAD_COMPARISON_SEQUENCE","name":"The comparison operator should not be applied 2 or more times in a row","description":"This rule applies when the comparison operator is applied two or more times in a row.\n\nBecause comparison operator is a binary operator, it is impossible to compare three or more operands at once.\n\nIf comparison operator is used to compare three or more operands, only the first two operands are compared and the rest is compared with its result of boolean type.\n\nIf you need to compare three or more operands, you should connect each comparison operation with logical AND operator (`&&`). Otherwise, if comparison of boolean values is indeed intended, use parentheses to clarify the intention.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Clear","tag":[],"examples":"if (a == b == c) {\n  console.log(\"a, b, and c are the same\");\n}","examplesRevised":"if (a == b && b == c) {\n  console.log(\"a, b, and c are the same\");\n}","cwe":[],"see":["[Comparison operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#comparison_operators)"]},{"key":"BAD_COMPARISON_WITH_FLOAT","name":"The result of integer-returning built-in API should not be compared with a float number","description":"This rule applies when the result of a built-in API that returns an integer is compared with a float number.\n\nDepending on the comparison operator, the following unintended behaviors may occur when the integer is compared with a float:\n\n 1. `==`, `===`, `!=`, `!==`: The comparison result is always false.\n 2. `<`, `<=`, `>`, `>=`: The comparison becomes imprecise.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Clear","tag":[],"examples":"// Example 1\nif (parseInt(x) == 0.1) { // BAD_COMPARISON_WITH_FLOAT alarm because the comparison result is always false.\n  doSomething(x);\n}\n\n// Example 2\nlet rounded = Math.round(x);\nif (rounded < 4.2) { // BAD_COMPARISON_WITH_FLOAT alarm because the comparison is imprecise.\n  doSomething(x, rounded);\n}","examplesRevised":"// Example 1\nif (parseFloat(x) == 0.1) {\n  doSomething(x);\n}\n\n// Example 2\nlet rounded = Math.round(x);\nif (x < 4.2) {\n  doSomething(x, rounded);\n}","cwe":[],"see":[]},{"key":"BAD_CONDITIONAL_OPERATOR","name":"The conditional operator should be used in correct order","description":"This rule applies when the conditional expression of conditional operator is ambiguous.\n\nWithin an expression, a conditional operator is calculated after other operators are calculated because its precedence is quite low.\n\nEven if there is no fault in a conditional operator, it is recommended to apply parenthesis for readability and maintainability.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Clear","tag":[],"examples":"// Example 1\nconst msg = \"Mode \" + isActivated ? \"activated\" : \"deactivated\";\n\n// Example 2\nconst size = base + (buf.length > MAX) ? MAX : buf.length;","examplesRevised":"// Example 1\nconst msg = \"Mode \" + (isActivated ? \"activated\" : \"deactivated\");\n\n// Example 2\nconst size = base + ((buf.length > MAX) ? MAX : buf.length);","cwe":[],"see":["[Conditional (ternary) operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator)"]},{"key":"BAD_ESCAPE_AT_REGEXP_CONSTRUCTOR","name":"Character escapes should be used properly when constructing a regular expression from string literal","description":"This rule applies when character escapes are not properly used when constructing a regular expression from string literal.\n\nA regular expression can be constructed from a string literal using the `RegExp()` constructor. In the string literal used, normal character escape rules are applied just like any other string. This can be confusing because a regular expression has different sets of escaping rules.\n\nFor example, `new RegExp('\\\\s')` should be used to maintain the backslash in the constructed regular expression. If `new RegExp('\\s')` is used instead, `s` will be matched instead of a whitespace character. Note that under the string escape rule, `\\s` is interpreted just as `s`.\n\nThis rule also applies to `String.prototype.match()` and `String.prototype.search()` that also construct regular expressions from string arguments.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"function foo(x) {\n  return new RegExp('\\$' + x); // BAD_ESCAPE_AT_REGEXP_CONSTRUCTOR alarm because '\\$' is not properly escaped.\n}","examplesRevised":"function foo(x) {\n  return new RegExp('\\\\$' + x);\n}","cwe":[],"see":["[RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp)","[String.prototype.match()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)","[String.prototype.search()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search)"]},{"key":"BAD_EVENT_LISTENER_CALL","name":"The handler function itself should be used at `addEventListener()` and `removeEventListener()`","description":"This rule applies when the handler is mistakenly called at the argument of `addEventListener()` and `removeEventListener()`.\n\nThe second argument of `addEventListener()` and `removeEventListener()` should be the handler function itself, not its return value. When a non-function value is used as a handler, a `TypeError` exception may occur depending on the type of the value.\n\nThis rule also applies to the analogous `setTimeout()`, `setInterval()`, `setImmediate()` and `process.nextTick()`.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"function clickHandler() {\n  handleClick();\n}\nwindow.addEventListener('click', clickHandler()); // BAD_EVENT_LISTENER_CALL alarm","examplesRevised":"function clickHandler() {\n  handleClick();\n}\nwindow.addEventListener('click', clickHandler);","cwe":[],"see":["[addEventListener()](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)","[removeEventListener()](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener)","[setTimeout()](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)","[setInterval()](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)","[setImmediate()](https://nodejs.org/api/timers.html#setimmediatecallback-args)","[process.nextTick()](https://nodejs.org/api/process.html#processnexttickcallback-args)"]},{"key":"BAD_FINALLY_CONTROL_FLOW","name":"`finally` block should not execute `return` or `throw` after `try-catch` block already executes `return` or `throw`","description":"This rule applies when `finally` block executes `return` or `throw` after `try-catch` already executes `return` or `throw`.\n\nIf the `finally` block executes `return` or `throw` a value, it overwrites the previous result of `try-catch` block.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Clear","tag":[],"examples":"try {\n  return foo();\n} catch (e) {\n  return bar();\n} finally {\n  return finalFunc(); // BAD_FINALLY_CONTROL_FLOW alarm because this will overwirte try-catch return value.\n}","examplesRevised":"try {\n  return foo();\n} catch (e) {\n  return bar();\n} finally {\n  finalFunc();\n}","cwe":[],"see":["[The finally block](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try%2e%2e%2ecatch#the_finally_block)"]},{"key":"BAD_FOR_STATEMENT","name":"The index variable of `for` statement should be initialized and updated properly","description":"This rule applies when a `for` statement has an improper initialization or update of the index variable.\n\n`for` statement may behave unintendedly in the following cases:\n\n1. The index variable is initialized by the final value of the loop.\n2. An irrelevant variable is updated instead of the index variable.\n3. The direction of the index update is inconsistent with the loop termination condition.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"// Example 1\nfor (let i = arraySize; i < arraySize; i++) { // BAD_FOR_STATEMENT alarm because index 'i' is initialized by the final value of the loop.\n}\n\n// Example 2\nfor (let i = 0; i < array.length; index++) { // BAD_FOR_STATEMENT alarm because irrelevant variable 'index' is updated.\n}\n\n// Example 3\nfor (let i = 0; i < array.length; i--) { // BAD_FOR_STATEMENT alarm because index 'i' is updated in wrong direction.\n}","examplesRevised":"for (let i = 0; i < array.length; i++) {\n}","cwe":[],"see":["[for statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for)"]},{"key":"BAD_MATCH_ALL_ARG","name":"`String.prototype.matchAll()` should be called with a global regular expression","description":"This rule applies when a regular expression without the global flag (`g`) is used at `String.prototype.matchAll()`.\n\nUnlike other methods using regular expression, `String.prototype.matchAll()` always finds all matches in the input string and returns an iterator of the matches including the capturing groups. So, it is nonsensical to use a regular expression without the global flag at `String.prototype.matchAll()`, which causes a `TypeError` exception.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["es11"],"examples":"const line = \"x:0, y:42\";\nlet numberMatches = line.matchAll(/\\d+/); // BAD_MATCH_ALL_ARG alarm","examplesRevised":"const line = \"x:0, y:42\";\nlet numberMatches = line.matchAll(/\\d+/g);","cwe":[],"see":["[String.prototype.matchAll()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll)","Uncaught TypeError: String.prototype.matchAll called with a non-global RegExp argument"]},{"key":"BAD_MONTH_ARG","name":"The month argument of `Date` methods should not be specified as 12","description":"This rule applies when the month argument of `Date` methods is specified as 12.\n\nSince the month argument is 0-based, specifying 12 results in the January of the next year. This is not likely to be a programmer's intent. If specifying the January date was actually intended, it is recommended to add 1 to the year argument and use 0 as the month to clarify the intention.\n\nNote that the day argument is 1-based unlike the month argument.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Clear","tag":[],"examples":"let christmas = new Date(2020, 12, 25); // BAD_MONTH_ARG alarm","examplesRevised":"let christmas = new Date(2020, 11, 25);","cwe":[],"see":["[Date() constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date)","[Date.UTC()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC)","[Date.prototype.setFullYear()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear)","[Date.prototype.setUTCFullYear()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCFullYear)","[Date.prototype.setMonth()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth)","[Date.prototype.setUTCMonth()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMonth)"]},{"key":"BAD_MIN_MAX_FUNC","name":"`Math.min` and `Math.max` functions should be combined in correct order","description":"This rule applies when `Math.min` and `Math.max` functions are incorrectly combined.\n\n`x = Math.min(100, x);` specifies upper limit of `x` as 100 and `x = Math.max(0, x);` specifies the lower limit as 0. When these limit values are combined in incorrect order, the same result is always produced in unexpected way.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"x = Math.min(0, Math.max(100, x)); // BAD_MIN_MAX_FUNC alarm. The result is always 0.","examplesRevised":"x = Math.max(0, Math.min(100, x));","cwe":[],"see":["[Math.min()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min)","[Math.max()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max)"]},{"key":"BAD_NEGATION_OPERATOR","name":"The logical negation operator should be used in correct order","description":"This rule applies when the logical negation operator (`!`) is evaluated in incorrect order because of operator precedence.\n\nFor example, if code to test whether `x` is not array is written like `!x instanceof Array`, it is evaluated as `(!x) instanceof Array`, resulting in `false` regardless of `x`. In this case, explicit parentheses should be used as in `!(x instanceof Array)` because `!` has higher precedence than binary operators.\n\nThe following binary operators are considered: `in`, `instanceof`, `<`, `>`, `<=`, `>=`, `==`, `!=`, `===`, `!==`","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Clear","tag":["cwe"],"examples":"// Example 1\nif (!x instanceof Array) { // BAD_NEGATION_OPERATOR alarm. The result is always false.\n  console.log('x is not array');\n}\n\n// Example 2\nif (!x.length === 0) { // BAD_NEGATION_OPERATOR alarm. The result is always false.\n  console.log('x is not empty');\n}","examplesRevised":"// Example 1\nif (!(x instanceof Array)) {\n  console.log('x is not array');\n}\n\n// Example 2\nif (x.length !== 0) {\n  console.log('x is not empty');\n}","cwe":["569","570"],"see":[]},{"key":"BAD_NUMBER_FUNC","name":"String functions should not be used on number values","description":"This rule applies when string functions are used on number values.\n\nWhen string functions are called on number values, a `TypeError` exception occurs.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"const x = 1234;\nconst y = (x / 100).indexOf('.'); // BAD_NUMBER_FUNC alarm","examplesRevised":"const x = 1234;\nconst y = String(x / 100).indexOf('.');","cwe":[],"see":["[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)"]},{"key":"BAD_NUMBER_PROPERTY","name":"Non-existent properties of number value should not be accessed","description":"This rule applies when non-existent properties of number value are accessed.\n\nAccessing non-existent properties of number value results in `undefined` value.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"const x = 1234;\nconst y = x.length; // BAD_NUMBER_PROPERTY alarm","examplesRevised":"const x = 1234;\nconst y = x.toString().length;","cwe":[],"see":[]},{"key":"BAD_OBJECT_LITERAL_COMPARISON","name":"Object literal should not be used for comparison","description":"This rule applies when an object literal is used for comparison.\n\nFresh object is allocated at `Object` or `Array` literal, so the following comparison with the literal has always the same result and can lead to unintended behavior.\n\n  1. Strict equality comparison(`===`, `!==`) of the literal with any type\n  2. Equality comparison(`==`, `!=`) of the literal with an object type","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"// Example 1\nif (x === {}) { // BAD_OBJECT_LITERAL_COMPARISON alarm because of strict equality comparison with an object literal.\n  console.log('x is an empty object');\n} else if (x === []) { // BAD_OBJECT_LITERAL_COMPARISON alarm because of strict equality comparison with an array literal.\n  console.log('x is an empty array');\n}\n\n// Example 2\nif (typeof obj == 'object' && obj == {}) { // BAD_OBJECT_LITERAL_COMPARISON alarm because of equality comparison of an object literal with an object type.\n  console.log('obj is an empty object');\n}","examplesRevised":"// Example 1\nif (Array.isArray(x)) {\n  // Empty checking for an array\n  if (x.length === 0) {\n    console.log('x is an empty array');\n  }\n} else if (typeof x === 'object') {\n  // Empty checking for an object\n  if (Object.keys(x).length === 0) {\n    console.log('x is an empty object');\n  }\n}\n\n// Example 2\nif (typeof obj == 'object' && Object.keys(obj).length == 0) {\n  console.log('obj is an empty object');\n}","cwe":[],"see":["[How to test for an empty object](https://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object)"]},{"key":"BAD_OPERAND_TYPE","name":"`in` and `instanceof` should have a right operand of proper type","description":"This rule applies when `in` and `instanceof` operators have a right operand of wrong type.\n\nIt can be applied to the following:\n\n 1. Right operand of `in` operator is not an object.\n 2. Right operand of `instanceof` operator is not a constructor.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"// Example 1\nconst a = \"prop\" in 42; // BAD_OPERAND_TYPE alarm\n\n// Example 2\nfunction Foo() {\n}\nconst x = new Foo();\nconst b = x instanceof \"string\"; // BAD_OPERAND_TYPE alarm","examplesRevised":"// Example 1\nconst a = \"prop\" in obj;\n\n// Example 2\nfunction Foo() {\n}\nconst x = new Foo();\nconst b = x instanceof Foo;","cwe":[],"see":["[in operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in)","[instanceof operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof)"]},{"key":"BAD_PROPERTY_DESCRIPTOR","name":"Property descriptors should be defined properly","description":"This rule applies when an invalid property descriptor is used at `Object.defineProperty()` or `Object.defineProperties()`.\n\nProperty descriptors can define either a regular data property or an accessor property having a getter or setter function.\n\nWhen defining an accessor, caution is needed as `TypeError` exceptions occur in the following cases:\n\n 1. The getter or setter is specified with a non-function value except `undefined`.\n 2. A `value` or `writable` attribute which applies only to data descriptors is also specified.\n\nNote that the `writable` attribute is meaningless for an accessor because an accessor is inherently non-writable when the setter is not defined.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":[""],"examples":"// Example 1\nObject.defineProperty(obj, \"prop1\", {\n  get: 42, // BAD_PROPERTY_DESCRIPTOR alarm because '42' is not a function.\n  set: function (x) {\n    doSomething(x);\n  }\n});\n\n// Example 2\nObject.defineProperty(obj, \"prop2\", {\n  get: function() {\n    return 42;\n  },\n  writable: false // BAD_PROPERTY_DESCRIPTOR alarm because 'writable' cannot be specified for an accessor.\n});","examplesRevised":"// Example 1\nObject.defineProperty(obj, \"prop1\", {\n  get: function () {\n    return 42;\n  },\n  set: function (x) {\n    doSomething(x);\n  }\n});\n\n// Example 2\nObject.defineProperty(obj, \"prop2\", {\n  get: function() {\n    return 42;\n  }\n});","cwe":[],"see":["[Object.defineProperty()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)","[Object.defineProperties()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties)"]},{"key":"BAD_RANGE_IN_CHARACTER_CLASS","name":"A character range from an uppercase to a lowercase should not be used in a regular expression","description":"This rule applies when a character range in a regular expression is from an uppercase letter to a lowercase one.\n\nThe ASCII character table has several non-alphabetical characters between the `A-Z` and `a-z` ranges. For example, a character range `[A-z]` is equivalent to ``[A-Z[\\\\\\]^_`a-z]``.\n\nUsually, the lowercase letter is a typo because those non-alphabetical characters are unlikely to be intended.\nWhen the characters are actually intended, it is recommended to write them explicitly for code readability.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Clear","tag":[""],"examples":"function isAlphaNumeric(str) {\n  return /^[0-9A-z]+$/.test(str); // BAD_RANGE_IN_CHARACTER_CLASS alarm\n}","examplesRevised":"function isAlphaNumeric(str) {\n  return /^[0-9A-Za-z]+$/.test(str);\n}","cwe":[],"see":["[Character class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class)"]},{"key":"BAD_REGEXP","name":"Empty character classes should not be used in regular expressions","description":"This rule applies when a regular expression has empty character classes.\n\nBecause empty character classes '[]' in regular expressions do not match anything, they are not likely to be a programmer's intent.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"const foo = /^abc[]/;","examplesRevised":"const foo = /^abc\\[\\]/;","cwe":[],"see":["[Character class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class)"]},{"key":"BAD_REGEXP_LITERAL_IN_STRING","name":"Regular expression should not be wrapped as a string at `String.prototype.replace()`","description":"This rule applies when a regular expression literal is wrapped as a string at the first argument of `String.prototype.replace()`.\n\n`String.prototype.replace()` accepts string or regular expression as the first argument. String argument is searched verbatim whereas matching pattern is searched for regular expression argument.\n\nWhen a regular expression literal is wrapped with quotes like `'/\\s+/g'`, it will be recognized as a string argument and searched literally. This is not likely to be a programmer's intent.\n\nThis rule also applies to the analogous `String.prototype.split()`.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"foo = foo.replace('/\\s+/g', '_'); // BAD_REGEXP_LITERAL_IN_STRING alarm because quotes are used.","examplesRevised":"foo = foo.replace(/\\s+/g, '_');","cwe":[],"see":["[String.prototype.replace()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)","[String.prototype.split()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)"]},{"key":"BAD_REMOVE_EVENT_LISTENER","name":"`removeEventListener()` should be called with a correct listener","description":"This rule applies when `removeEventListener()` is called with a wrong listener.\n\nThe `removeEventListener()` method can only remove the exact function instance that was added at the `addEventListener()` call. So, nothing occurs in the following cases:\n 1. When a newly created function is passed. This case is likely caused by a programmer's misunderstanding that if two functions have the same textual body, they will represent the same function instance. Also, it could result from the `Function.prototype.bind()` that always generates a new function instance.\n 2. When the return value of `addEventListener()` is passed. Note that the return value of `addEventListener()' is not the added listener function, but an `undefined` value.\n\nUnremoved listeners would cause a memory leak. To fix this problem, you should keep the reference of the added handler and use it as the argument of the `removeEventListener()`.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[""],"examples":"// Example 1\nexport class Foo {\n  update() {\n    doUpdate(this);\n  }\n  addHandlers() {\n    document.addEventListener(\"keydown\", () => foo());\n    document.addEventListener(\"click\", this.update.bind(this));\n  }\n  removeHandlers() {\n    document.removeEventListener(\"keydown\", () => foo()); // BAD_REMOVE_EVENT_LISTENER alarm\n    document.removeEventListener(\"click\", this.update.bind(this)); // BAD_REMOVE_EVENT_LISTENER alarm\n  }\n}\n\n// Example 2\nexport class Bar {\n  update = () => {\n    doUpdate(this);\n  }\n  init() {\n    this.handler = document.addEventListener(\"click\", this.update);\n  }\n  destroy() {\n    document.removeEventListener(\"click\", this.handler); // BAD_REMOVE_EVENT_LISTENER alarm\n  }\n}","examplesRevised":"// Example 1\nexport class Foo {\n  keydownHandler() {\n    foo();\n  }\n  update = () => {\n    doUpdate(this);\n  }\n  addHandlers() {\n    document.addEventListener(\"keydown\", this.keydownHandler);\n    document.addEventListener(\"click\", this.update);\n  }\n  removeHandlers() {\n    document.removeEventListener(\"keydown\", this.keydownHandler);\n    document.removeEventListener(\"click\", this.update);\n  }\n}\n\n// Example 2\nexport class Bar {\n  update = () => {\n    doUpdate(this);\n  }\n  init() {\n    document.addEventListener(\"click\", this.update);\n  }\n  destroy() {\n    document.removeEventListener(\"click\", this.update);\n  }\n}","cwe":[],"see":["[addEventListener()](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)","[removeEventListener()](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener)"]},{"key":"BAD_REPLACE_ALL_ARG","name":"`String.prototype.replaceAll()` should not be called with a non-global regular expression","description":"This rule applies when a regular expression without the global flag (`g`) is used at `String.prototype.replaceAll()`.\n\nUnlike other methods using regular expression, `String.prototype.replaceAll()` always replaces all matches in the input string. So, it is nonsensical to use a regular expression without the global flag at `String.prototype.replaceAll()`, which causes a `TypeError` exception.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["es12"],"examples":"const withSpaces = \"foo bar   baz\";\nconst withCommas = withSpaces.replaceAll(/\\s+/, ','); // BAD_REPLACE_ALL_ARG alarm","examplesRevised":"const withSpaces = \"foo bar   baz\";\nconst withCommas = withSpaces.replaceAll(/\\s+/g, ',');","cwe":[],"see":["[String.prototype.replaceAll()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll)","Uncaught TypeError: String.prototype.replaceAll called with a non-global RegExp argument"]},{"key":"BAD_RETURN_IN_FOREACH","name":"The callback function of `forEach()` should not return a value uselessly","description":"This rule applies when the callback function of `forEach()` returns any value.\n\n`forEach()` always ignores the return value of the callback function.\n\nTo pass a return value to an external function within the callback function, it is necessary to pass the value through a variable defined in the external function.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[""],"examples":"function foo(a) {\n  a.forEach(e => { // BAD_RETURN_IN_FOREACH alarm\n    if (e.active) {\n      return e.data; // This return value is ignored\n    }\n  });\n  return null;\n}","examplesRevised":"function foo(a) {\n  let data = null;\n  a.forEach(e => {\n    if (e.active) {\n      data = e.data;\n    }\n  });\n  return data;\n}","cwe":[],"see":["[Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)"]},{"key":"BAD_STRING_CASE_COMPARISON","name":"Result of `String.prototype.toLowerCase()` and `String.prototype.toUpperCase()` should be compared with a lower and upper case string","description":"This rule applies when `String.prototype.toLowerCase()` or `String.prototype.toUpperCase()` result is compared with a different case string.\n\n`String.prototype.toLowerCase()` or `String.prototype.toUpperCase()` returns a lower or upper case string.\n\nTherefore, when it is compared with a different lower or upper case string, the result will be always `false` or `true`. This is not likely to be a programmer's intent.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"// Example 1\nconst str = \"foo\";\nif (str.toUpperCase() === \"Foo\") { // BAD_STRING_CASE_COMPARISON alarm because \"Foo\" is a non-uppercase string.\n  console.log(\"is FOO\");\n}\n\n// Example 2\nconst bar = \"bar\";\nif (bar.toUpperCase().startsWith(\"b\")) { // BAD_STRING_CASE_COMPARISON alarm because \"b\" is a non-uppercase string.\n  console.log(\"starts with b\");\n}","examplesRevised":"// Example 1\nconst str = \"foo\";\nif (str.toUpperCase() === \"FOO\") {\n  console.log(\"is FOO\");\n}\n\n// Example 2\nconst bar = \"bar\";\nif (bar.toUpperCase().startsWith(\"B\")) {\n  console.log(\"starts with B\");\n}","cwe":[],"see":["[String.prototype.toLowerCase()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase)","[String.prototype.toUpperCase()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase)"]},{"key":"BAD_TEST_WITH_GLOBAL_REGEXP","name":"The `test()` method of a global regular expression should be used with caution","description":"This rule applies when the `test()` method of a regular expression with the global flag (`g`) is not used properly.\n\nWhen the `g` flag is set, the matched index of the last invocation is recorded on the `lastIndex` property of the regular expression instance. Subsequent invocations begin the search at the index. So, if you call `test()` multiple times on the same instance, an incorrect `false` value can be returned.\n\nTo fix this problem, you should manually reset `lastIndex` to 0 before calling `test()`.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[""],"examples":"let invalidCharRE = /[^a-zA-Z0-9_]/g;\n\nexport function isValid(str) {\n  return !invalidCharRE.test(str); // BAD_TEST_WITH_GLOBAL_REGEXP alarm because the search may begin in the middle of 'str'.\n}\n\nexport function makeValid(str) {\n  return str.replace(invalidCharRE, \"_\");\n}","examplesRevised":"let invalidCharRE = /[^a-zA-Z0-9_]/g;\n\nexport function isValid(str) {\n  invalidCharRE.lastIndex = 0;\n  return !invalidCharRE.test(str);\n}\n\nexport function makeValid(str) {\n  // This is ok because 'String.prototype.replace()' internally resets the 'lastIndex' property.\n  return str.replace(invalidCharRE, \"_\");\n}","cwe":[],"see":["[RegExp.prototype.test()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test)","[RegExp: lastIndex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex)"]},{"key":"BAD_TYPE_COERCION","name":"Suspicious type coercion should be avoided","description":"This rule applies when suspicious type coercion occurs.\n\nJavaScript utilizes implicit type conversion widely, so a programmer needs to check type conversion with caution.\n\nThe following is suspicious implicit type conversion for X:\n\n 1. X is converted to string.\n  * X + string (X is undefined or symbol.)\n\n 2. X is converted to number.\n  * X + undefined/null/boolean/number/symbol (X is undefined, null, or symbol.)\n  * X @ <All types> (X is undefined/null/non-numeric string/symbol/object. @ means -, *, /, %, **.)\n  * X @ Y (X is undefined/null/boolean/non-numeric string/symbol except for the case where X and Y are both strings. @ means <, <=, >, >=.)\n  * X @ number (X is object. @ means <, <=, >, >=.)\n  * X & <All types> (X is undefined/null/boolean/non-numeric string/symbol/object.)\n  * X | boolean (X is boolean.)\n  * X | Y (X is symbol.)\n  * X @ Y (X is boolean and Y is number/string/object. Or X is non-numeric string and Y is boolean/number. Or X is object and Y is boolean/number. @ means ==, !=.)\n  * @ X (X is non-numeric string. @ means +, -.)\n\n 3. X is converted to boolean. (X is a primitive wrapper object.)\n  * if (X) ...\n  * X && ...\n  * X || ...\n  * X ? ... : ...\n  * !X\n\nFor your reference, JavaScript converts a type like the following:\n\n 1. `undefined` is converted to string: \"undefined\"\n 2. `undefined` is converted to number: `NaN`\n 3. `null` is converted to string: \"null\"\n 4. `null` is converted to number: 0\n 5. boolean is converted to number: false is 0, true is 1.\n 6. Empty string is converted to number: 0\n 7. Neither empty nor numeric string is converted to number: `NaN`\n 8. `Symbol` is converted to string or number: a `TypeError` exception is thrown.\n 9. Primitive wrapper object is converted to boolean: true","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["cwe"],"examples":"function example1() {\n  let cssString = \"\";\n  let backPosition;\n  if (animatedBackground.length === 3) {\n    cssString += \"backgroundPosition: \" + backPosition + \"px; \"; // BAD_TYPE_COERCION alarm: Expression 'backPosition' has an undefined value and type-coerced to string type.\n  }\n  return cssString;\n}\n\nfunction example2() {\n  const mod = $index & 1;\n  if (mod !== old$index & 1) { // BAD_TYPE_COERCION alarm: Expression 'mod !== old$index' has boolean type and type-coerced to number type.\n    if (mod === selector) {\n      addClass(scope.$eval(attr[name]));\n    } else {\n      removeClass(scope.$eval(attr[name]));\n    }\n  }\n}","examplesRevised":"function example1() {\n  let cssString = \"\";\n  let backPosition;\n  if (animatedBackground.length === 3) {\n    backPosition = 0; // Assign a valid value.\n    cssString += \"backgroundPosition: \" + backPosition + \"px; \";\n  }\n  return cssString;\n}\n\nfunction example2() {\n  const mod = $index & 1;\n  if (mod !== (old$index & 1)) { // Use parentheses.\n    if (mod === selector) {\n      addClass(scope.$eval(attr[name]));\n    } else {\n      removeClass(scope.$eval(attr[name]));\n    }\n  }\n}","cwe":["843"],"see":[]},{"key":"BAD_TYPEOF_COMPARISON","name":"Result of `typeof` should be compared with correct value","description":"This rule applies when the result of `typeof` is compared with incorrect value.\n\nPossible return values of `typeof` operator are the following strings:\n\n * \"undefined\"\n * \"object\"\n * \"boolean\"\n * \"number\"\n * \"string\"\n * \"symbol\"\n * \"function\"\n\nTherefore, if a programmer compares with the value not listed above, it will always result in `false` undesirably.\n\nFor more information, please see [this documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof).","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"// Example 1\n// BAD_TYPEOF_COMPARISON alarm because 'array' is not the possible return value of typeof.\nif (typeof x === 'array') { console.log('x is array'); }\n\n// Example 2\n// BAD_TYPEOF_COMPARISON alarm because 'udefined' is mistyping of 'undefined'.\nconst zkPort = typeof portValue === 'udefined' ? '2181' : portValue;\n\n// Example 3\n// BAD_TYPEOF_COMPARISON alarm because typeof result is not compared with a string value.\nif (typeof x === undefined) { console.log('x is undefined'); }\n\n// Example 4\n// BAD_TYPEOF_COMPARISON alarm because typeof result is not compared with a string value.\nif (typeof x) { console.log('x is not undefined'); }","examplesRevised":"// Example 1\nif (Array.isArray(x)) { console.log('x is array'); }\n\n// Example 2\nconst zkPort = typeof portValue === 'undefined' ? '2181' : portValue;\n\n// Example 3\nif (typeof x === 'undefined') { console.log('x is undefined'); }\n\n// Example 4\nif (typeof x !== 'undefined') { console.log('x is not undefined'); }","cwe":[],"see":["[typeof operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof)"]},{"key":"BAD_USE_STRICT","name":"Strict mode should be declared properly","description":"This rule applies when strict mode is not properly declared.\n\nIf not properly declared, strict mode is not applied, so debugging and runtime behaviors might be unexpected.\n\nIt can be applied to the following:\n\n 1. 'use strict' directive is not at the beginning of function body or global code.\n 2. Typing mistakes like 'use_strict'","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"function example1() {\n  let x;\n\n  'use strict'; // BAD_USE_STRICT alarm\n\n  x = doSomething();\n  return x;\n}\n\nfunction example2() {\n  'use_strict'; // BAD_USE_STRICT alarm\n}","examplesRevised":"function example1() {\n  'use strict';\n\n  let x;\n\n  x = doSomething();\n  return x;\n}\n\nfunction example2() {\n  'use strict';\n}","cwe":[],"see":["[Strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)"]},{"key":"BAD_WITH_STATEMENT","name":"`with` statement should not be used","description":"This rule applies when `with` statement is used.\n\n`with` statement is not recommended by the following problems:\n 1. `with` statement makes it hard to know that the variable is defined in which the specified object scope or parent scope chain.\n 2. Since `with` statement forces the specified object scope to be searched first, accessing scope of parent object can be slower.\n\n**Note:** In strict mode, using `with` statement throws a `SyntaxError`.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Conventional","tag":[],"examples":"function foo(v, obj) {\n  with (obj) { // BAD_WITH_STATEMENT alarm\n    v = \"ambiguous\"; // It is hard to know whether 'v' is a property of 'obj' or the first argument of function 'foo'.\n    return v;\n  }\n}","examplesRevised":"function foo(v, obj) {\n  obj.v = \"not ambiguous\";\n  v = \"not ambiguous\";\n  return v;\n}","cwe":[],"see":[]},{"key":"CALL_NON_CONSTRUCTOR","name":"Non-constructor function should not be called with the `new` operator as a constructor","description":"This rule applies when a non-constructor function is called with the `new` operator. In such a case, an exception is thrown.\n\nIt can be applied to the following:\n\n 1. Arrow function is called with the `new` operator.\n 2. Async function is called with the `new` operator.\n 3. Generator function is called with the `new` operator.\n 4. `Symbol` function is called with the `new` operator.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["es6"],"examples":"function* foo() {}\nconst a = new foo(); // CALL_NON_CONSTRUCTOR alarm\n\nconst bar = () => {};\nconst b = new bar(); // CALL_NON_CONSTRUCTOR alarm\n\nconst c = new Symbol(); // CALL_NON_CONSTRUCTOR alarm","examplesRevised":"function* foo() {}\nconst a = foo();\n\nfunction bar() {}\nconst b = new bar();\n\nconst c = Symbol();","cwe":[],"see":[]},{"key":"CALL_NON_FUNC","name":"Non-function object should not be called as a function","description":"This rule applies when a non-function object is called like a function. In such a case, an exception is thrown.\n\nIt can be applied to the following:\n\n 1. Non-function object, e.g. plain object or primitive value, is called like a function.\n 2. Non-constructor object is called with `new` operator.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"const f = {};\nf(); // CALL_NON_FUNC alarm","cwe":[],"see":[]},{"key":"CALL_REQUIRE_AS_CONSTRUCTOR","name":"`require()` should not be called as a constructor","description":"This rule applies when `require()` is called as a constructor with `new` operator.\n\nWhen the instance creation code after loading the module is like `new require('module').Module()`, it is evaluated as `(new require('module')).Module()`.\nThis causes an unsuccessful instance creation because the `new` operator does not apply for the constructor of the module.\n\nIn this case, explicit parentheses should be used like `new (require('module').Module)()`.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["nodejs"],"examples":"const moduleInstance = new require('module').Module(); // CALL_REQUIRE_AS_CONSTRUCTOR alarm because 'new' operator is not applied for the constructor 'Module()'.","examplesRevised":"const moduleInstance = new (require('module').Module)();","cwe":[],"see":[]},{"key":"COMPARE_INCOMPATIBLE_TYPE_STRICTLY","name":"Strict equality should not be used for two values with different types","description":"This rule applies when two values with different types are compared with strict equality.\n\nStrict equality is always `false` for different types, so this comparison is not likely to be a programmer's intent.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"const x = 10 / 3;\nconst b = x.toFixed(1) === 3.3; // COMPARE_INCOMPATIBLE_TYPE_STRICTLY alarm because 'toFixed' function returns string type.","examplesRevised":"const x = 10 / 3;\nconst b = x.toFixed(1) === \"3.3\";","cwe":[],"see":[]},{"key":"COMPARE_NAN","name":"Comparing `NaN` directly should be avoided","description":"This rule applies when `NaN` is directly compared.\n\nIn the JavaScript, direct comparison with `NaN` like `x == NaN` is always `false`.\n\nTherefore, use `isNaN` function to determine whether a value is `NaN`.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"if (x == NaN) {\n  x = 0; // COMPARE_NAN alarm\n}","examplesRevised":"if (isNaN(x)) {\n  x = 0;\n}","cwe":[],"see":["[isNaN()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN)"]},{"key":"CONSTANT_CONDITION","name":"Constant expression should not be used in the conditional statements","description":"This rule applies when a condition check has always the same result.\n\nFor example, it occurs when constant-valued variables are used or the condition is redundant with previously checked one. This rule also applies when only one `case` is executed due to the result of `switch` condition check being always the same.\n\nIt could be a debugging code, but at worst it is a programmer's mistake that completely misses block of code intended to be executed.\n\nEspecially, if a redundant condition makes some code unreachable or conflicts with previously checked one, 'Medium' impact is assigned to the alarm because such code is more likely to have problems.\n\n**Note:**\n 1. Not applied if the variable name is `debug` or `dbg`.\n 2. Not applied if the variable is declared with a constant value and never assigned again.\n 3. Not applied for unnecessary optional chaining on always non-null values because it is usually harmless.","severity":["Low","Medium"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["cwe"],"examples":"function example1() {\n  if (y) {\n    x = 42;\n  } else {\n    x = 42;\n  }\n  if (x > 0) { // CONSTANT_CONDITION alarm: Condition 'x > 0' is always satisfied at this point.\n    console.log(x);\n  }\n}\n\nfunction example2() {\n  if (y) {\n    x = 42;\n  } else {\n    x = 42;\n  }\n  switch (x) {\n    case 0: z = 0; break;\n    case 42: z = 1; break; // CONSTANT_CONDITION alarm: This switch case is always matched.\n  }\n}\n\nfunction example3() {\n  if (x) {\n    if (x != null) { // CONSTANT_CONDITION alarm: Condition 'x != null' is always satisfied because it is redundant with the above condition 'x'.\n      console.log(x.p);\n    }\n  }\n}\n\nfunction example4() {\n  if (x < 0) {\n    if (x < 42) { // CONSTANT_CONDITION alarm: Condition 'x < 42' is always satisfied at this point because it is redundant with the above condition 'x < 0'.\n      console.log('x is between 0 and 42');\n    }\n  }\n}\n\nfunction example5(x, y) {\n  const arr = [];\n  if (x) arr.push(x);\n  if (y) arr.push(y);\n  if (arr) { // CONSTANT_CONDITION alarm: Condition 'arr' is always satisfied at this point because it is an array. Did you mean 'arr.length' instead?\n    console.log(arr.join(\", \"));\n  }\n}","examplesRevised":"function example1() {\n  if (y) {\n    x = 42;\n  } else {\n    x = 0;\n  }\n  if (x > 0) {\n    console.log(x);\n  }\n}\n\nfunction example2() {\n  if (y) {\n    x = 42;\n  } else {\n    x = 0;\n  }\n  switch (x) {\n    case 0: z = 0; break;\n    case 42: z = 1; break;\n  }\n}\n\nfunction example3() {\n  if (x) {\n    console.log(x.p);\n  }\n}\n\nfunction example4() {\n  if (x > 0) {\n    if (x < 42) {\n      console.log('x is between 0 and 42');\n    }\n  }\n}\n\nfunction example5(x, y) {\n  const arr = [];\n  if (x) arr.push(x);\n  if (y) arr.push(y);\n  if (arr.length) {\n    console.log(arr.join(\", \"));\n  }\n}","cwe":["489","569","570","571"],"see":["MISRA C:2012, Rule 2.2: There shall be no dead code","MISRA C:2012, Rule 14.3: Controlling expressions shall not be invariant"]},{"key":"DUPLICATE_CASE","name":"`switch` statement should not have duplicate `case` clauses","description":"This rule applies when `switch` statement has duplicate `case` clauses.\n\nLater clause is ignored and it is likely that a programmer copied a clause but forgot to change.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Clear","tag":[],"examples":"switch (x) {\ncase '1':\n  e += 'case';\n  break;\ncase '1': // DUPLICATE_CASE alarm\n  e += 'another case';\n  break;\n}","examplesRevised":"switch (x) {\ncase '1':\n  e += 'case';\n  break;\ncase '2':\n  e += 'another case';\n  break;\n}","cwe":[],"see":["MISRA C:2012, Rule 2.1: A project shall not contain unreachable code"]},{"key":"DUPLICATE_DECL","name":"Functions or variables should not be redeclared","description":"This rule applies when a function or a variable is redeclared in local context.\n\nIn JavaScript, it is possible to redefine the function and only the last one is used. This causes confusion as to where the function is actually defined.\n\nSince functions and variables are hoisted in JavaScript, redeclared variables combined with hoisting and function-scoped `var` statement cause confusion as to where the variable is defined.\n\n```\nfunction foo() {\n  var code = 1;\n  if (true) {\n    var code = 2;\n  }\n  console.log(code); // code has a value of 2 because 'var' is not block-scoped\n}\n```\n\n**Note:**\n 1. This rule applies only for the variable whose name is length of 3 characters or above. It is because short variable name, e.g. `i`, is frequently used as loop counters.\n 2. Not applied at test case code because duplicate declarations are usually harmless at tests and tend to occur more. Currently, BDD, TDD and QUnit style test cases are recognized.","severity":["Low","Medium"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":[],"examples":"function a() { return 1; } // DUPLICATE_DECL alarm. This function declaration is ignored.\nfunction a(b) { return b; }\n\nvar foo;\nvar foo; // DUPLICATE_DECL alarm","examplesRevised":"// Choose the function which you intend to apply. And delete others.\nfunction a(b) { return b; }\n\n// Delete duplicated one\nvar foo;","cwe":[],"see":[]},{"key":"DUPLICATE_PARAM","name":"Function should not have duplicate parameter names","description":"This rule applies when the function has duplicate parameter names.\n\nIf a function has duplicate parameter names, the later parameters shadow the earlier ones and the values passed at the earlier positions become inaccessible.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Clear","tag":[""],"examples":"function foo(a, a) { // DUPLICATE_PARAM alarm\n  return a + b;\n}","examplesRevised":"function foo(a, b) {\n  return a + b;\n}","cwe":[],"see":["[Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function)"]},{"key":"DUPLICATE_PARENS","name":"Parentheses should not be used for an already parenthesized expression","description":"This rule applies when duplicate parentheses are used for an already parenthesized expression.\n\nThose parentheses are redundant because the execution result is always the same without them. Also when the expression is complex, it can be hard to notice that the entire inner expression is just another parentheses.\n\nTherefore, it is recommended to remove the duplicate parentheses for code readability and maintainability.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":[""],"examples":"function foo(a, b, c, d) {\n  return ((a * b)) / ((c * d)); // DUPLICATE_PARENS alarm\n}","examplesRevised":"function foo(a, b, c, d) {\n  return (a * b) / (c * d);\n}","cwe":[],"see":["[Grouping operator ()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping)"]},{"key":"DUPLICATE_PROPERTY","name":"Property should not be redeclared in object literals or classes","description":"This rule applies when an object literal or a class has multiple properties with the same name.\n\nBecause only the last property is used, a programmer needs to check whether expected value is set.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Clear","tag":[],"examples":"// Example 1\nconst obj = {\n  a: 42,\n  get a() { // DUPLICATE_PROPERTY alarm\n    return 43;\n  }\n};\n\n// Example 2\nconst grid = {\n  rowNum: $('#pageSize').val(),\n  rowNum: 15 // DUPLICATE_PROPERTY alarm\n}\n\n// Example 3\nconst x = \"getValue\";\nclass A {\n  getValue() {}\n  [x]() {}  // DUPLICATE_PROPERTY alarm\n}","examplesRevised":"// Example 1\nconst obj = {\n  a: 43\n};\n\n// Example 2\nconst grid = {\n  rowNum: $('#pageSize').val()\n}\n\n// Example 3\nconst x = \"getOther\";\nclass A {\n  getValue() {}\n  [x]() {}\n}","cwe":[],"see":[]},{"key":"DUPLICATES_IN_CHARACTER_CLASS","name":"Character classes in a regular expression should not have duplicate characters","description":"This rule applies when a character class in a regular expression has duplicate characters.\n\nA character class, also called character set, is specified using square brackets `[]`. It matches exactly one character among the characters appearing inside the square brackets.\n\nIt is recommended to remove duplicate characters in a character class because the same set of characters is specified without the duplicates.\nMoreover, the duplicates may be caused by a programmer's misunderstanding of characters like `|`, `,`, `(` and `)`, which have no special meaning inside a character class.\n\nIf you intended an exact match of duplicate characters, you need to use capturing parentheses `()`.","severity":["Low","Medium"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":[],"examples":"function isOdd(str) {\n  return /^\\d*[1|3|5|7|9]$/.test(str); // DUPLICATES_IN_CHARACTER_CLASS alarm because '|' appears multiple times.\n}\n\nfunction endsWithDeepOrScan(word) {\n  return /[deep|scan]$/i.test(word) // DUPLICATES_IN_CHARACTER_CLASS alarm because 'e' appears multiple times.\n}","examplesRevised":"function isOdd(str) {\n  return /^\\d*[13579]$/.test(str);\n}\n\nfunction endsWithDeepOrScan(word) {\n  return /(deep|scan)$/i.test(word)\n}","cwe":[],"see":["[Character class](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class)"]},{"key":"EMPTY_BLOCK","name":"Empty block statements should not be used in conditional statements","description":"This rule applies when block statement of conditional statements is empty.\n\nFor code readability and maintainability, empty block statement in `if`, `else`, and `else if` is not recommended.\n\nIt is recommended to remove empty blocks or add comments (e.g. TODO et al.) for understanding the code.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":[],"examples":"// EMPTY_BLOCK alarm because empty block is used as if branch.\n\nif (foo) {\n}","examplesRevised":"// Remove alarm by adding TODO comment.\n\nif (foo) {\n  // TODO: Not implemented yet\n}","cwe":[],"see":[]},{"key":"FORIN_ARRAY","name":"`for-in` loop should not be used on arrays","description":"This rule applies when `for-in` loop is used on arrays.\n\n`for-in` loop is not recommended on arrays for the following reasons:\n\n * `for-in` loop is slower than `for` loop.\n * `for-in` loop variable holds array indexes. But programmers tend to consider it as having array elements.\n\nFor better performance, it is recommended to use `for` loops on arrays. Or if performance is not critical and the array indexes are not needed, you can consider using `for-of` loop whose loop variable holds the array elements.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Conventional","tag":[],"examples":"const array = ['foo', 'bar'];\n\n// FORIN_ARRAY alarm\nfor (const item in array) {\n  console.log('item: ' + item); // Result: 'item: 0', 'item: 1' (not as expected 'item: foo', 'item: bar')\n}","examplesRevised":"const array = ['foo', 'bar'];\n\nfor (const item of array) {\n  console.log(`item: ${item}`);\n}","cwe":[],"see":["[for...in statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for%2e%2e%2ein)","[for...of statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for%2e%2e%2eof)"]},{"key":"FUTILE_REGEXP_TEST","name":"`RegExp.prototype.test()` should not be used on always matching regular expressions","description":"This rule applies when the `RegExp.prototype.test()` result is always true because an always matching regular expression is used.\n\nIf a regular expression matches an empty string and is not anchored at both start and end, it matches an arbitrary input string as follows:\n\n * If the regular expression has an end anchor, the match succeeds with an empty substring at the end of the input when the preceding content is not matched.\n * Otherwise, the match succeeds with an empty substring at the start of the input when the remaining content is not matched.\n\nIn general, a regular expression matches an empty string in the following cases:\n\n 1. The whole pattern consists of quantifiers allowing 0 repetition (e.g. `/a*b?/`).\n 2. An empty alternative exists (e.g. `/a||b/`).","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"// Example 1\nfunction isNumberSequence(str) {\n  return /\\d*(,\\d*)*/.test(str); // FUTILE_REGEXP_TEST alarm because the whole pattern consists of quantifiers allowing 0 repetition.\n}\n\n// Example 2\nfunction isFooOrBar(str) {\n  return /foo||bar/.test(str); // FUTILE_REGEXP_TEST alarm because an empty alternative exists.\n}\n\n// Example 3\nfunction isNumberOrNone(str) {\n  return /^\\d*|none$/.test(str); // FUTILE_REGEXP_TEST alarm because '^' and '$' have higher precedence than '|'.\n}","examplesRevised":"// Example 1\nfunction isNumberSequence(str) {\n  return /\\d+(,\\d*)*/.test(str);\n}\n\n// Example 2\nfunction isFooOrBar(str) {\n  return /foo|bar/.test(str);\n}\n\n// Example 3\nfunction isNumberOrNone(str) {\n  return /^(\\d*|none)$/.test(str);\n}","cwe":[],"see":["[RegExp.prototype.test()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test)"]},{"key":"FUTILE_STRING_REPLACE","name":"The search and the replace strings of `String.prototype.replace()` should not be the same","description":"This rule applies when the search and the replace strings of `String.prototype.replace()` are the same.\n\nWhen the two strings are the same, the replace result will be always the same as the input string. This may happen when characters like `\\` are not properly escaped in the search or the replace string.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"foo = foo.replace(/\"/g, '\\\"'); // FUTILE_STRING_REPLACE alarm because '\\' is not properly escaped.","examplesRevised":"foo = foo.replace(/\"/g, '\\\\\"');","cwe":[],"see":["[String.prototype.replace()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)"]},{"key":"GETTER_SETTER_RECURSION","name":"Getter or setter functions should avoid an infinite call by accessing themselves","description":"This rule applies when getter or setter functions cause an infinite call by accessing themselves.\n\nWhen a getter or setter function accesses itself (recursion), an exception by an infinite call is thrown.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"let obj = {\n  set name(n) {\n    this.name = n; // GETTER_SETTER_RECURSION alarm because 'obj.name = \"John\"' causes an infinite call.\n  },\n  get name() {\n    return this.name; // GETTER_SETTER_RECURSION alarm\n  }\n}\nobj.name = \"John\";","examplesRevised":"let obj = {\n  set name(n) {\n    this._name = n;\n  },\n  get name() {\n    return this._name;\n  }\n}\nobj.name = \"John\";","cwe":[],"see":["[getter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get)","[setter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set)","Uncaught RangeError: Maximum call stack size exceeded"]},{"key":"IDENTICAL_BRANCHES","name":"Branches in the conditional statements should not have the same implementation","description":"This rule applies when branches in the conditional statements or expressions have the same implementation.\n\nThis might imply the condition is unnecessary, but at worst this is a programmer's mistake. For example, a programmer copies code from a branch into another and he often forgets to modify it.\n\nTherefore, a programmer needs to check the same code is really needed for both.\n\n**Note:** Not applied for `case` clauses in `switch` statement because it is likely to be a programmer's intent.","severity":["Medium"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["cwe"],"examples":"function example1() {\n  if (x >= 0) { // IDENTICAL_BRANCHES alarm\n    y = x;\n  } else {\n    y = x;\n  }\n}\n\nfunction example2() {\n  y = x >= 0 ? x : x; // IDENTICAL_BRANCHES alarm\n}","examplesRevised":"function example1() {\n  // In case when it's a copy-paste mistake\n  if (x >= 0) {\n    y = x;\n  } else {\n    // Do another thing\n  }\n}\n\nfunction example2() {\n  // In case when two branches have actually the same implementation\n  y = x;\n}","cwe":["398"],"see":[]},{"key":"INCOMPLETE_STRING_ESCAPE","name":"All occurrences should be replaced when escaping a special character","description":"This rule applies when only the first occurrence of a special character is escaped.\n\nWhen using a string value as HTML or SQL content, special characters like `'`, `\"`, `<`, `>` and `\\` often need to be escaped.\n\nThe escaping can be accomplished using `String.prototype.replace()`. However, some caution is needed because only the first occurrence is replaced in the following cases:\n\n 1. The search value is specified with a string.\n 2. The search value is specified with a regular expression, but the global flag (`g`) is missing.\n\nIf not all occurrences of a special character are escaped properly, the code may become vulnerable to injection attacks.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Complete","tag":[],"examples":"// Example 1\nfoo1 = foo1.replace('\"', '\\\\\"'); // INCOMPLETE_STRING_ESCAPE alarm because a string search value is used.\n\n// Example 2\nfoo2 = foo2.replace(/</, '&lt;'); // INCOMPLETE_STRING_ESCAPE alarm because the 'g' flag is missing.","examplesRevised":"// Example 1\nfoo1 = foo1.replace(/\"/g, '\\\\\"');\n\n// Example 2\nfoo2 = foo2.replace(/</g, '&lt;');","cwe":[],"see":["[String.prototype.replace()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)"]},{"key":"INHERIT_NON_CONSTRUCTOR","name":"Class should inherit from a constructor","description":"This rule applies when a class inherits from a non-constructor.\n\nWhen a class inherits from non-constructor values like the following, a `TypeError` exception occurs:\n\n 1. Arrow function\n 2. Async function\n 3. Generator function\n 4. Non-function values except `null`","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["es6"],"examples":"let Foo = () => { };\nclass Bar extends Foo { } // INHERIT_NON_CONSTRUCTOR alarm because an arrow function is not a constructor.","examplesRevised":"let Foo = function () { };\nclass Bar extends Foo { }","cwe":[],"see":["[extends keyword](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends)"]},{"key":"INSUFFICIENT_NULL_CHECK","name":"`null` or `undefined` check should be consistent for all accesses of a variable","description":"This rule applies when a variable is checked for `null` (or `undefined`) value at one point but is accessed without `null` check at another point.\n\nIf the variable has indeed `null` value, a `TypeError` exception occurs when trying to access its property or call it as a function.\n\nTherefore, a programmer needs to check the following:\n\n * Access a variable consistently after checking it is not `null`.\n * Remove all `null` checks of a variable consistently if it cannot be `null`.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Complete","tag":[],"examples":"function example1(x) {\n  x.p = 42;\n  if (x != null) { // INSUFFICIENT_NULL_CHECK alarm\n    doSomething(x);\n  }\n}\n\nfunction example2(x) {\n  if (x != null) { // INSUFFICIENT_NULL_CHECK alarm\n    doSomething(x);\n  }\n  y = x.p;\n}\n\nfunction example3(cb) {\n  cb();\n  if (cb != null) { // INSUFFICIENT_NULL_CHECK alarm\n    doSomething(cb);\n  }\n}","examplesRevised":"function example1(x) {\n  if (x != null) {\n    x.p = 42;\n    doSomething(x);\n  }\n}\n\nfunction example2(x) {\n  if (x != null) {\n    doSomething(x);\n  }\n  y = x != null ? x.p : '';\n}\n\nfunction example3(cb) {\n  // If 'cb' must not be null\n  cb();\n  doSomething(cb);\n}","cwe":[],"see":[]},{"key":"INVALID_PRIVATE_FIELD_ACCESS","name":"Read or write-only private fields should be accessed properly","description":"This rule applies when read or write-only private fields of a class are not accessed properly.\n\n`TypeError` exceptions are thrown in the following improper access cases:\n\n 1. A value is assigned to a private field declared as a getter without a corresponding setter.\n 2. A value is read from a private field declared as a setter without a corresponding getter.\n 3. A private method is updated to another value. Unlike public methods, private methods are not writable. You should use a private field with a function expression instead in this case.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["es13"],"examples":"class Example {\n  #firstName;\n  #lastName;\n\n  get #fullName() {\n    return `${this.#firstName} ${this.#lastName}`;\n  }\n  set #name(x) {\n    const nameParts = x.split(/\\s+/);\n    this.#firstName = nameParts[0] || '';\n    this.#lastName = nameParts[1] || '';\n  }\n  #isValidName() {\n    return this.#firstName !== '' && this.#lastName !== '';\n  }\n\n  constructor(fullName) {\n    this.#fullName = fullName || ''; // INVALID_PRIVATE_FIELD_ACCESS alarm because only getter is defined for '#fullName'.\n    if (!this.#isValidName()) {\n      console.log(`${this.#name} is invalid!`); // INVALID_PRIVATE_FIELD_ACCESS alarm because only setter is defined for '#name'.\n    }\n    this.#isValidName = this.#isValidName.bind(this); // INVALID_PRIVATE_FIELD_ACCESS alarm because private method is read-only.\n  }\n}","examplesRevised":"class Example {\n  #firstName;\n  #lastName;\n\n  get #fullName() {\n    return `${this.#firstName} ${this.#lastName}`;\n  }\n  set #fullName(x) {\n    const nameParts = x.split(/\\s+/);\n    this.#firstName = nameParts[0] || '';\n    this.#lastName = nameParts[1] || '';\n  }\n  #isValidName = () => this.#firstName !== '' && this.#lastName !== '';\n\n  constructor(fullName) {\n    this.#fullName = fullName || '';\n    if (!this.#isValidName()) {\n      console.log(`${this.#fullName} is invalid!`);\n    }\n  }\n}","cwe":[],"see":["[Private elements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_elements)","Uncaught TypeError: '#fullName' was defined without a setter","Uncaught TypeError: '#name' was defined without a getter","Uncaught TypeError: Private method '#isValidName' is not writable"]},{"key":"ITERATE_NON_ITERABLE","name":"Non-iterable values should not be iterated","description":"This rule applies when a non-iterable value is used at syntaxes requiring iterables. In such a case, a `TypeError` exception is thrown.\n\nIterable values are required at the following syntaxes:\n\n 1. `for-of` loop\n 2. `for-await-of` loop (async iterable objects can also be used)\n 3. `yield*` (inside async generator functions, async iterable objects can also be used)\n 4. Array pattern\n 5. Array spread\n 6. Argument spread\n\nIn JavaScript, the following values are iterable:\n\n 1. Array, TypedArray\n 2. Map, WeakMap\n 3. Set, WeakSet\n 4. String (each character in the string is iterated)\n 5. Generator objects returned by generator functions\n 6. Any objects implementing the `Symbol.iterator` property","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["es6"],"examples":"function example1(x, a, b) {\n  let others = {a, b};\n  return [x, ...others]; // ITERATE_NON_ITERABLE alarm because 'others' is a plain object.\n}\n\nasync function example2() {\n  async function* generate(n) {\n    for (let i = 0; i < n; i++) {\n      let x = await getSomething(i);\n      yield x;\n    }\n  }\n  for (let x of generate(10)) { // ITERATE_NON_ITERABLE alarm because async generator functions return async iterable objects.\n    doSomething(await x);\n  }\n}","examplesRevised":"function example1(x, a, b) {\n  let others = [a, b];\n  return [x, ...others];\n}\n\nasync function example2() {\n  async function* generate(n) {\n    for (let i = 0; i < n; i++) {\n      let x = await getSomething(i);\n      yield x;\n    }\n  }\n  for await (let x of generate(10)) {\n    doSomething(x);\n  }\n}","cwe":[],"see":["[Iteration protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)"]},{"key":"JSX_BAD_COMMENT","name":"The content of a JSX text node should not be in the form of JavaScript comment","description":"This rule detects JSX text node whose content is in the form of JavaScript comment.\n\nIf you intended a JavaScript comment in JSX, you need to enclose the comment with braces to prevent it from showing in browsers.\n\nIf you really intended a text, it is better to enclose the text with quotes and braces to make it explicit that it is not a comment.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"function Hello() {\n  return (\n    <div>\n      /* This is a comment */ {/* JSX_BAD_COMMENT alarm because this text is recognized as a JSX child instead of a comment. */}\n      <div>// is a double slash.</div> {/* JSX_BAD_COMMENT alarm because this text in div element is recognized as a JSX child instead of a comment. */}\n    </div>\n  );\n}","examplesRevised":"function Hello() {\n  return (\n    <div>\n      {/* This is a comment */}\n      <div>{\"// is a double slash.\"}</div>\n    </div>\n  );\n}","cwe":[],"see":[]},{"key":"LENGTH_PROPERTY_TYPO","name":"The `length` property should not be misspelled as `lenght`","description":"This rule applies when the `length` property is misspelled as `lenght`.\n\n`lenght` is a common typo of `length`. Accessing the non-existent `lenght` property results in `undefined` value.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"function isNonEmptyArray(x) {\n  return Array.isArray(x) && x.lenght !== 0; // LENGTH_PROPERTY_TYPO alarm because 'lenght' is a typo.\n}","examplesRevised":"function isNonEmptyArray(x) {\n  return Array.isArray(x) && x.length !== 0;\n}","cwe":[],"see":[]},{"key":"MISMATCHED_COUNT_OF_ARGS","name":"Built-in API should be called with the correct number of arguments","description":"This rule applies when built-in API is called with the wrong number of arguments.\n\nBecause built-in has the specification for its arguments, arguments are useless or cause undefined behavior if the number of arguments does not match.","severity":["Low","Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["cwe"],"examples":"const y = Math.atan2(a/b); // MISMATCHED_COUNT_OF_ARGS alarm","examplesRevised":"const y = Math.atan2(a, b);","cwe":["628","685"],"see":[]},{"key":"MISMATCHED_TYPE_OF_ARG","name":"Built-in API should be called with arguments of correct types","description":"This rule applies when built-in API is called with arguments of wrong types.\n\nBecause built-in has the specification for its arguments, arguments can cause error or unintended behavior if the types of arguments are wrong.","severity":["Medium","High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["cwe"],"examples":"const arr = Array.from(items);\nconst pos_of_three = arr.findIndex(3); // MISMATCHED_TYPE_OF_ARG alarm because 'Array.prototype.findIndex()' takes a function as an argument.","examplesRevised":"const arr = Array.from(items);\nconst pos_of_three = arr.findIndex(item => item === 3);","cwe":["628"],"see":[]},{"key":"MISMATCHED_TYPE_OF_DEFAULT_VALUE","name":"Default values should be of expected types","description":"This rule applies when a default value is not of the expected type and fails to provide methods of the expected type.\n\nWhen a non-existent method is called as a result of mismatched default values, a `TypeError` exception occurs. This includes the case that a non-iterable object like an empty object literal is used where an iterable object is required such as `for-of` loop.\n\nCurrently, this rule applies to the case where the expected type is an array and the wrong default value is an empty object literal, string, boolean, or number.\n\n**Note:** This rule may report false alarms if the `Object.prototype` is extended with methods having the same name as array methods. We recommend disabling this rule in such cases.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"function example(arr) {\n  arr = arr || {}; // MISMATCHED_TYPE_OF_DEFAULT_VALUE alarm because 'arr' is an array expectedly.\n  arr.forEach(foo);\n}","examplesRevised":"function example(arr) {\n  arr = arr || [];\n  arr.forEach(foo);\n}","cwe":[],"see":[]},{"key":"MISPLACED_ALTERNATIVE_IN_REGEXP","name":"Regular expression alternatives that are prefixes should be placed in proper order","description":"This rule applies when an alternative that is a prefix of another alternative is placed incorrectly in a regular expression.\n\nRegular expression alternatives are tried sequentially from the left to the right. If the whole match succeeds with an alternative, later alternatives are not tried even when they can match further in the input string.\n\nSo, when a regular expression ends with alternatives or the remaining patterns after alternatives are all optional, an alternative that is a prefix should be placed after the longer one that contains the prefix. Otherwise, the longer one will never be selected.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"// Example 1\nlet lines = text.split(/\\r|\\r\\n|\\n/); // MISPLACED_ALTERNATIVE_IN_REGEXP alarm because '\\r' is a prefix of '\\r\\n'.\n\n// Example 2\nlet normalized = text.replace(/inf|infinity/g, 'Infinity'); // MISPLACED_ALTERNATIVE_IN_REGEXP alarm because 'inf' is a prefix of 'infinity'.","examplesRevised":"// Example 1\nlet lines = text.split(/\\r\\n|\\r|\\n/);\n\n// Example 2\nlet normalized = text.replace(/infinity|inf/g, 'Infinity');","cwe":[],"see":["[Disjunction](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction)"]},{"key":"MISPLACED_ANCHOR_IN_REGEXP","name":"`^` and `$` anchors should be placed properly in a regular expression","description":"This rule applies when `^` and `$` anchors are not placed properly in a regular expression.\n\n`^` and `$` are special anchor characters that match the beginning and the end of input.\n\nIf `^` appears after matching some input characters, it will always fail to match. Similarly, nothing will be matched after the `$` anchor.\n\nOften this alarm occurs when the intention is matching the `^` or `$` character itself. In that case, `\\^` or `\\$` should be used instead.\n\n**Note:** Not applied when only one character exists around the `^` or `$` because it is often used to intentionally construct an unmatchable pattern like `/x^/` or `/$x/`.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"// Example 1\nconst re1 = /(foo|bar)^/; // MISPLACED_ANCHOR_IN_REGEXP alarm because '^' is used instead of '$'.\n\n// Example 2\nconst re2 = /$(foo|bar)/; // MISPLACED_ANCHOR_IN_REGEXP alarm '$' is not properly escaped.","examplesRevised":"// Example 1\nconst re1 = /(foo|bar)$/;\n\n// Example 2\nconst re2 = /\\$(foo|bar)/;","cwe":[],"see":["[Input boundary assertion](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Input_boundary_assertion)"]},{"key":"MISPLACED_COMPARISON_AT_INDEX_OF","name":"Comparison expressions should not be placed as `indexOf()` argument itself","description":"This rule applies when a comparison expression is incorrectly placed as an `indexOf()` argument itself.\n\nFor example, `str.indexOf('x' > -1)` searches the occurrence of the `'false'` string, which is unlikely to be intended. This may happen as a result of placing the closing parenthesis in wrong position. The correct code should be `str.indexOf('x') > -1`.\n\nThis rule also applies to the analogous `lastIndexOf()` comparsion.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"if (str.indexOf(foo > -1)) { // MISPLACED_COMPARISON_AT_INDEX_OF alarm\n  doSomething(str);\n}","examplesRevised":"if (str.indexOf(foo) > -1) {\n  doSomething(str);\n}","cwe":[],"see":["[Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)","[String.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf)"]},{"key":"MISSING_AWAIT","name":"`await` operator should be used at async function call when the resolved value is needed","description":"This rule applies when the `await` operator appears to be missing at an async function call.\n\nThe return value of an async function is always a `Promise` object, and the resolved value can be obtained by using `await` operator.\n\nIf the return value of an async function is used in a context inappropriate for a `Promise` object, it is likely that the resolved value is intended, but the `await` operator is mistakenly omitted.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["es8"],"examples":"async function fetch(url) {\n  return doFetch(url);\n}\nasync function getInfo() {\n  const result = fetch('/info'); // MISSING_AWAIT alarm\n  if (result.status === 200) {\n    return result.text();\n  }\n  throw new Error('Bad response');\n}","examplesRevised":"async function fetch(url) {\n  return doFetch(url);\n}\nasync function getInfo() {\n  const result = await fetch('/info');\n  if (result.status === 200) {\n    return result.text();\n  }\n  throw new Error('Bad response');\n}","cwe":[],"see":["[async function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)","[await operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await)"]},{"key":"MISSING_COMMA","name":"Comma should not be missing between function arguments or array elements","description":"This rule applies when comma (,) seems to be missing between function arguments or array elements.\n\nFor example, in code `f(x. y)`, it is likely that comma was intended instead of dot (.).\n\nIf it is programmer's intention, removing the unnecessary space is recommended for readability and maintainability.","severity":["Medium"],"type":"Code Quality","cleanCodeAttribute":"Formatted","tag":[],"examples":"reject('Create badge failed: '. err); // MISSING_COMMA alarm","examplesRevised":"reject('Create badge failed: ', err);","cwe":[],"see":[]},{"key":"MISSING_ELSE_KEYWORD","name":"`else` keyword should be used properly in `if...else` sequence","description":"This rule applies when `else` keyword appears to be missing in front of `if` statement.\n\nWhen `if` keyword appears immediately after the closing brace (}) of previous `if` statement and there is no line break, it is highly probable that `else` keyword is unintentionally missing.\n\nIf `else` keyword is indeed not needed, it is recommended to put the line break for code readability.\n\n**Note:** Not applied when all branch bodies of the previous `if` statement end with `return` or `throw`.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Formatted","tag":[],"examples":"if (cond1) {\n  temp = a;\n} if (cond2) { // MISSING_ELSE_KEYWORD alarm\n  return b;\n} else {\n  temp = c;\n}","examplesRevised":"// Insert 'else' keyword if you intended 'else if'\nif (cond1) {\n  temp = a;\n} else if (cond2) {\n  return b;\n} else {\n  temp = c;\n}\n\n// Insert line break for readability if 'else if' was not intended\nif (cond1) {\n  temp = a;\n}\nif (cond2) {\n  return b;\n} else {\n  temp = c;\n}","cwe":[],"see":["[if...else statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if%2e%2e%2eelse)"]},{"key":"MISSING_LENGTH_IN_LOOP_CONDITION","name":"`length` property should not be omitted for the array in a loop condition","description":"This rule applies when the `length` property is missing in the loop condition expression.\n\nWhen an index variable is used to iterate through array elements, it is necessary to compare it with the `length` property of the array in the loop condition.\n\nIf the `length` property is omitted by mistake, the array itself is compared and the loop will not be executed at all.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"for (let i = 0; i < array; i++) { // MISSING_LENGTH_IN_LOOP_CONDITION alarm\n  array[i] = i;\n}","examplesRevised":"for (let i = 0; i < array.length; i++) {\n  array[i] = i;\n}","cwe":[],"see":["[Array: length](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length)"]},{"key":"MISSING_RETURN_VALUE","name":"Return value of function without any `return` statement should not be used","description":"This rule applies when return value is used even though the function has no `return` statement.\n\nIn such a case, it could be a programmer's mistake forgetting a `return` statement.\n\n**Note:** This rule applies only when the return value is assigned to an object property because in other cases, it is often intended or harmless.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"function add(x, y) {\n  x + y;\n}\nobj.total = add(1, 2); // MISSING_RETURN_VALUE alarm because function 'add' does not return a value.","examplesRevised":"function add(x, y) {\n  return x + y;\n}\nobj.total = add(1, 2);","cwe":[],"see":[]},{"key":"MISSING_SUPER_CALL","name":"Constructor of inherited class should call `super`","description":"This rule applies when constructor of inherited class does not have `super` call.\n\nWhen instantiating the class of such a case, a `ReferenceError` exception is thrown.\n\n**Note:** This case could not be a problem if a certain transpiler is used, but it can be good to fix the problem for using native class without the transpiler.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["es6"],"examples":"class A {}\nclass B extends A {\n  constructor() { // MISSING_SUPER_CALL alarm\n    this.prop = 42;\n  }\n}\nconst obj = new B();","examplesRevised":"class A {}\nclass B extends A {\n  constructor() {\n    super();\n    this.prop = 42;\n  }\n}\nconst obj = new B();","cwe":[],"see":[]},{"key":"MISSING_THROW","name":"`throw` statement should be used to actually throw an exception","description":"This rule applies when an exception instance is created but is not either referenced or thrown at all.\n\nIn such a case, it is highly probable that `throw` is unintentionally missing.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"if (x === null) {\n  new Error(\"x should not be null\"); // MISSING_THROW alarm\n}","examplesRevised":"if (x === null) {\n  throw new Error(\"x should not be null\");\n}","cwe":[],"see":[]},{"key":"MISUSED_EXPORTS_VAR","name":"Assignments to `exports` variable and its properties should be properly exported","description":"This rule applies when an assignment to `exports` variable or its property is not properly exported.\n\nA CommonJS module exports the property value of `module.exports`, not the value of `exports` variable.\n\nAlthough `module.exports` and `exports` initially have the same object, programmers may assign a new object to `module.exports` or `exports`. Caution is needed to avoid the following cases:\n\n1. When the `exports` variable is assigned an object different from the final `module.exports`, all the properties of the assigned object are lost and not exported.\n2. When only `module.exports` is replaced, all properties assigned to the `exports` variable are lost and not exported.\n\nIt is recommended to use `module.exports` only or make `module.exports` and `exports` always have the same value.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["nodejs"],"examples":"// Example 1\nexports = { // MISUSED_EXPORTS_VAR alarm\n  add: function (a, b) { return a + b; }\n};\n\n// Example 2\nmodule.exports = {\n  add: function (a, b) { return a + b; }\n};\nexports.mult = function (a, b) { return a * b; }; // MISUSED_EXPORTS_VAR alarm","examplesRevised":"// Example 1\nmodule.exports = {\n  add: function (a, b) { return a + b; }\n};\n\n// Example 2\nmodule.exports = {\n  add: function (a, b) { return a + b; }\n};\nmodule.exports.mult = function (a, b) { return a * b; };","cwe":[],"see":[]},{"key":"MISUSED_ITERATOR","name":"Iterator objects should not be misused as arrays","description":"This rule applies when an iterator object is misused as an array.\n\nAn iterator object provides the `next` method that returns each element on successive calls. Built-in iterator objects are created in the following places:\n\n 1. The return values of generator and async generator functions\n 2. The return values of built-in functions such as `String.prototype.matchAll()` and `Map.prototype.keys()`\n 3. The return values of iterator helpers such as `Iterator.prototype.map()`\n\nThis rule detects the following misuses of built-in iterator objects:\n\n 1. Iterating with `for-in` loop: In this case, the loop ends immediately because the built-in iterator objects have no enumerable properties. You should use `for-of` or `for-await-of` (for async generator) loop instead.\n 2. Calling non-existent array methods: If you call array methods not defined on iterator objects, a `TypeError` exception is thrown. You should convert the iterator to an array using `Array.from()` or array spread operator.\n 3. Accessing the `length` property: In this case, an `undefined` value is read because iterators do not have the `length` property.","severity":["Medium","High"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"// Example 1\nfunction *countDown() {\n  yield 3;\n  yield 2;\n  yield 1;\n  yield 0;\n}\nfor (let n in countDown()) { // MISUSED_ITERATOR alarm\n  console.log(n);\n}\n\n// Example 2\nconst scores = \"ID[1]: 90, 80, 100\".matchAll(/\\d+/g);\nscores.shift(); // MISUSED_ITERATOR alarm\n\n// Example 3\nconst uppers = \"Foo Bar Baz\".matchAll(/[A-Z]/g);\nfor (let i = 0; i < uppers.length; i++) { // MISUSED_ITERATOR alarm\n  doSomething(i, uppers.next().value);\n}","examplesRevised":"// Example 1\nfunction *countDown() {\n  yield 3;\n  yield 2;\n  yield 1;\n  yield 0;\n}\nfor (let n of countDown()) {\n  console.log(n);\n}\n\n// Example 2\nconst numberMatches = \"ID[1]: 90, 80, 100\".matchAll(/\\d+/g);\nconst scores = [...numberMatches];\nscores.shift();\n\n// Example 3\nconst uppers = \"Foo Bar Baz\".matchAll(/[A-Z]/g);\nlet i = 0;\nfor (let letter of uppers) {\n  doSomething(i++, letter);\n}","cwe":[],"see":["[Iterators and generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)","[Spread in array literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_in_array_literals)","[for...of statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for%2e%2e%2eof)","[for await...of statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await%2e%2e%2eof)","[Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from)","[String.prototype.matchAll()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll)"]},{"key":"MULTIPLE_RESOLVE_IN_PROMISE_EXECUTOR","name":"The `resolve` and `reject` function should not be called multiple times in a `Promise` executor","description":"This rule applies when the `resolve` or `reject` function of a `Promise` executor is called multiple times.\n\nOnce the `resolve` or `reject` is called, the state of the `Promise` can no longer be changed. If it is called multiple times, the later ones will have no effect.\n\nEven when no immediate problem occurs, it is recommended to check the code logic and remove unintended ones among the multiple calls.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["es6"],"examples":"// Example 1\nlet promise1 = new Promise((resolve, reject) => {\n  fs.readFile('foo', (err, data) => {\n    resolve(data);\n    if (err) {\n      reject(err); // MULTIPLE_RESOLVE_IN_PROMISE_EXECUTOR alarm because 'resolve' has already been called.\n    }\n  });\n});\n\n// Example 2\nlet promise2 = new Promise((resolve, reject) => {\n  fs.readFile('bar', (err, data) => {\n    if (err) {\n      console.log(err);\n      resolve('');\n      reject(err); // MULTIPLE_RESOLVE_IN_PROMISE_EXECUTOR alarm because 'resolve' has already been called.\n    } else {\n      resolve(data);\n    }\n  });\n});","examplesRevised":"// Example 1\nlet promise1 = new Promise((resolve, reject) => {\n  fs.readFile('foo', (err, data) => {\n    if (err) {\n      reject(err);\n      return;\n    }\n    resolve(data);\n  });\n});\n\n// Example 2\nlet promise2 = new Promise((resolve, reject) => {\n  fs.readFile('bar', (err, data) => {\n    if (err) {\n      console.log(err);\n      resolve('');\n    } else {\n      resolve(data);\n    }\n  });\n});","cwe":[],"see":["[Promise() constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise)"]},{"key":"MULTIPLE_SUPER_CALL","name":"`super()` should be called only once in the constructor","description":"This rule applies when `super()` is called multiple times in the constructor.\n\nMultiple `super()` calls throw a `ReferenceError` exception.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["es6"],"examples":"class A {}\nclass B extends A {\n  constructor(props) {\n    super(props);\n    props.forEach(p => test(p));\n    super(props); // MULTIPLE_SUPER_CALL alarm\n  }\n}\nconst obj = new B(props);","examplesRevised":"class A {}\nclass B extends A {\n  constructor(props) {\n    super(props);\n    props.forEach(p => test(p));\n  }\n}\nconst obj = new B(props);","cwe":[],"see":["[super keyword](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super)"]},{"key":"NO_EFFECT_CALL","name":"Result of built-in API call should not be ignored when it has no side effect","description":"This rule applies when the result of built-in API call, which has no side effects, is not used.\n\nFor example, calling `substring` API on the string has no side effect on itself. So it is useless if the result is not used.\n\nThis is likely to be a programmer's misunderstanding. Therefore, the result should not be ignored or the code should be removed.\n\nThis rule also applies to common Lodash APIs without side effects like `omit()`.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Clear","tag":["cwe"],"examples":"const s = 'foobar';\ns.substring(0, 3); // NO_EFFECT_CALL alarm because the return value of 'substring' is not used.","examplesRevised":"const s = 'foobar';\nconst ret = s.substring(0, 3);","cwe":["398"],"see":[]},{"key":"NON_REFERENCE_LHS","name":"Value should not be assigned to LHS which is not a reference","description":"This rule applies when value is assigned to the left-hand side (or LHS) which is not a reference.\n\nIn this case, a `ReferenceError` exception is thrown.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"if (f() = 42) { // NON_REFERENCE_LHS alarm\n  doSomething();\n}","examplesRevised":"if (f() === 42) {\n  doSomething();\n}","cwe":[],"see":[]},{"key":"NULL_POINTER","name":"Properties of variables with `null` or `undefined` values should not be accessed","description":"This rule applies when properties of variables with `null` or `undefined` values are accessed.\n\nTrying to access properties of `null` or `undefined` variables causes a `TypeError` exception.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["cwe"],"examples":"// Example 1\nfunction foo() {\n  let obj;\n  return obj.x; // NULL_POINTER alarm\n}\n\n// Example 2\nif (x == null) { // (x == null) should be modified to (x != null).\n  y = x.a; // NULL_POINTER alarm: x is undefined or null but is property-accessed.\n}\n\n// Example 3\ny = x || x.a; // NULL_POINTER alarm: x has a falsy value but is property-accessed.","examplesRevised":"// Example 1\nfunction foo() {\n  let obj = { x: 1 }; // 'obj' should be initialized.\n  return obj.x;\n}\n\n// Example 2\nif (x != null) {\n  y = x.a;\n}\n\n// Example 3\ny = x && x.a;","cwe":["476"],"see":[]},{"key":"NUMBER_ARG_OUT_OF_RANGE","name":"Radix or precision arguments of Number-related functions should not exceed the limit","description":"This rule applies when radix or precision arguments of Number-related functions, e.g. `toString()`, are not in the permitted range.\n\nIt can be applied to the following functions:\n\n 1. `Number.prototype.toString()`: 2~36\n 2. `Number.prototype.toFixed()`: 0~20\n 3. `Number.prototype.toExponential()`: 0~20\n 4. `Number.prototype.toPrecision()`: 1~21","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["cwe"],"examples":"const x = 42;\nconst s_radix_64 = x.toString(64); // NUMBER_ARG_OUT_OF_RANGE alarm","examplesRevised":"const x = 42;\nconst s_radix_16 = x.toString(16);","cwe":["628"],"see":["[Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)"]},{"key":"PREFER_INEQUALITY_OPERATOR","name":"The inequality operator should be preferred over negating the equality comparison result","description":"This rule applies when the logical negation operator is used on the equality comparison result.\n\nThe inequality operator (`!==`, `!=`) gives the same result as applying the negation operator (`!`) to the equality (`===`, `==`) comparison result. Therefore, it is recommended to use the inequality operator because it is simpler and easier to understand.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Conventional","tag":[],"examples":"if (!(a === b)) { // PREFER_INEQUALITY_OPERATOR alarm\n  doSomething(a);\n}","examplesRevised":"if (a !== b) {\n  doSomething(a);\n}","cwe":[],"see":["[Inequality operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality)","[Strict inequality operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality)"]},{"key":"PROMISE_REJECT_FALL_THROUGH","name":"Execution should not fall through after `reject` call in a `Promise` executor","description":"This rule applies when execution continues after calling the `reject` function in a `Promise` executor.\n\nThe `reject` function of a `Promise` executor changes the state of the `Promise`, but does not stop the executor. In general, it is recommended to add a `return` statement after the `reject` to stop unintended code execution.\n\nThis rule detects the fall through case that the execution continues after a conditional `reject` and the `resolve` function is called eventually. In this case, the later `resolve` call has no effect if the `reject` has been called. Also, it is likely that the code executed between the `reject` and the `resolve` is meaningful only for normally resolved `Promise`. See Example 1 below.\n\nIt is possible that the code executed after a conditional `reject` is common to the resolve and reject cases like doing some cleanup. Even though no immediate problem occurs in this case, for code readability and maintainability, it is recommended to rearrange the conditional code so that the `reject` does not fall through to the `resolve`. See Example 2 below.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["es6"],"examples":"// Example 1\nlet promise1 = new Promise((resolve, reject) => {\n  fs.readFile('foo', (err, data) => {\n    if (err) {\n      reject(err); // PROMISE_REJECT_FALL_THROUGH alarm\n    }\n    console.log('Operation succeeded');\n    resolve(data);\n  });\n});\n\n// Example 2\nlet promise2 = new Promise((resolve, reject) => {\n  fs.readFile('bar', (err, data) => {\n    if (err) {\n      reject(err); // PROMISE_REJECT_FALL_THROUGH alarm\n    }\n    doSomeCleanup();\n    resolve(data);\n  });\n});","examplesRevised":"// Example 1\nlet promise1 = new Promise((resolve, reject) => {\n  fs.readFile('foo', (err, data) => {\n    if (err) {\n      reject(err);\n      return;\n    }\n    console.log('Operation succeeded');\n    resolve(data);\n  });\n});\n\n// Example 2\nlet promise2 = new Promise((resolve, reject) => {\n  fs.readFile('bar', (err, data) => {\n    if (err) {\n      reject(err);\n    } else {\n      resolve(data);\n    }\n    doSomeCleanup();\n  });\n});","cwe":[],"see":["[Promise() constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise)"]},{"key":"REACT_API_TYPO","name":"React API names should not have typos","description":"This rule applies when a typo exists in React API names.\n\nIn such a case, a `TypeError` exception may be thrown or intended behaviors may be omitted.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import React from 'react';\n\nexport default function Hello() {\n  const [count, setCount] = React.useStates(0); // REACT_API_TYPO alarm because 'useState' is the correct API name.\n  function handleClick() {\n    setCount(c => c + 1);\n  }\n  return (\n    <div onClick={handleClick}>{count}</div>\n  );\n}","examplesRevised":"import React from 'react';\n\nexport default function Hello() {\n  const [count, setCount] = React.useState(0);\n  function handleClick() {\n    setCount(c => c + 1);\n  }\n  return (\n    <div onClick={handleClick}>{count}</div>\n  );\n}","cwe":[],"see":["[React API Reference](https://react.dev/reference/react)"]},{"key":"REACT_ASYNC_RENDER_RETURN_VALUE","name":"Using the return value of `ReactDOM.render()` should be avoided","description":"This rule applies when the return value of `ReactDOM.render()` is used.\n\n`ReactDOM.render()` currently returns a reference to the root React component instance. However, using this return value is legacy and should be avoided because future versions of React may render components asynchronously in some cases.\n\nFor more information, please see [ReactDOM.render()](https://17.reactjs.org/docs/react-dom.html#render).\n\n**Note:** This rule is based on React 17 API specifications.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import ReactDOM from 'react-dom';\n\ndoSomething(ReactDOM.render(<App />, rootElement)); // REACT_ASYNC_RENDER_RETURN_VALUE alarm","examplesRevised":"import ReactDOM from 'react-dom';\n\n// Attach a callback ref to get a return value\nReactDOM.render(<App ref={doSomething} />, rootElement);","cwe":[],"see":["[ReactDOM.render()](https://17.reactjs.org/docs/react-dom.html#render)"]},{"key":"REACT_BAD_API_OVERRIDDEN","name":"React component methods only supported in `createReactClass()` API should not be overridden in ES6 class component","description":"This rule applies when React component methods only supported in `createReactClass()` API are overridden in ES6 class component.\n\n`getInitialState()` and `getDefaultProps()` methods are only supported in `createReactClass()` API. When they are defined in ES6 class component, it may cause a problem because intended state initialization or default props definition might not be applied. Also React outputs a warning message.\n\nIf you need to use the methods in ES6 class component, try the following alternatives:\n\n * State initialization: Initialize state in constructor.\n * Default props definition: Define a static property named `defaultProps`.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import React from 'react';\n\nexport class Example1 extends React.Component {\n  getInitialState() { // REACT_BAD_API_OVERRIDDEN alarm because it is not supported in ES6 class component.\n    return { greetName: 'hi' };\n  }\n  render() {\n    return <div>{this.state.greetName}</div>;\n  }\n}\n\nexport class Example2 extends React.Component {\n  static getDefaultProps() { // REACT_BAD_API_OVERRIDDEN alarm because it is not supported in ES6 class component.\n    return { greetName: 'hi' };\n  }\n  render() {\n    return <div>{this.props.greetName}</div>;\n  }\n}","examplesRevised":"import React from 'react';\n\nexport class Example1 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { greetName: 'hi' };\n  }\n  render() {\n    return <div>{this.state.greetName}</div>;\n  }\n}\n\nexport class Example2 extends React.Component {\n  static defaultProps = { greetName: 'hi' };\n  render() {\n    return <div>{this.props.greetName}</div>;\n  }\n}","cwe":[],"see":["[React Without ES6](https://17.reactjs.org/docs/react-without-es6.html)","React Warning: getInitialState was defined on Example1, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?","React Warning: getDefaultProps was defined on Example2, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead."]},{"key":"REACT_BAD_API_RETURN_VALUE","name":"Return values of React API callback functions and lifecycle methods should have valid types","description":"This rule applies when the return value of a React API callback function or lifecycle method is invalid.\n\nIf an invalid value is returned from a callback function or lifecycle method, it may cause a problem when React uses the value. Even when no immediate problem occurs, the value becomes meaningless.\n\nThe callback functions and lifecycle methods which cause problem for an invalid return value are listed below with the valid return values:\n\n 1. Callback passed as the first argument of `React.useEffect()`: function or `undefined`\n 2. Callback passed as the first argument of `React.lazy()`: dynamic `import()`\n 3. Lifecycle method `render()`: React element, array, fragment, portal, string, number, boolean, or `null`\n 4. Lifecycle method `shouldComponentUpdate()`: truthy or falsy value except `undefined`\n 5. Lifecycle method `getDerivedStateFromProps()`: any value except `undefined`\n 6. Lifecycle method `getSnapshotBeforeUpdate()`: any value except `undefined`\n\nIn the above cases, since a specific value should be returned, it might be a programmer's mistake returning a wrong value or forgetting a `return` statement.\n\nAlso, this rule checks the following which need no return value:\n\n 1. Callback passed as the first argument of `forceUpdate()`\n 2. Callback passed as the second argument of `setState()`\n 3. Lifecycle method `componentDidMount()`\n 4. Lifecycle method `componentDidUpdate()`\n 5. Lifecycle method `componentWillUnmount()`\n 6. Lifecycle method `componentDidCatch()`\n 7. Lifecycle method `UNSAFE_componentWillMount()`\n 8. Lifecycle method `UNSAFE_componentWillReceiveProps()`\n 9. Lifecycle method `UNSAFE_componentWillUpdate()`\n\nIn the above cases, returning a value has no effect.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import { useEffect } from 'react';\n\nexport function App({ foo }) {\n  useEffect(() => {\n    if (!foo) {\n      return null; // REACT_BAD_API_RETURN_VALUE alarm\n    }\n    doSomething(foo);\n  }, []);\n  return <div>{foo}</div>;\n}","examplesRevised":"import { useEffect } from 'react';\n\nexport function App({ foo }) {\n  useEffect(() => {\n    if (!foo) {\n      return;\n    }\n    doSomething(foo);\n  }, []);\n  return <div>{foo}</div>;\n}","cwe":[],"see":["[React API Reference](https://react.dev/reference/react)","React Warning: useEffect must not return anything besides a function, which is used for clean-up. You returned null. If your effect does not require clean up, return undefined (or nothing)."]},{"key":"REACT_BAD_CHILD_GENERATOR","name":"`Generator` object should not be used as a child of React element","description":"This rule applies when a `Generator` object is used as a child of React element.\n\n`Generator` objects are the return values of generator functions. Unlike other iterable objects such as array, `Generator` objects can be iterated only once. Iterating an already iterated `Generator` object results in an empty iteration.\n\nDuring rendering, React may perform multiple iterations of iterable objects. For example, in development mode, key validation accompanies an iteration. In this case, nothing gets rendered and React outputs a warning message.\n\nYou can avoid this problem by converting the `Generator` object to an array using `Array.from()` or array spread operator like `[...generatorObject]`.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["es6","react"],"examples":"import { createRoot } from 'react-dom/client';\n\nfunction* hello() {\n  yield <div key=\"Hello\">Hello</div>;\n  yield <div key=\"There\">There</div>;\n}\n\nfunction App() {\n  return (\n    <div>\n      {hello()} {/* REACT_BAD_CHILD_GENERATOR alarm */}\n    </div>\n  );\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);","examplesRevised":"import { createRoot } from 'react-dom/client';\n\nfunction* hello() {\n  yield <div key=\"Hello\">Hello</div>;\n  yield <div key=\"There\">There</div>;\n}\n\nfunction App() {\n  return (\n    <div>\n      {[...hello()]}\n    </div>\n  );\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);","cwe":[],"see":["[Generator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator)","React Warning: Using Iterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. You can also use an Iterable that can iterate multiple times over the same items."]},{"key":"REACT_BAD_CONTEXT_CONSUMER_CHILD","name":"The child node of a React context consumer should be specified properly","description":"This rule applies when the child node of a React context consumer is not specified properly.\n\nThe child node of a context consumer should be a function that takes the current context value and returns a React node to render.\n\nIf an incorrect value is passed or multiple children are specified, React outputs a warning message and a `TypeError` exception is thrown.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import { createContext } from 'react';\n\nexport const MyContext = createContext('foo');\n\nexport function Example1() {\n  return (\n    // REACT_BAD_CONTEXT_CONSUMER_CHILD alarm because the function is not directly specified as a child.\n    <MyContext.Consumer>\n      <div>\n        { value => <div className={value}>Example 1</div> }\n      </div>\n    </MyContext.Consumer>\n  );\n}\n\nexport function Example2() {\n  return (\n    // REACT_BAD_CONTEXT_CONSUMER_CHILD alarm because leading and trailing whitespaces around the JSX expression result in text nodes.\n    <MyContext.Consumer>  { value => <div className={value}>Example 2</div> }  </MyContext.Consumer>\n  );\n}","examplesRevised":"import { createContext } from 'react';\n\nexport const MyContext = createContext('foo');\n\nexport function Example1() {\n  return (\n    <MyContext.Consumer>\n      { value => <div className={value}>Example 1</div> }\n    </MyContext.Consumer>\n  );\n}\n\nexport function Example2() {\n  return (\n    <MyContext.Consumer>{ value => <div className={value}>Example 2</div> }</MyContext.Consumer>\n  );\n}","cwe":[],"see":["[Context Consumer](https://react.dev/reference/react/createContext#consumer)","React Warning: A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.","Uncaught TypeError: Component is not a function"]},{"key":"REACT_BAD_CONTEXT_TYPE","name":"`contextType` property of a React class component should be specified properly","description":"This rule applies when the static `contextType` property of a React class component is not properly specified.\n\nThe `contextType` property is used to consume a context created with `React.createContext()`. When the property is specified for a React class component, you can access the current value of the context using `this.context` inside lifecycle methods of the component.\n\nThis rule checks the following improper usages of contexts:\n\n 1. Values other than the context objects returned by `React.createContext()` are assigned to the `contextType` property. Note that you should use the context object itself, not the `Consumer` or `Provider` property of the context object.\n 2. Context objects are assigned to the legacy `contextTypes` property instead of the `contextType`.\n\nIn the above cases, React outputs warning messages and wrong values may be accessed at `this.context`.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import React from 'react';\n\nlet MyContext = React.createContext(\"there\");\n\nexport class Example1 extends React.Component {\n  static contextType = MyContext.Consumer; // REACT_BAD_CONTEXT_TYPE alarm because consumer is assigned instead of context object.\n  render() {\n    return <div>Hello {this.context}</div>;\n  }\n}\n\nexport class Example2 extends React.Component {\n  static contextTypes = MyContext; // REACT_BAD_CONTEXT_TYPE alarm because context object is assigned to 'contextTypes' instead of 'contextType'.\n  render() {\n    return <div>Hi {this.context}</div>;\n  }\n}","examplesRevised":"import React from 'react';\n\nlet MyContext = React.createContext(\"there\");\n\nexport class Example1 extends React.Component {\n  static contextType = MyContext;\n  render() {\n    return <div>Hello {this.context}</div>;\n  }\n}\n\nexport class Example2 extends React.Component {\n  static contextType = MyContext;\n  render() {\n    return <div>Hi {this.context}</div>;\n  }\n}","cwe":[],"see":["[Component - static contextType](https://react.dev/reference/react/Component#static-contexttype)","React Warning: Example1 defines an invalid contextType. contextType should point to the Context object returned by React.createContext(). Did you accidentally pass the Context.Consumer instead?","React Warning: Example2 uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with static contextType instead. ([https://react.dev/link/legacy-context](https://react.dev/link/legacy-context))"]},{"key":"REACT_BAD_DANGER_FORMAT","name":"`dangerouslySetInnerHTML` prop for a React DOM element should be in the form of `{__html: ...}`","description":"This rule applies when `dangerouslySetInnerHTML` prop for a React DOM element is specified with an incorrect value.\n\n`dangerouslySetInnerHTML` prop is provided as React's replacement for using `innerHTML` property of DOM element. It replaces children of a React DOM element with the value of its `__html` property.\n\nTherefore, `dangerouslySetInnerHTML` prop should be in the form of `{__html: ...}`. Otherwise, React will throw an exception.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <div dangerouslySetInnerHTML={\"myHTML\"} /> // REACT_BAD_DANGER_FORMAT alarm because a string value is passed.\n);","examplesRevised":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <div dangerouslySetInnerHTML={{ __html: \"myHTML\" }} />\n);","cwe":[],"see":["[Dangerously Setting the Inner HTML](https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html)","React Error: `props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit [https://react.dev/link/dangerously-set-inner-html](https://react.dev/link/dangerously-set-inner-html) for more information."]},{"key":"REACT_BAD_DANGER_WITH_CHILDREN","name":"When using `dangerouslySetInnerHTML` prop for a React DOM element, children should not be specified","description":"This rule applies when children are specified also when using `dangerouslySetInnerHTML` prop for a React DOM element.\n\n`dangerouslySetInnerHTML` prop is provided as React's replacement for using `innerHTML` property of DOM element. It replaces children of a React DOM element with the value of its `__html` property.\n\nSo, React will throw an exception if you specify children of the React DOM element which already has `dangerouslySetInnerHTML` prop. You should use either the prop or React element when defining the children.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <div dangerouslySetInnerHTML={{ __html: \"myHTML\" }}>\n    <Children /> {/* REACT_BAD_DANGER_WITH_CHILDREN alarm */}\n  </div>\n);","examplesRevised":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <div dangerouslySetInnerHTML={{ __html: \"myHTML\" }} />\n);","cwe":[],"see":["[Dangerously Setting the Inner HTML](https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html)","React Error: Can only set one of `children` or `props.dangerouslySetInnerHTML`."]},{"key":"REACT_BAD_DOM_ATTRIBUTE_VALUE","name":"React DOM element's attribute should not have a value of the wrong type","description":"This rule applies when React DOM element's attribute value is specified with a wrong type.\n\nReact DOM element's attribute value can be specified with several types. However, if an invalid type is used, an unintended value can be set or the attribute itself can be ignored. Also React outputs a warning message for it.\n\nIt can be applied to the following:\n\n 1. Non-event attribute with function value: React outputs a warning message and ignores it.\n 2. Non-boolean attribute with boolean value (e.g. `className`): React outputs a warning message and ignores it.\n 3. Boolean attribute with `\"true\"` or `\"false\"` string value: React outputs a warning message because the browser will interpret `\"false\"` as a truthy value.\n 4. Attribute with `Symbol` value: React outputs a warning message and ignores it.\n 5. Attribute with `NaN` value: React outputs a warning message and adds the attribute with converted string `\"NaN\"`.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <>\n    <div className={false}>Hi</div> {/* REACT_BAD_DOM_ATTRIBUTE_VALUE alarm because 'className' is specified with a boolean. */}\n    <input disabled=\"false\" /> {/* REACT_BAD_DOM_ATTRIBUTE_VALUE alarm because 'disabled' is specified with a string. */}\n  </>\n);","examplesRevised":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <>\n    <div className=\"false\">Hi</div>\n    <input disabled={false} />\n  </>\n);","cwe":[],"see":["[React DOM Components](https://react.dev/reference/react-dom/components)","React Warning: Received `false` for a non-boolean attribute `className`. If you want to write it to the DOM, pass a string instead: className=\"false\" or className={value.toString()}. If you used to conditionally omit it with className={condition && value}, pass className={condition ? value : undefined} instead.","React Warning: Received the string `false` for the boolean attribute `disabled`. The browser will interpret it as a truthy value. Did you mean disabled={false}?"]},{"key":"REACT_BAD_EVENT_HANDLER","name":"Event handler of a React element should not be a string","description":"This rule applies when the event handler of a React element is specified with a string.\n\nUnlike HTML, an event handler should be always a function in React. If you specify handler code as a string, React will throw an exception.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <div onClick=\"alert('clicked')\"> {/* REACT_BAD_EVENT_HANDLER alarm */}\n    Hello\n  </div>\n);","examplesRevised":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <div onClick={() => alert('clicked')}>\n    Hello\n  </div>\n);","cwe":[],"see":["[Responding to Events](https://react.dev/learn/responding-to-events)","React Error: Expected `onClick` listener to be a function, instead got a value of `string` type."]},{"key":"REACT_BAD_EVENT_HANDLER_RETURN_FALSE","name":"`return false` should not be used in a React event handler","description":"This rule applies when the return value of a React event handler is `false`.\n\nUnlike vanilla HTML, returning `false` from an event handler does not prevent event propagation or default behavior in React. Instead, `stopPropagation()` or `preventDefault()` should be explicitly called on the event object received as a parameter.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <a href=\"http://foo.com\" onClick={() => false}> {/* REACT_BAD_EVENT_HANDLER_RETURN_FALSE alarm */}\n    foo.com\n  </a>\n);","examplesRevised":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <a href=\"http://foo.com\" onClick={event => event.preventDefault()}>\n    foo.com\n  </a>\n);","cwe":[],"see":["[Stopping Propagation](https://react.dev/learn/responding-to-events#stopping-propagation)","[Preventing Default Behavior](https://react.dev/learn/responding-to-events#preventing-default-behavior)"]},{"key":"REACT_BAD_INITIAL_STATE_TYPE","name":"The initial state of a React class component should be set to an object or `null`","description":"This rule applies when the initial state of a React component defined as a class is not object or `null`.\n\nBecause the state of a class component must be an object, React outputs a warning message if you assign a non-object value except `null` as the initial state in the class constructor.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import React from 'react';\n\nexport class Hello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = \"World\"; // REACT_BAD_INITIAL_STATE_TYPE alarm because the type of state is string.\n  }\n  render() {\n    return <h1>Hello, {this.state}!</h1>;\n  }\n}","examplesRevised":"import React from 'react';\n\nexport class Hello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: \"World\" };\n  }\n  render() {\n    return <h1>Hello, {this.state.name}!</h1>;\n  }\n}","cwe":[],"see":["[Class Component - state](https://react.dev/reference/react/Component#state)","React Warning: Hello.state: must be set to an object or null"]},{"key":"REACT_BAD_LENGTH_CHECK","name":"`length` property itself should not be checked in the code for React child element","description":"This rule applies when the `length` property itself is checked in the code for React child element.\n\nIn React, a child element specified as `undefined`, `null`, `true` or `false` is excluded from rendering. This feature is often used to render an element conditionally, e.g. `cond && <div>...</div>`.\n\nHowever, the exclusion is not applied to the numeric value 0. For example, 0 will be rendered for `array.length && <div>...</div>` if the `array` is empty.\n\nThis problem can be fixed by using a boolean-valued expression such as `array.length > 0` instead of checking the `length` property itself.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import { createRoot } from 'react-dom/client';\n\nfunction App({ items }) {\n  return (\n    <div>\n      {items.length && `(${items.join(', ')})`} {/* REACT_BAD_LENGTH_CHECK alarm */}\n    </div>\n  );\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App items={[]} />);","examplesRevised":"import { createRoot } from 'react-dom/client';\n\nfunction App({ items }) {\n  return (\n    <div>\n      {items.length > 0 && `(${items.join(', ')})`}\n    </div>\n  );\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App items={[]} />);","cwe":[],"see":["[Conditional Rendering](https://react.dev/learn/conditional-rendering)"]},{"key":"REACT_BAD_SPECIAL_PROPS","name":"React special props should not be accessed","description":"This rule applies when React special props are accessed.\n\nReact uses two special props (`key` and `ref`). If you access these props by yourself inside a component (e.g. `props.key`), `undefined` is read.\n\nIf you need to access the same value as the special prop, you should pass it as a different prop (e.g. `<ListItemWrapper key={result.id} id={result.id} />`).\n\n**Note:** Starting from React 19, `ref` became a normal prop except for class components. Depending on the current React version used, the application of this rule is adjusted accordingly.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import { createRoot } from 'react-dom/client';\n\nfunction Hello({ key }) {\n  return (\n    <div>Hello { key } </div>\n  );\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<Hello key=\"foo\" />);","examplesRevised":"import { createRoot } from 'react-dom/client';\n\nfunction Hello({ id }) {\n  return (\n    <div>Hello { id } </div>\n  );\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<Hello id=\"foo\" />);","cwe":[],"see":["[Special Props Warning](https://react.dev/warnings/special-props)","React Warning: Hello: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. ([https://react.dev/link/special-props](https://react.dev/link/special-props))"]},{"key":"REACT_BAD_STYLE_OBJ_PROPERTY","name":"React DOM element's `style` property name or value should not be wrong","description":"This rule applies when React DOM element's `style` object property name or value is wrong.\n\nReact outputs a warning message for the following cases of wrong `style` property name or value:\n\n 1. Hyphenated property name\n 2. Non-capitalized vendor prefixes such as `webkit`, `moz`, and `o`\n 3. Property value having semicolon at the end\n 4. `NaN` property value\n\nAlthough hyphenated names way work, it is not React standard and some features like cross-browser compatibility may not be applied.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <>\n    <div style={{\n      'background-color': 'red' // REACT_BAD_STYLE_OBJ_PROPERTY alarm because 'background-color' style property has hyphen, not camelcased.\n    }}>\n      Example 1\n    </div>\n\n    <div style={{\n      webkitTransform: 'translate3d(0, 0, 0)' // REACT_BAD_STYLE_OBJ_PROPERTY alarm because the 'webkit' vendor prefix is not capitalized.\n    }}>\n      Example 2\n    </div>\n\n    <div style={{\n      backgroundColor: 'blue;' // REACT_BAD_STYLE_OBJ_PROPERTY alarm because the value 'blue;' has semicolon at the end.\n    }}>\n      Example 3\n    </div>\n\n    <div style={{\n      fontSize: NaN // REACT_BAD_STYLE_OBJ_PROPERTY alarm because NaN is not a valid property value\n    }}>\n      Example 4\n    </div>\n  </>\n);","examplesRevised":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <>\n    <div style={{\n      backgroundColor: 'red'\n    }}>\n      Example 1\n    </div>\n\n    <div style={{\n      WebkitTransform: 'translate3d(0, 0, 0)'\n    }}>\n      Example 2\n    </div>\n\n    <div style={{\n      backgroundColor: 'blue'\n    }}>\n      Example 3\n    </div>\n\n    <div style={{\n      fontSize: '10px'\n    }}>\n      Example 4\n    </div>\n  </>\n);","cwe":[],"see":["React Warning: Unsupported style property background-color. Did you mean backgroundColor?","React Warning: Unsupported vendor-prefixed style property webkitTransform. Did you mean WebkitTransform?","React Warning: Style property values shouldn't contain a semicolon. Try \"backgroundColor: 'blue'\" instead.","React Warning: `NaN` is an invalid value for the `fontSize` css style property."]},{"key":"REACT_BAD_STYLE_PROP","name":"`style` property of a React DOM element should be an object","description":"This rule applies when the `style` property of a React DOM element is not specified with an object.\n\nUnlike HTML, a string representing CSS rule is not allowed as the value of a `style` property. If you specify a value other than object, `null`, or `undefined`, React will throw an exception.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <div style=\"color: 'red'\"> {/* REACT_BAD_STYLE_PROP alarm because it is a string value. */}\n    Text in red\n  </div>\n);","examplesRevised":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <div style={{ color: 'red' }}>\n    Text in red\n  </div>\n);","cwe":[],"see":["[Using \"Double Curlies\": CSS and Other Objects in JSX](https://react.dev/learn/javascript-in-jsx-with-curly-braces#using-double-curlies-css-and-other-objects-in-jsx)","React Error: The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."]},{"key":"REACT_BAD_UNKNOWN_PROP","name":"React property name in React DOM element should be pre-defined one","description":"This rule applies when a wrong React property name is used for React DOM element.\n\nIn React, DOM attributes and properties are supported as camelCased names, and `data-*` and `aria-*` attributes should be lowercased. Therefore, it is possible to confuse DOM attribute name with React property name, and React will output a warning message.\n\nIt can be applied to the following:\n\n 1. DOM attribute name is used instead of React DOM property (e.g. `class` instead of `className`).\n 2. DOM event handler property is used instead of React event handler (e.g. `onclick` instead of `onClick`).\n 3. `data-*` and `aria-*` attributes are not used as lowercased names (e.g. `data-X` instead of `data-x`).","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <>\n    <div class=\"hello\"> {/* REACT_BAD_UNKNOWN_PROP alarm because 'className' should be used instead of 'class' */}\n      Example 1\n    </div>\n\n    <div onclick={() => alert('clicked')}> {/* REACT_BAD_UNKNOWN_PROP alarm because 'onClick' should be used instead of 'onclick' */}\n      Example 2\n    </div>\n\n    <div data-X=\"foo\"> {/* REACT_BAD_UNKNOWN_PROP alarm because 'data-x' should be used instead of 'data-X'. */}\n      Example 3\n    </div>\n  </>\n);","examplesRevised":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <>\n    <div className=\"hello\">\n      Example 1\n    </div>\n\n    <div onClick={() => alert('clicked')}>\n      Example 2\n    </div>\n\n    <div data-x=\"foo\">\n      Example 3\n    </div>\n  </>\n);","cwe":[],"see":["[React DOM Components](https://react.dev/reference/react-dom/components)","React Warning: Invalid DOM property `class`. Did you mean `className`?","React Warning: Invalid event handler property `onclick`. Did you mean `onClick`?","React Warning: React does not recognize the `data-X` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `data-x` instead. If you accidentally passed it from a parent component, remove it from the DOM element."]},{"key":"REACT_BAD_UPDATE_STATE","name":"Updating the state inside the specific lifecycle methods of a React class component should be avoided","description":"This rule applies when the state is updated inside the specific lifecycle methods of a React class component.\n\nIt is not allowed to use `setState()` or assign to `this.state` inside the following methods:\n\n 1. `constructor()` (`setState()` is not allowed, but `this.state` assignment is possible)\n 2. `render()`\n 3. `componentWillUnmount()`\n\nIf the state is updated inside the above methods, React does not apply the updated state or it may cause an unintentional behavior even though the update is applied. For example, calling `setState()` inside `render()` can cause an infinite loop with `render()`.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import React from 'react';\n\nexport default class SayHello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setState({ name: \"DeepScan\" }); // REACT_BAD_UPDATE_STATE alarm becuase 'setState()' is not allowed in constructor.\n  }\n  render() {\n    this.setState({ name: this.state.name + \" Hello\" }); // REACT_BAD_UPDATE_STATE alarm because 'render()' should be a pure function of props and state.\n    return <div>{this.state.name}</div>;\n  }\n}","examplesRevised":"import React from 'react';\n\nexport default class SayHello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: \"DeepScan\" };\n  }\n  componentDidMount() {\n    this.setState({ name: this.state.name + \" Hello\" });\n  }\n  render() {\n    return <div>{this.state.name}</div>;\n  }\n}","cwe":[],"see":["React Warning: Can't call setState on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the SayHello component.","React Warning: Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."]},{"key":"REACT_DEPRECATED_DOM_ELEMENT_PROP","name":"Deprecated prop for a React DOM element should not be used","description":"This rule applies when deprecated prop for a React DOM element is used.\n\nDeprecated props for a React DOM element and their replacements are as the following:\n\n 1. `<option>`: `value` or `defaultValue` props on `select` element should be used instead of setting `selected` prop.\n 2. `<textarea>`: `value` or `defaultValue` props should be used instead of setting child node.\n\nReact outputs warning messages for the above cases, and deprecated props may not work in future versions of React.","severity":["Medium"],"type":"Code Quality","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <>\n    {/* Example 1 */}\n    <select>\n      <option value=\"hi\">Hi</option>\n      <option selected value=\"hello\">Hello</option> {/* REACT_DEPRECATED_DOM_ELEMENT_PROP alarm because 'selected' prop is set on '<option>'. */}\n    </select>\n\n    {/* Example 2 */}\n    <textarea>Hi</textarea> {/* REACT_DEPRECATED_DOM_ELEMENT_PROP alarm because child node is set on '<textarea>' */}\n  </>\n);","examplesRevised":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <>\n    {/* Example 1 */}\n    <select defaultValue=\"hello\">\n      <option value=\"hi\">Hi</option>\n      <option value=\"hello\">Hello</option>\n    </select>\n\n    {/* Example 2 */}\n    <textarea defaultValue=\"Hi\" />\n  </>\n);","cwe":[],"see":["[React DOM Components: <option>](https://react.dev/reference/react-dom/components/option)","[React DOM Components: <textarea>](https://react.dev/reference/react-dom/components/textarea)","React Warning: Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.","React Warning: Use the `defaultValue` or `value` props instead of setting children on <textarea>."]},{"key":"REACT_DIRECT_ASSIGN_TO_STATE","name":"Assignment should not be made to `this.state` in the React class component's specific methods","description":"This rule applies when assignment is made to `this.state` in the React class component's specific methods.\n\nWhen updating `this.state` inside the following methods, you should use `setState()`:\n\n 1. DOM event handler\n 2. `componentDidMount()`\n 3. `componentDidUpdate()`\n 4. `shouldComponentUpdate()`\n 5. `componentDidCatch()`\n 6. `UNSAFE_componentWillMount()`\n 7. `UNSAFE_componentWillReceiveProps()`\n\nIf `this.state` is modified directly inside the above methods, it may cause a problem because the component is not re-rendered or the updated state is no applied.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import React from 'react';\n\nexport class SayHello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { message: 'Hello' };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.state = { message: 'Bye' }; // REACT_DIRECT_ASSIGN_TO_STATE alarm\n  }\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        {this.state.message}\n      </button>\n    );\n  }\n}","examplesRevised":"import React from 'react';\n\nexport class SayHello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { message: 'Hello' };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState({ message: 'Bye' });\n  }\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        {this.state.message}\n      </button>\n    );\n  }\n}","cwe":[],"see":[]},{"key":"REACT_EVENT_HANDLER_INVALID_THIS","name":"React event handlers accessing `this` object should have proper `this` binding","description":"This rule applies when a function accessing `this` object is used as a React event handler without `this` binding.\n\nWhen calling an event handler, React does not provide `this` object. So, if you try to access a property of `this` inside the handler, a `TypeError` exception is thrown.\n\nTo fix this problem, you can use `Function.prototype.bind()` to specify `this` object or use an arrow function.\n\n**Note:** This rule may report false alarms when an unconventional automatic binding mechanism is used. We recommend disabling this rule in such cases.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import React from 'react';\n\nexport class Hello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: \"John\" };\n  }\n\n  handleClick() {\n    this.setState({ name: \"Mary\" }); // 'this' has undefined value and TypeError is thrown.\n  }\n\n  render() {\n    return (\n      <div onClick={this.handleClick}> {/* REACT_EVENT_HANDLER_INVALID_THIS alarm because 'this.handleClick' function is not bound with 'this'. */}\n        {this.state.name}\n      </div>\n    );\n  }\n}","examplesRevised":"import React from 'react';\n\nexport class Hello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: \"John\" };\n\n    // Bind event handler inside constructor\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState({ name: \"Mary\" });\n  }\n\n  render() {\n    return (\n      <div onClick={this.handleClick}>\n        {this.state.name}\n      </div>\n    );\n  }\n}","cwe":[],"see":[]},{"key":"REACT_FUNC_COMPONENT_INVALID_REF_PROP","name":"`ref` prop should not be used on React function components","description":"This rule applies when a `ref` prop is specified on a React function component.\n\nThe `ref` prop is used to provide a reference to the component instance of the current element. However, because a function component does not have any instances, it cannot be used on an element corresponding to a function component.\n\nIf the intention is to refer an inner element of the function component, you can use `React.forwardRef()` instead.\n\n**Note:** The application of this rule is limited to projects using React 18 or below because React 19 supports using `ref` for function components.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import { useRef } from 'react';\n\nfunction MyInput(props) {\n  return <input />;\n}\n\nexport function App() {\n  const myInput = useRef(null);\n  return (\n    <>\n      <MyInput ref={myInput} /> {/* REACT_FUNC_COMPONENT_INVALID_REF_PROP alarm */}\n      <button onClick={() => myInput.current.focus() }>\n        Edit\n      </button>\n    </>\n  );\n}","examplesRevised":"import { forwardRef, useRef } from 'react';\n\nconst MyInput = forwardRef((props, ref) => {\n  return <input ref={ref} />;\n});\n\nexport function App() {\n  const myInput = useRef(null);\n  return (\n    <>\n      <MyInput ref={myInput} />\n      <button onClick={() => myInput.current.focus() }>\n        Edit\n      </button>\n    </>\n  );\n}","cwe":[],"see":["[Refs and Function Components](https://legacy.reactjs.org/docs/refs-and-the-dom.html#refs-and-function-components)","React Warning: Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?"]},{"key":"REACT_FUNC_COMPONENT_INVALID_THIS","name":"`this` object should not be used in React function components","description":"This rule applies when `this` object is used in a React function component.\n\n`this` is bound to an undefined value in a function component unlike the `this` object of a class component, which represents the component instance. Accessing properties of `this` in a function component will result in a `TypeError` exception.\n\nTherefore, it is likely that a programmer has mistaken the function component for a class component.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import { createRoot } from 'react-dom/client';\n\nfunction Hello(props) {\n  return (\n    <div>Hello, {this.props.name}</div> // REACT_FUNC_COMPONENT_INVALID_THIS alarm\n  );\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<Hello name=\"John\" />);","examplesRevised":"import { createRoot } from 'react-dom/client';\n\nfunction Hello(props) {\n  return (\n    <div>Hello, {props.name}</div>\n  );\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<Hello name=\"John\" />);","cwe":[],"see":[]},{"key":"REACT_INEFFICIENT_PURE_COMPONENT_PROP","name":"`React.PureComponent` prop should not be specified with an object that is always newly created","description":"This rule applies when a prop value for `React.PureComponent` is specified with an object that is always newly created.\n\nThe `shouldComponentUpdate()` method of `React.PureComponent` checks the change with strict equality on the properties of props and state objects.\nIn this process, a newly created object is detected as a change and may trigger unnecessary re-rendering.\n\nOne of the most common cases of this problem is creating a different callback each time for a prop by an arrow function or a `bind` call.\nWe generally recommend using the property initializer syntax or binding in the constructor, to avoid this sort of performance problem.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Efficient","tag":["react"],"examples":"import React from 'react';\n\nclass MyButton extends React.PureComponent {\n  render() {\n    return (\n      <button onClick={this.props.onClick}>\n        Click\n      </button>\n    );\n  }\n}\n\nexport class App extends React.Component {\n  render() {\n    // REACT_INEFFICIENT_PURE_COMPONENT_PROP alarm because a newly created object is passed to 'onClick' prop.\n    return <MyButton onClick={() => alert('clicked')} />;\n  }\n}","examplesRevised":"import React from 'react';\n\nclass MyButton extends React.PureComponent {\n  render() {\n    return (\n      <button onClick={this.props.onClick}>\n        Click\n      </button>\n    );\n  }\n}\n\nexport class App extends React.Component {\n  buttonHandler = () => alert('clicked');\n\n  render() {\n    return <MyButton onClick={this.buttonHandler} />;\n  }\n}","cwe":[],"see":["[PureComponent](https://react.dev/reference/react/PureComponent)","[shouldComponentUpdate()](https://react.dev/reference/react/Component#shouldcomponentupdate)","[React, Inline Functions, and Performance](https://reacttraining.com/blog/react-inline-functions-and-performance)"]},{"key":"REACT_INVALID_DOM_NESTING","name":"React DOM elements should be nested properly","description":"This rule applies when React DOM elements are not nested properly according to the HTML specification.\n\nReact requires using valid DOM elements and generates warnings for invalid DOM trees even though browsers may apply recoveries. The warnings are necessary because invalid trees may confuse React and break re-renderings in the future versions of React.\n\nFor example, React outputs warnings in the following cases:\n\n 1. A `<tr>` is used inside `<table>` without the `<tbody>`. In this case, browsers insert the `<tbody>` in the generated DOM tree. Although the HTML specification says `<tbody>` is not required in some cases, it is recommended to always match the generated DOM tree.\n 2. An extraneous space is used in JSX code where a text node is not allowed. In JSX, most extraneous spaces are automatically removed. However, if you put a space in the same line as the previous tag like `<tr> <td>`, it is not removed and causes a React warning.\n 3. A non-phrasing content is used inside `<p>`. The `<p>` element allows only phrasing content like `<span>` or `<code>`. If you use a non-phrasing element like `<pre>` or `<div>`, a React warning occurs.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <>\n    <table>\n      {/* REACT_INVALID_DOM_NESTING alarm because '<tbody>' is missing. */}\n      <tr><td>Example 1</td></tr>\n    </table>\n\n    <table>\n      <tbody>\n        {/* REACT_INVALID_DOM_NESTING alarm because there are extraneous spaces after '<tr>'. */}\n        <tr>  <td>Example 2</td></tr>\n      </tbody>\n    </table>\n\n    <p>\n      {/* REACT_INVALID_DOM_NESTING alarm because '<pre>' is not a phrasing content. */}\n      <pre>Example 3</pre>\n    </p>\n  </>\n);","examplesRevised":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <>\n    <table>\n      <tbody>\n        <tr><td>Example 1</td></tr>\n      </tbody>\n    </table>\n\n    <table>\n      <tbody>\n        <tr><td>Example 2</td></tr>\n      </tbody>\n    </table>\n\n    <p>\n      <code>Example 3</code>\n    </p>\n  </>\n);","cwe":[],"see":["[<tr>: The Table Row Element](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/tr)","[Content Categories](https://developer.mozilla.org/en-US/docs/Web/HTML/Guides/Content_categories)","React Warning: In HTML, <tr> cannot be a child of <table>. Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser. This will cause a hydration error.","React Warning: In HTML, whitespace text nodes cannot be a child of <tr>. Make sure you don't have any extra whitespace between tags on each line of your source code. This will cause a hydration error.","React Warning: In HTML, <pre> cannot be a descendant of <p>. This will cause a hydration error."]},{"key":"REACT_MISMATCHED_COUNT_OF_ARGS","name":"React API should be called with the correct number of arguments","description":"This rule applies when React API is called with the wrong number of arguments.\n\nBecause React API has the specification for its arguments, arguments are useless or cause undefined behavior if the number of arguments does not match.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["cwe","react"],"examples":"import { createRoot } from 'react-dom/client';\nimport App from './App.jsx';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(); // REACT_MISMATCHED_COUNT_OF_ARGS alarm because 'render()' takes one argument.","examplesRevised":"import { createRoot } from 'react-dom/client';\nimport App from './App.jsx';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);","cwe":["628","685"],"see":["[React API Reference](https://react.dev/reference/react)"]},{"key":"REACT_MISMATCHED_TYPE_OF_ARG","name":"React API should be called with arguments of correct types","description":"This rule applies when React API is called with arguments of wrong types.\n\nBecause React API has the specification for its arguments, React will throw an error or output a warning message if the types of arguments are wrong.","severity":["Medium","High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["cwe","react"],"examples":"import { createRoot } from 'react-dom/client';\n\nfunction App() {\n  return <div>Hello</div>;\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(App); // REACT_MISMATCHED_TYPE_OF_ARG alarm because the first argument of 'render()' should be a React element.","examplesRevised":"import { createRoot } from 'react-dom/client';\n\nfunction App() {\n  return <div>Hello</div>;\n}\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);","cwe":["628"],"see":["[React API Reference](https://react.dev/reference/react)","React Warning: Functions are not valid as a React child. This may happen if you return App instead of <App /> from render. Or maybe you meant to call this function rather than return it."]},{"key":"REACT_MISMATCHED_TYPE_OF_PROP","name":"React component should receive prop values of correct `propTypes`","description":"This rule applies when a React component receives a prop value which does not match its `propTypes` declaration.\n\nWhen a React component receives such a prop value, React outputs a warning message.\n\n**Note:** This rule is based on React 17 API specifications.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Person extends React.Component {\n  static propTypes = {\n    name: PropTypes.string,\n    age: PropTypes.number\n  };\n  render() {\n    return <div>{this.props.name} is {this.props.age} years old</div>;\n  }\n}\n\nexport class App extends React.Component {\n  render() {\n    return <Person name=\"John\" age=\"20\" />; // REACT_MISMATCHED_TYPE_OF_PROP alarm because 'age' has `PropTypes.number` type.\n  }\n}","examplesRevised":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Person extends React.Component {\n  static propTypes = {\n    name: PropTypes.string,\n    age: PropTypes.number\n  };\n  render() {\n    return <div>{this.props.name} is {this.props.age} years old</div>;\n  }\n}\n\nexport class App extends React.Component {\n  render() {\n    return <Person name=\"John\" age={20} />;\n  }\n}","cwe":[],"see":["[Typechecking with PropTypes](https://17.reactjs.org/docs/typechecking-with-proptypes.html)","React Warning: Failed prop type: Invalid prop `age` of type `string` supplied to `Person`, expected `number`."]},{"key":"REACT_MISSING_CLEANUP_IN_EFFECT_HOOK","name":"Global event handlers added at React Effect Hooks should be properly removed at the cleanup function","description":"This rule applies when global event handlers are added during the execution of `useEffect()`, but not removed properly at the effect cleanup function.\n\nIn general, global handlers should be explicitly removed at the cleanup function because they persist beyond the React component lifecycle.\n\nIf the handler is not removed,\n\n 1. It can be executed unnecessarily.\n 2. Data reachable from it cannot be garbage-collected and a memory leak would occur.\n\nCurrently, this rule detects alarms on the following global handlers:\n\n 1. Event listeners on the `window` object\n 2. Event listeners on the `document` object\n 3. `setInterval()` handlers\n\nThis rule also applies to the analogous `useLayoutEffect` Hook.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Complete","tag":["react"],"examples":"import { useEffect } from 'react';\n\nfunction foo() {\n  alert(\"clicked!\");\n}\n\nexport function Hello(props) {\n  useEffect(() => {\n    document.addEventListener(\"click\", foo); // REACT_MISSING_CLEANUP_IN_EFFECT_HOOK alarm\n  }, []);\n  return <div>Hello, {props.name}</div>;\n}","examplesRevised":"import { useEffect } from 'react';\n\nfunction foo() {\n  alert(\"clicked!\");\n}\n\nexport function Hello(props) {\n  useEffect(() => {\n    document.addEventListener(\"click\", foo);\n    return () => {\n      document.removeEventListener(\"click\", foo);\n    };\n  }, []);\n  return <div>Hello, {props.name}</div>;\n}","cwe":[],"see":["[useEffect()](https://react.dev/reference/react/useEffect)"]},{"key":"REACT_MISSING_CLEANUP_IN_LIFECYCLE","name":"Global event handlers should be properly removed during the lifecyle of a React class component","description":"This rule applies when global event handlers are added, but not removed properly during the lifecycle of a React class component.\n\nIn general, global handlers added at `componentDidMount()` should be explicitly removed at `componentWillUnmount()` because they persist beyond the React component lifecycle.\n\nIf the handler is not removed,\n\n 1. It can be executed unnecessarily.\n 2. Data reachable from it cannot be garbage-collected and a memory leak would occur.\n\nCurrently, this rule detects alarms on the following global handlers:\n\n 1. Event listeners on the `window` object\n 2. Event listeners on the `document` object\n 3. `setInterval()` handlers","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Complete","tag":["react"],"examples":"import React from 'react';\n\nexport default class Hello extends React.Component {\n  update = () => {\n    this.forceUpdate();\n  }\n  componentDidMount() {\n    window.addEventListener('hashchange', this.update, false); // REACT_MISSING_CLEANUP_IN_LIFECYCLE alarm\n  }\n  componentWillUnmount() {\n    window.removeEventListener('hashChange', this.update, false); // 'C' is upper-case\n  }\n  render() {\n    return <div>Hello</div>;\n  }\n}","examplesRevised":"import React from 'react';\n\nexport default class Hello extends React.Component {\n  update = () => {\n    this.forceUpdate();\n  }\n  componentDidMount() {\n    window.addEventListener('hashchange', this.update, false);\n  }\n  componentWillUnmount() {\n    window.removeEventListener('hashchange', this.update, false);\n  }\n  render() {\n    return <div>Hello</div>;\n  }\n}","cwe":[],"see":["[componentDidMount()](https://react.dev/reference/react/Component#componentdidmount)","[componentWillUnmount()](https://react.dev/reference/react/Component#componentwillunmount)"]},{"key":"REACT_MISSING_EVENT_PERSIST","name":"`event.persist()` should be called when using React synthetic events inside an asynchronous callback function","description":"This rule applies when a React synthetic event is used inside an asynchronous callback function without calling `event.persist()`.\n\nReact uses the `SyntheticEvent` objects to wrap native events. For performance reasons, synthetic events are pooled and reused across multiple native events. To assure consistent usage of the pooled events, React nullifies the properties of synthetic events right after executing an event handler.\n\nIf you need to access a synthetic event inside an asynchronous callback function, `event.persist()` should be called to remove the current event from the pool. Otherwise, an irrelevant value from another event or a null value will be read inside the callback.\n\n**Note:** The application of this rule is limited to projects using React 16 or below because event pooling was removed in React 17.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import React from 'react';\n\nexport class Hello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { foo: 123 };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick(event) { // REACT_MISSING_EVENT_PERSIST alarm because 'event' is used inside asynchronous 'setState()' callback.\n    this.setState((prevState) => ({\n      foo: prevState.foo + event.pageX\n    }));\n  }\n  render() {\n    return (\n      <div onClick={this.handleClick}>Hello</div>\n    );\n  }\n}","examplesRevised":"import React from 'react';\n\nexport class Hello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { foo: 123 };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick(event) {\n    event.persist();\n    this.setState((prevState) => ({\n      foo: prevState.foo + event.pageX\n    }));\n  }\n  render() {\n    return (\n      <div onClick={this.handleClick}>Hello</div>\n    );\n  }\n}","cwe":[],"see":["[Event Pooling](https://legacy.reactjs.org/docs/legacy-event-pooling.html)","React Warning: This synthetic event is reused for performance reasons. If you're seeing this, you're accessing the property `pageX` on a released/nullified synthetic event. This is set to null. If you must keep the original synthetic event around, use event.persist(). See [https://fb.me/react-event-pooling](https://reactjs.org/docs/events.html#event-pooling) for more information."]},{"key":"REACT_MISSING_KEY_PROP","name":"`key` prop should be defined at array elements used as the children of a React element","description":"This rule applies when the `key` prop is missing at array elements used as the children of a React element.\n\nIn such a case, problems like poor rendering performance and component state loss may occur when the array elements are reordered. Also, React outputs a warning message.","severity":["Medium"],"type":"Code Quality","cleanCodeAttribute":"Efficient","tag":["react"],"examples":"import { useState } from 'react';\nimport { fetchUsers } from './UserData.js';\n\nexport function UserList() {\n  const [users, setUsers] = useState([]);\n  async function handleClick() {\n    setUsers(await fetchUsers());\n  }\n  const listItems = users.map(user =>\n    <li>{user.name}</li> // REACT_MISSING_KEY_PROP alarm\n  );\n  return (\n    <>\n      <button onClick={handleClick}>Refresh</button>\n      <ul>{listItems}</ul>\n    </>\n  );\n}","examplesRevised":"import { useState } from 'react';\nimport { fetchUsers } from './UserData.js';\n\nexport function UserList() {\n  const [users, setUsers] = useState([]);\n  async function handleClick() {\n    setUsers(await fetchUsers());\n  }\n  const listItems = users.map(user =>\n    <li key={user.id}>{user.name}</li>\n  );\n  return (\n    <>\n      <button onClick={handleClick}>Refresh</button>\n      <ul>{listItems}</ul>\n    </>\n  );\n}","cwe":[],"see":["[Rendering Lists](https://react.dev/learn/rendering-lists)","React Warning: Each child in a list should have a unique \"key\" prop. Check the render method of `UserList`. See [https://react.dev/link/warning-keys](https://react.dev/link/warning-keys) for more information."]},{"key":"REACT_MISUSED_API_IN_RENDER","name":"Using specific APIs inside `React.render()` should be avoided","description":"This rule applies when specific APIs are used inside `React.render()`.\n\nThe below APIs cannot be used inside `React.render()` because it triggers nested component updates or accesses unmounted components:\n\n 1. `ReactDOM.render()`\n 2. `ReactDOM.unmountComponentAtNode()`\n 3. `ReactDOM.findDOMNode()`\n\nIn the above cases, React outputs a warning message. Therefore, these APIs should be called inside `componentDidUpdate()` or `componentDidMount()` instead of `React.render()`.\n\n**Note:** This rule is based on React 17 API specifications.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import React from 'react';\nimport ReactDOM from 'react-dom';\n\nexport class MyComponent extends React.Component {\n  render() {\n    ReactDOM.findDOMNode(this).focus(); // REACT_MISUSED_API_IN_RENDER alarm because the component is not mounted yet.\n    return (\n      <input type=\"text\" />\n    );\n  }\n}","examplesRevised":"import React from 'react';\nimport ReactDOM from 'react-dom';\n\nexport class MyComponent extends React.Component {\n  componentDidMount() {\n    ReactDOM.findDOMNode(this).focus();\n  }\n  render() {\n    return (\n      <input type=\"text\" />\n    );\n  }\n}","cwe":[],"see":["[ReactDOM APIs](https://17.reactjs.org/docs/react-dom.html)","React Warning: MyComponent is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead."]},{"key":"REACT_MISUSED_CONTROLLED_COMPONENT","name":"Form elements should be either controlled or uncontrolled","description":"This rule applies when a form element such as `<input>`, `<textarea>`, and `<select>` works as both controlled and uncontrolled element.\n\nThe followings are controlled elements whose values are controlled by React state and associated handler functions:\n\n 1. A form element has `value` prop.\n 2. `<input>` element of type `radio` or `checkbox` has `checked` prop.\n\nIn contrast, the followings are uncontrolled elements with the initial values:\n\n 1. A form element has `defaultValue` prop.\n 2. `<input>` element of type `radio` or `checkbox` has `defaultChecked` prop.\n\nTherefore, a form element should not have both `value` and `defaultValue` props. Also, `<input>` element should not have both `checked` and `defaultChecked` props. React outputs a warning message if you set both props for a form element.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import { useState } from 'react';\n\nexport function MyInput() {\n  const [value, setValue] = useState('');\n\n  return (\n    <input // REACT_MISUSED_CONTROLLED_COMPONENT alarm\n      type=\"text\"\n      value={value}\n      defaultValue=\"DeepScan\"\n      onChange={e => setValue(e.target.value)}\n    />\n  );\n}","examplesRevised":"import { useState } from 'react';\n\nexport function MyInput() {\n  const [value, setValue] = useState('DeepScan');\n\n  return (\n    <input\n      type=\"text\"\n      value={value}\n      onChange={e => setValue(e.target.value)}\n    />\n  );\n}","cwe":[],"see":["[React DOM Components: <input>](https://react.dev/reference/react-dom/components/input)","[React DOM Components: <textarea>](https://react.dev/reference/react-dom/components/textarea)","[React DOM Components: <select>](https://react.dev/reference/react-dom/components/select)","React Warning: MyInput contains an input of type text with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: [https://react.dev/link/controlled-components](https://react.dev/link/controlled-components)"]},{"key":"REACT_MISUSED_CREATOR_IN_PROP_TYPES","name":"React type checker creator itself should not be used as a prop type","description":"This rule applies when a React type checker creator itself is used as a prop type.\n\nReact type checker creator is a function type, so its return value should be used as a prop type.\n\nType checker creators supported in React are as follows:\n 1. `PropTypes.instanceOf()`\n 2. `PropTypes.oneOf()`\n 3. `PropTypes.oneOfType()`\n 4. `PropTypes.arrayOf()`\n 5. `PropTypes.objectOf()`\n 6. `PropTypes.shape()`\n\nWhen the above React type checker creator is misused, type checking for the prop is ignored and React outputs a warning message.\n\n**Note:** This rule is based on React 17 API specifications.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport class Hello extends React.Component {\n  static propTypes = {\n    greetInfo: PropTypes.shape // REACT_MISUSED_CREATOR_IN_PROP_TYPES alarm because 'PropTypes.shape' is a type checker creator.\n  };\n  render() {\n    return <div>{this.props.greetInfo.greetName}</div>;\n  }\n}","examplesRevised":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport class Hello extends React.Component {\n  static propTypes = {\n    greetInfo: PropTypes.shape({\n      greetName: PropTypes.string\n    })\n  };\n  render() {\n    return <div>{this.props.greetInfo.greetName}</div>;\n  }\n}","cwe":[],"see":["[Typechecking with PropTypes](https://17.reactjs.org/docs/typechecking-with-proptypes.html)","React Warning: type specification of prop is invalid; the type checker function must return `null` or an `Error` but returned a function. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."]},{"key":"REACT_MISUSED_INNER_HTML","name":"`innerHTML` prop for a React DOM element should not be used","description":"This rule applies when `innerHTML` prop for a React DOM element is used.\n\n`innerHTML` prop is risky because it is easy to expose your users to a cross-site scripting (XSS) attack. React provides `dangerouslySetInnerHTML` as a replacement for `innerHTML` prop to remind yourself that it is dangerous.\n\nTherefore, you should use `dangerouslySetInnerHTML` prop instead of `innerHTML` prop. Otherwise, React outputs a warning message.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <div innerHTML=\"Hello\" /> // REACT_MISUSED_INNER_HTML alarm because 'innerHTML' is used.\n);","examplesRevised":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <div dangerouslySetInnerHTML={{ __html: \"Hello\" }} />\n);","cwe":[],"see":["[Dangerously Setting the Inner HTML](https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html)","React Warning: Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."]},{"key":"REACT_MISUSED_UPDATE_IN_SET_STATE","name":"`this.state` value may not be directly used when updating the state in a React class component","description":"This rule applies when `this.state` value is directly used when updating the state in a React class component.\n\nIn React, `this.state` may not be the up-to-date value since `this.state` may be updated asynchronously. Also, React may batch multiple `setState()` calls into a single update for performance. Therefore, if the next state is calculated using `this.state` value, the state may be updated with a wrong value.\n\nTo prevent the possibility of the wrong update, you can use a callback function as the first argument of `setState()` instead of an object. The callback function receives the previous state and props as the arguments, which represent the up-to-date state.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import React from 'react';\n\nexport class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { counter: 0 };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState({ counter: this.state.counter + 1 }); // REACT_MISUSED_UPDATE_IN_SET_STATE alarm because 'this.state.counter' may not be the up-to-date value.\n  }\n  render() {\n    return <div onClick={this.handleClick}>{this.state.counter}</div>;\n  }\n}","examplesRevised":"import React from 'react';\n\nexport class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { counter: 0 };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState(prevState => {\n      return { counter: prevState.counter + 1 };\n    });\n  }\n  render() {\n    return <div onClick={this.handleClick}>{this.state.counter}</div>;\n  }\n}","cwe":[],"see":["[State Updates May Be Asynchronous](https://legacy.reactjs.org/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous)"]},{"key":"REACT_REDUNDANT_SHOULD_COMPONENT_UPDATE","name":"A component extending `React.PureComponent` should not override `shouldComponentUpdate()` lifecycle method","description":"This rule applies when a component extending `React.PureComponent` overrides `shouldComponentUpdate()` lifecycle method.\n\n`React.PureComponent` implements `shouldComponentUpdate()` method to determine re-rendering with a shallow prop and state comparison for rendering performance optimization.\n\nAlthough overridden `shouldComponentUpdate()` method will work as intended, `React.PureComponent` plays no role in such a case and React outputs a warning message. Therefore, if you need your own `shouldComponentUpdate()`, it is recommended to use `React.Component` instead.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["react"],"examples":"import React from 'react';\n\nexport class Hello extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = { greetName: \"Hi\" };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState({ greetName: \"Bye\" });\n  }\n  shouldComponentUpdate(nextProps, nextState) { // REACT_REDUNDANT_SHOULD_COMPONENT_UPDATE alarm because 'Hello' component extends 'React.PureComponent' but overrides 'shouldComponentUpdate()'.\n    if (nextState.greetName !== this.state.greetName) {\n      return true;\n    }\n    return false;\n  }\n  render() {\n    return (<div onClick={this.handleClick}>{this.state.greetName}</div>);\n  }\n}","examplesRevised":"import React from 'react';\n\nexport class Hello extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { greetName: \"Hi\" };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState({ greetName: \"Bye\" });\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextState.greetName !== this.state.greetName) {\n      return true;\n    }\n    return false;\n  }\n  render() {\n    return (<div onClick={this.handleClick}>{this.state.greetName}</div>);\n  }\n}","cwe":[],"see":["[React.PureComponent](https://react.dev/reference/react/PureComponent)","React Warning: Hello has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used."]},{"key":"REACT_REDUX_UNUSED_OWN_PROPS_PARAM","name":"Unused `ownProps` parameter of the React Redux `mapStateToProps` function should be removed","description":"This rule applies when the second `ownProps` parameter of the React Redux `mapStateToProps` function is not used.\n\nThe `mapStateToProps(state, ownProps)` is specified as the first argument of `connect()` call and its `ownProps` parameter receives the props object of the wrapper component. If the `ownProps` parameter is not present, React Redux skips calling the function at the props change.\n\nTherefore, for performance, it is recommended to remove the `ownProps` parameter if it is not used in the function body. In some cases, such modification saves not only the function execution time but also unnecessary re-renderings.\n\nThis rule also applies to the `mapDispatchToProps` which takes `ownProps` parameter in a similar way.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Efficient","tag":["react"],"examples":"import { connect } from 'react-redux';\n\nfunction ShowCount(props) {\n  return <div>count: {props.count}</div>;\n}\nconst mapStateToProps = (state, ownProps) => { // REACT_REDUX_UNUSED_OWN_PROPS_PARAM alarm\n  return { count: state.count };\n}\nexport default connect(mapStateToProps)(ShowCount);","examplesRevised":"import { connect } from 'react-redux';\n\nfunction ShowCount(props) {\n  return <div>count: {props.count}</div>;\n}\nconst mapStateToProps = (state) => {\n  return { count: state.count };\n}\nexport default connect(mapStateToProps)(ShowCount);","cwe":[],"see":["[mapStateToProps](https://react-redux.js.org/api/connect#mapstatetoprops-state-ownprops--object)","[mapDispatchToProps](https://react-redux.js.org/api/connect#mapdispatchtoprops-object--dispatch-ownprops--object)","[The Number of Declared Arguments Affects Behavior](https://react-redux.js.org/using-react-redux/connect-mapstate#the-number-of-declared-arguments-affects-behavior)"]},{"key":"REACT_STATIC_LIFECYCLE_INVALID_THIS","name":"`this` should not be accessed in React static lifecycle methods","description":"This rule applies when an unbound `this` is accessed in React static lifecycle methods.\n\nIn such a case, a `TypeError` exception is thrown because React does not provide `this` value when calling static lifecycle methods.","severity":["Medium","High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import React from 'react';\n\nexport class Hello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { msg: 'hi' };\n  }\n  static getDerivedStateFromProps(nextProps, prevState) {\n    // REACT_STATIC_LIFECYCLE_INVALID_THIS alarm because 'this' is 'null' in static method.\n    // In this case, a 'TypeError' occurs when accessing 'this.state'.\n    if (nextProps.msg && nextProps.msg !== this.state.msg) {\n      return { msg: nextProps.msg };\n    }\n    return null;\n  }\n  render() {\n    return <div>{this.state.msg}</div>;\n  }\n}","examplesRevised":"import React from 'react';\n\nexport class Hello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { msg: 'hi' };\n  }\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.msg && nextProps.msg !== prevState.msg) {\n      return { msg: nextProps.msg };\n    }\n    return null;\n  }\n  render() {\n    return <div>{this.state.msg}</div>;\n  }\n}","cwe":[],"see":["[static getDerivedStateFromError()](https://react.dev/reference/react/Component#static-getderivedstatefromerror)","[static getDerivedStateFromProps()](https://react.dev/reference/react/Component#static-getderivedstatefromprops)"]},{"key":"REACT_STATIC_PROPERTY_IN_INSTANCE","name":"Static properties of a React class component should not be defined as instance properties","description":"This rule applies when the static property of a React class component is defined as an instance property.\n\nReact provides the following static properties which apply to all instances of the component once defined as static.\n\n 1. `contextType`\n 2. `defaultProps`\n 3. `getDerivedStateFromProps()`\n 4. `getDerivedStateFromError()`\n\nIf these properties are defined as instance properties of the class, React ignores them and outputs a warning message.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import React from 'react';\n\nexport class Hello extends React.Component {\n  defaultProps = { msg: 'Hello' } // REACT_STATIC_PROPERTY_IN_INSTANCE alarm\n  render() {\n    return <h1>{this.props.msg} there!</h1>;\n  }\n}","examplesRevised":"import React from 'react';\n\nexport class Hello extends React.Component {\n  static defaultProps = { msg: 'Hello' }\n  render() {\n    return <h1>{this.props.msg} there!</h1>;\n  }\n}","cwe":[],"see":["[static contextType](https://react.dev/reference/react/Component#static-contexttype)","[static defaultProps](https://react.dev/reference/react/Component#static-defaultprops)","[static getDerivedStateFromProps()](https://react.dev/reference/react/Component#static-getderivedstatefromprops)","[static getDerivedStateFromError()](https://react.dev/reference/react/Component#static-getderivedstatefromerror)","React Warning: contextType was defined as an instance property on Hello. Use a static property to define contextType instead.","React Warning: Setting defaultProps as an instance property on Hello is not supported and will be ignored. Instead, define defaultProps as a static property on Hello.","React Warning: Hello: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method."]},{"key":"REACT_UNINITIALIZED_PROPS","name":"Uninitialized `this.props` of a React class component should not be accessed","description":"This rule applies when uninitialized `this.props` is accessed in a React class component.\n\n`this.props` is uninitialized in the below cases and accessing its properties causes a `TypeError` exception:\n\n 1. `this.props` is accessed in the class constructor before the `super(props)` call.\n 2. The `props` argument is not passed when calling `super()` in the class constructor.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import React from 'react';\n\nexport class Foo extends React.Component {\n  constructor(props) {\n    super();\n    this.state = { x: this.props.x }; // REACT_UNINITIALIZED_PROPS alarm because 'super()' is not called with 'props'.\n  }\n  render() {\n    return <div>{this.state.x}</div>;\n  }\n}","examplesRevised":"import React from 'react';\n\nexport class Foo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { x: this.props.x };\n  }\n  render() {\n    return <div>{this.state.x}</div>;\n  }\n}","cwe":[],"see":[]},{"key":"REACT_UNINVOKED_UNSAFE_LIFECYCLE","name":"Unsafe legacy lifecycle methods of a React class component should not be defined together with newly added replacements","description":"This rule applies when the unsafe legacy lifecycle methods of a React class component are defined together with newly added replacements.\n\nIn React v16.3, `componentWillMount()`, `componentWillReceiveProps()`, and `componentWillUpdate()` were marked as unsafe by adding the prefix `UNSAFE_`, like `USAFE_componentWillMount()`.\nThey have often been misused and may cause more problems with the upcoming async rendering.\nAs safer alternatives for those methods, `getSnapshotBeforeUpdate()` and `getDerivedStateFromProps()` were newly added.\n\nSince the roles of the unsafe methods and the newly added methods may overlap, React prevents the unsafe methods from being called when the alternatives are defined and outputs a warning message.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Clear","tag":["react"],"examples":"import React from 'react';\n\nexport class Hello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { msg: 'hi' };\n    this.handleClick = this.handleClick.bind(this);\n    this.helloRef = React.createRef();\n  }\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    if (prevState.msg !== this.state.msg) {\n      const hello = this.helloRef.current;\n      return hello.offsetLeft;\n    }\n    return null;\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (snapshot !== null) {\n      this.helloRef.current.style.left = (snapshot + 10) + \"px\";\n    }\n  }\n  UNSAFE_componentWillUpdate(nextProps, nextState) { // REACT_UNINVOKED_UNSAFE_LIFECYCLE alarm because 'getSnapshotBeforeUpdate()' is defined.\n    this.curOffsetLeft = this.helloRef.current.offsetLeft;\n  }\n  handleClick() {\n    if (this.state.msg === 'hi') {\n      this.setState({ msg: 'bye' });\n    } else {\n      this.setState({ msg: 'hi' });\n    }\n  }\n  render() {\n    return <div ref={this.helloRef} onClick={this.handleClick} style={{ position: \"absolute\" }}>{this.state.msg}</div>;\n  }\n}","examplesRevised":"import React from 'react';\n\nexport class Hello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { msg: 'hi' };\n    this.handleClick = this.handleClick.bind(this);\n    this.helloRef = React.createRef();\n  }\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    if (prevState.msg !== this.state.msg) {\n      const hello = this.helloRef.current;\n      return hello.offsetLeft;\n    }\n    return null;\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (snapshot !== null) {\n      this.helloRef.current.style.left = (snapshot + 10) + \"px\";\n    }\n  }\n  handleClick() {\n    if (this.state.msg === 'hi') {\n      this.setState({ msg: 'bye' });\n    } else {\n      this.setState({ msg: 'hi' });\n    }\n  }\n  render() {\n    return <div ref={this.helloRef} onClick={this.handleClick} style={{ position: \"absolute\" }}>{this.state.msg}</div>;\n  }\n}","cwe":[],"see":["[Migrating from Legacy Lifecycles](https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#migrating-from-legacy-lifecycles)","React Warning: Unsafe legacy lifecycles will not be called for components using new component APIs. Hello uses getSnapshotBeforeUpdate() but also contains the following legacy lifecycles: UNSAFE_componentWillUpdate. The above lifecycles should be removed. Learn more about this warning here: [https://react.dev/link/unsafe-component-lifecycles](https://react.dev/link/unsafe-component-lifecycles)"]},{"key":"REACT_UNUSED_SNAPSHOT","name":"Return value of `getSnapshotBeforeUpdate()` should be used in a React class component","description":"This rule applies when the `getSnapshotBeforeUpdate()` lifecycle method is defined but the return value is not used in a React class component.\n\nThe return value of `getSnapshotBeforeUpdate()` is passed as the third `snapshot` parameter of `componentDidUpdate()`. It enables capturing up-to-date values right before committing an update to the DOM.\n\nTherefore, `getSnapshotBeforeUpdate()` becomes meaningless if the `snapshot` parameter is not used in `componentDidUpdate()`, and it could be unintended.\n\nIn particular, if `getSnapshotBeforeUpdate()` is defined without a `componentDidUpdate()` definition, React outputs a warning message.","severity":["Medium"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["react"],"examples":"import React from 'react';\n\nexport class Hello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { msg: 'hi' };\n    this.handleClick = this.handleClick.bind(this);\n    this.helloRef = React.createRef();\n  }\n  getSnapshotBeforeUpdate(prevProps, prevState) { // REACT_UNUSED_SNAPSHOT alarm because 'componentDidUpdate()' definition is missing.\n    if (prevState.msg !== this.state.msg) {\n      const hello = this.helloRef.current;\n      return hello.offsetLeft;\n    }\n    return null;\n  }\n  handleClick() {\n    if (this.state.msg === 'hi') {\n      this.setState({ msg: 'bye' });\n    } else {\n      this.setState({ msg: 'hi' });\n    }\n  }\n  render() {\n    return <div ref={this.helloRef} onClick={this.handleClick} style={{ position: \"absolute\" }}>{this.state.msg}</div>;\n  }\n}","examplesRevised":"import React from 'react';\n\nexport class Hello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { msg: 'hi' };\n    this.handleClick = this.handleClick.bind(this);\n    this.helloRef = React.createRef();\n  }\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    if (prevState.msg !== this.state.msg) {\n      const hello = this.helloRef.current;\n      return hello.offsetLeft;\n    }\n    return null;\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (snapshot !== null) {\n      this.helloRef.current.style.left = (snapshot + 10) + \"px\";\n    }\n  }\n  handleClick() {\n    if (this.state.msg === 'hi') {\n      this.setState({ msg: 'bye' });\n    } else {\n      this.setState({ msg: 'hi' });\n    }\n  }\n  render() {\n    return <div ref={this.helloRef} onClick={this.handleClick} style={{ position: \"absolute\" }}>{this.state.msg}</div>;\n  }\n}","cwe":[],"see":["[getSnapshotBeforeUpdate()](https://react.dev/reference/react/Component#getsnapshotbeforeupdate)","React Warning: Hello: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only."]},{"key":"REACT_USELESS_DEPENDENCY_OF_HOOK","name":"The dependency of a React Hook should not be specified with a newly created object","description":"This rule applies when the dependency of a React Hook is specified with a newly created object.\n\nThe dependencies array argument of a React Hook controls the execution of the Hook. When none of the dependencies change from the previous render, the Hook execution will be skipped.\n\nHowever, when a fresh object created at the current render is used as a dependency, the dependent Hook will always re-run because reference equality is used. This may not be a programmer's intent.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Efficient","tag":["react"],"examples":"import { useEffect } from 'react';\n\nexport function HelloColor(props) {\n  let style = { color: props.color };\n  useEffect(\n    () => { doSomething(style); },\n    [style] // REACT_USELESS_DEPENDENCY_OF_HOOK alarm because 'style' object is always newly created.\n  );\n  return <div style={style}>Hello</div>;\n}","examplesRevised":"import { useEffect, useMemo } from 'react';\n\nexport function HelloColor(props) {\n  let style = useMemo(() => ({ color: props.color }), [props.color]);\n  useEffect(\n    () => { doSomething(style); },\n    [style]\n  );\n  return <div style={style}>Hello</div>;\n}","cwe":[],"see":["[Built-in React Hooks](https://react.dev/reference/react/hooks)"]},{"key":"REACT_USELESS_FORWARD_REF","name":"The argument function of `React.forwardRef()` should use its second `ref` parameter","description":"This rule applies when the argument function of `React.forwardRef()` does not use its second `ref` parameter.\n\nThe purpose of applying `React.forwardRef()` is to forward the `ref` value to an inner element.\n\nTherefore, if the `ref` parameter is not used in the function body, `React.forwardRef()` call itself becomes pointless. It is recommended to check the function body and remove the `React.forwardRef()` call if it is indeed useless.\n\n**Note:** This rule is based on React 18 API specifications.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["react"],"examples":"import { forwardRef } from 'react';\n\nexport const MyButton = forwardRef(props => // REACT_USELESS_FORWARD_REF alarm\n  <button ref={props.ref}>\n    {props.children}\n  </button>\n);","examplesRevised":"import { forwardRef } from 'react';\n\nexport const MyButton = forwardRef((props, ref) =>\n  <button ref={ref}>\n    {props.children}\n  </button>\n);","cwe":[],"see":["[forwardRef()](https://18.react.dev/reference/react/forwardRef)","React Warning: forwardRef render functions accept exactly two parameters: props and ref. Did you forget to use the ref parameter?"]},{"key":"REACT_USELESS_MEMOIZE_HOOK","name":"React Memoize Hooks should not be used fruitlessly","description":"This rule applies when `useMemo` and `useCallback` Hooks are used fruitlessly.\n\n`useMemo` and `useCallback` are handy tools for memoizing values to avoid expensive computations and maintain referential equality.\n\nHowever, some caution is needed because they become useless in the following situations:\n\n 1. The second dependencies array argument is not provided. In this case, the memoization becomes meaningless because the value is always recomputed. It is recommended to provide the precise dependencies or an empty array if computing only once was intended.\n 2. The argument function of `useMemo` always returns the same value. The return value of the function is used as the memoized value. If it is always the same, there is no point in memoizing it. One possible case is that memoizing the function itself was intended instead of the return value. In that case, you should use `useCallback`.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Efficient","tag":["react"],"examples":"import { useMemo } from 'react';\n\nexport function Example1(props) {\n  let memoized = useMemo( // REACT_USELESS_MEMOIZE_HOOK alarm because the second argument is not provided.\n    () => ({ color: props.color })\n  );\n  return <div style={memoized}>Hello</div>;\n}\n\nexport function Example2(props) {\n  let memoized = useMemo( // REACT_USELESS_MEMOIZE_HOOK alarm because the argument function always returns the same value.\n    () => { props.handler(props.arg) },\n    [props.handler, props.arg]\n  );\n  return <div onClick={memoized}>Hello</div>;\n}","examplesRevised":"import { useCallback, useMemo } from 'react';\n\nexport function Example1(props) {\n  let memoized = useMemo(\n    () => ({ color: props.color }),\n    [props.color]\n  );\n  return <div style={memoized}>Hello</div>;\n}\n\nexport function Example2(props) {\n  let memoized = useCallback(\n    () => { props.handler(props.arg) },\n    [props.handler, props.arg]\n  );\n  return <div onClick={memoized}>Hello</div>;\n}","cwe":[],"see":["[useCallback()](https://react.dev/reference/react/useCallback)","[useMemo()](https://react.dev/reference/react/useMemo)","eslint-plugin-react-hooks warning: React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?"]},{"key":"REACT_USELESS_PROP_TYPES","name":"Useless `PropTypes` declaration should be removed","description":"This rule applies when a `PropTypes` declaration exists for a property but the property is not used for the implementation of the component.\n\nFor maintainability, it is recommended to remove useless `PropTypes` declarations.\n\n**Note:** This rule is based on React 17 API specifications.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["react"],"examples":"import PropTypes from 'prop-types';\n\nexport class Hello extends React.Component {\n  render() {\n    return <div>Hello, {this.props.name}</div>;\n  }\n}\n\nHello.propTypes = {\n  name: PropTypes.string,\n  age: PropTypes.number // REACT_USELESS_PROP_TYPES alarm because this property 'age' is not used.\n};","examplesRevised":"import PropTypes from 'prop-types';\n\nexport class Hello extends React.Component {\n  render() {\n    return <div>Hello, {this.props.name}</div>;\n  }\n}\n\nHello.propTypes = {\n  name: PropTypes.string\n};","cwe":[],"see":["[Typechecking with PropTypes](https://17.reactjs.org/docs/typechecking-with-proptypes.html)"]},{"key":"REACT_USELESS_SHOULD_COMPONENT_UPDATE","name":"Overridden `shouldComponentUpdate()` of a React class component should not always return a truthy value","description":"This rule applies when an overridden `shouldComponentUpdate()` method always returns a truthy value in a React class component.\n\nSince `shouldComponentUpdate()` defaults to `true`, it is useless if the overridden `shouldComponentUpdate()` method always returns a truthy value.\n\nIn this case, `shouldComponentUpdate()` method's logic is probably wrong by a developer's mistake or misunderstanding of the method.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["react"],"examples":"import React from 'react';\n\nexport class Hello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { greetName: 'Hi' };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState({ greetName: 'Bye' });\n  }\n  shouldComponentUpdate(nextProps, nextState) { // REACT_USELESS_SHOULD_COMPONENT_UPDATE alarm because this always returns true.\n    if (nextState.greetName !== this.state.greetName) {\n      return true;\n    }\n    return true;\n  }\n  render() {\n    return <div onClick={this.handleClick}>{this.state.greetName}</div>;\n  }\n}","examplesRevised":"import React from 'react';\n\nexport class Hello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { greetName: 'Hi' };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState({ greetName: 'Bye' });\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextState.greetName !== this.state.greetName) {\n      return true;\n    }\n    return false;\n  }\n  render() {\n    return <div onClick={this.handleClick}>{this.state.greetName}</div>;\n  }\n}","cwe":[],"see":["[shouldComponentUpdate()](https://react.dev/reference/react/Component#shouldcomponentupdate)"]},{"key":"REACT_VOID_ELEMENT_WITH_CHILDREN","name":"Void elements should neither have children nor `dangerouslySetInnerHTML` prop","description":"This rule applies when void elements have either children or `dangerouslySetInnerHTML` prop.\n\nHTML elements such as `<input />`, `<img />`, and `<br />` are void elements which are only self-closing without any content.\n\nTherefore, React will throw an exception if you set either children or `dangerouslySetInnerHTML` prop for a void element.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["react"],"examples":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <>\n    <input>Hello</input> {/* REACT_VOID_ELEMENT_WITH_CHILDREN alarm */}\n    <img dangerouslySetInnerHTML={{ __html: 'Hello' }} /> {/* REACT_VOID_ELEMENT_WITH_CHILDREN alarm */}\n  </>\n);","examplesRevised":"import { createRoot } from 'react-dom/client';\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <>\n    <input defaultValue=\"Hello\" />\n    <div dangerouslySetInnerHTML={{ __html: 'Hello' }} />\n  </>\n);","cwe":[],"see":["React Error: input is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."]},{"key":"REDUCE_EMPTY_ARRAY_WITHOUT_INIT","name":"An initial value should be provided at `Array.prototype.reduce()` if the array can be empty","description":"This rule applies when `Array.prototype.reduce()` is called on an empty array without an initial value.\n\nStarting from an initial value, `Array.prototype.reduce()` accumulates each element of an array using the reducer callback function. If no initial value is given, the first element of the array is used as the initial value.\n\nTherefore, a programmer should either provide an initial value or ensure the array is not empty. Otherwise, a `TypeError` exception will be thrown because the result cannot be computed.\n\nThis rule also applies to `Array.prototype.reduceRight()`.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":[""],"examples":"function sum(numbers) {\n  numbers = numbers || [];\n  return numbers.reduce(add); // REDUCE_EMPTY_ARRAY_WITHOUT_INIT alarm\n}","examplesRevised":"function sum(numbers) {\n  numbers = numbers || [];\n  return numbers.reduce(add, 0);\n}","cwe":[],"see":["[Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)","[Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight)"]},{"key":"REDUNDANT_COMPOUND_ASSIGN","name":"A reference is used on both sides of compound assignment operator","description":"This rule applies when a reference is used on both sides of compound assignment operator.\n\nIf there is a same reference on both sides of compound assignment operator, the compound operator applies to the reference itself.\n\nIt may be typo or intention. But it is recommended to use clearer and shorter code.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Clear","tag":[""],"examples":"// Example 1\nx -= x - y;\n\n// Example 2\nx += x + y;","examplesRevised":"// Example 1\nx = y;\n// or if typo\nx = x - y;\n\n// Example 2\nx = 2*x + y;\n// or if typo\nx = x + y;","cwe":[],"see":["[Assignment operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#assignment_operators)"]},{"key":"REFERENCE_BEFORE_LEXICAL_DECL","name":"Lexical variables (`let`, `const` and `class`) must be declared before they are used","description":"This rule applies when lexical variables to be declared with `let`, `const` or `class` are referenced before their declarations.\n\nReferencing the variables before their declarations throws a `ReferenceError` exception.\n\nTherefore, the lexical variables with `let`, `const` or `class` should be declared before they are referenced.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["es6"],"examples":"// Example 1\nx = 42; // REFERENCE_BEFORE_LEXICAL_DECL alarm\nlet x = 43;\n\n// Example 2\nconsole.log(y); // REFERENCE_BEFORE_LEXICAL_DECL alarm\nconst y = 42;\n\n// Example 3\nnew A(); // REFERENCE_BEFORE_LEXICAL_DECL alarm\nclass A {};","examplesRevised":"// Example 1\nlet x = 43;\n\n// Example 2\nconst y = 42;\nconsole.log(y);\n\n// Example 3\nclass A {};\nnew A();","cwe":[],"see":[]},{"key":"SAME_OPERAND_VALUE","name":"Operands always having the same value should be avoided","description":"This rule applies when the operation's result is fixed because operands have the same value always.\n\nFor example, the result of `x - x` is 0 for all values of `x` except `NaN`.\n\nIt is recommended to use the constant value because it is often indistinguishable from mistake.\n\nThe following operators are considered: `-`, `/`, `%`, `^`, `<`, `>`, `=`, `>=`, `==`, `!=`, `===`, `!==`","severity":["Medium"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":[],"examples":"// Example 1\nif (x) {\n  diff = x - y;\n} else {\n  x = y;\n  diff = x - y; // SAME_OPERAND_VALUE alarm. The result is always 0.\n}\n\n// Example 2\nif (value > maxValue) {\n  value = maxValue;\n  diff = value - maxValue; // SAME_OPERAND_VALUE alarm. The result is always 0.\n}","examplesRevised":"// Example 1\nif (x) {\n  diff = x - y;\n} else {\n  x = y;\n  diff = 0;\n}\n\n// Example 2\nif (value > maxValue) {\n  diff = value - maxValue;\n  value = maxValue;\n}","cwe":[],"see":[]},{"key":"SETTER_RETURN_VALUE","name":"Setter functions should not return values","description":"This rule applies when a setter function returns a value.\n\nSetter functions always return the passed argument and the return values in their body are ignored.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":[],"examples":"let language = {\n  set current(name) {\n    return this.log.push(name); // SETTER_RETURN_VALUE alarm because this return value will be ignored.\n  },\n  log: []\n}\nlet logCount = language.current = 'foo'; // logCount gets 'foo' because setter returns the passed argument.","examplesRevised":"let language = {\n  set current(name) {\n    this.log.push(name);\n  },\n  log: []\n}\nlanguage.current = 'foo';\nlet logCount = language.log.length;","cwe":[],"see":["[setter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set)"]},{"key":"SKIPPED_ITERATION_AFTER_SPLICE","name":"Loop iteration should not be skipped after removing an element with `Array.prototype.splice()`","description":"This rule applies when an element is removed using `Array.prototype.splice()` inside a loop and the element right after the removed one is skipped in the next iteration.\n\n`Array.prototype.splice()` shifts the remaining elements after removing an element. For example, `arr.splice(i, 1)` shifts the element at `i + 1` to `i`. If `i` is a loop counter, the shifted element will be skipped in the next iteration when the counter is incremented to `i + 1`.\n\nThis problem can be fixed by applying one of the following according to the intention of the element removal:\n\n * If removing all elements satisfying certain criteria was intended, decrement the loop index variable after doing `splice()` to avoid the skipping. See Example 1 below.\n * If removing only one element was intended, put `break` to terminate the loop once the intended element is removed. See Example 2 below.","severity":["Medium"],"type":"Code Quality","cleanCodeAttribute":"Complete","tag":[],"examples":"// Example 1\nfunction splitParts(str) {\n  let parts = str.split(' ');\n  for (let i = 0; i < parts.length; i++) {\n    // Empty strings may occur if there exist consecutive spaces.\n    if (parts[i] === '') {\n      // SKIPPED_ITERATION_AFTER_SPLICE alarm.\n      // Some empty strings are not removed if 3 or more consecutive spaces existed.\n      parts.splice(i, 1);\n    }\n  }\n  return parts;\n}\n\n// Example 2\nfunction removeItem(arr, id) {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].id === id) {\n      // SKIPPED_ITERATION_AFTER_SPLICE alarm\n      arr.splice(i, 1);\n    }\n  }\n}","examplesRevised":"// Example 1\nfunction splitParts(str) {\n  let parts = str.split(' ');\n  for (let i = 0; i < parts.length; i++) {\n    // Empty strings may occur if there exist consecutive spaces.\n    if (parts[i] === '') {\n      parts.splice(i, 1);\n      i--;\n    }\n  }\n  return parts;\n}\n\n// Example 2\nfunction removeItem(arr, id) {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].id === id) {\n      arr.splice(i, 1);\n      break;\n    }\n  }\n}","cwe":[],"see":["[Array.prototype.splice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)"]},{"key":"STRAY_SEMICOLON","name":"An extraneous semicolon should be avoided to prevent an unintentional logic change","description":"This rule applies when an extraneous semicolon causes an unintentional logic change.\n\nLogic may be changed unintentionally due to an extraneous semicolon inserted in front of `then` or `else` part of a conditional statement or body part of a loop statement.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Formatted","tag":["cwe"],"examples":"// Example 1\nif (cond); // STRAY_SEMICOLON alarm\n  doSomething();\n\n// Example 2\nwhile (++x <= 10) ; // STRAY_SEMICOLON alarm\n{\n  sum += x;\n}","examplesRevised":"// Example 1\nif (cond)\n  doSomething();\n\n// Example 2\nwhile (++x <= 10)\n{\n  sum += x;\n}","cwe":["670"],"see":[]},{"key":"STRICT_MODE_ARGS_CALLER_CALLEE","name":"`caller` and `callee` properties should not be accessed on `arguments` object for strict mode function","description":"This rule applies when `caller` and `callee` properties are accessed on `arguments` object allocated for calling strict mode function.\n\nBecause `arguments.caller` and `arguments.callee` make several code optimizations impossible, they were deprecated and the use of both throws a `TypeError` exception for strict mode function.\n\nIt also applies to the function's `caller` and `arguments` properties. (See 'STRICT_MODE_FUNC_PROPERTY' rule)","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"setTimeout(function () {\n  'use strict';\n  setTimeout(arguments.callee, 100); // STRICT_MODE_ARGS_CALLER_CALLEE alarm\n}, 100);","examplesRevised":"function callback() {\n  'use strict';\n  setTimeout(callback, 100);\n}\nsetTimeout(callback, 100);","cwe":[],"see":["[Strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)"]},{"key":"STRICT_MODE_ASSIGN_TO_READONLY_VAR","name":"In strict mode, read-only variables cannot be assigned","description":"This rule applies when a value is assigned to read-only variables in strict mode.\n\nThe read-only variables are as follows:\n 1. `import` bindings\n 2. Predefined global variables such as `undefined`, `NaN`, `Infinity`\n\nAny assignment to the above variables that silently fails in normal code will throw a `TypeError` exception in strict mode.\n\n**Note:** Applied for module code without `\"use strict\"` directive since module code is always strict mode code.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"// Example 1\nimport { A } from 'a';\nA = 1; // STRICT_MODE_ASSIGN_TO_READONLY_VAR alarm because it is module code.\n\n// Example 2\n'use strict';\nundefined = 1; // STRICT_MODE_ASSIGN_TO_READONLY_VAR alarm\nNaN = 2; // STRICT_MODE_ASSIGN_TO_READONLY_VAR alarm\nInfinity = 3; // STRICT_MODE_ASSIGN_TO_READONLY_VAR alarm","cwe":[],"see":["[Strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)"]},{"key":"STRICT_MODE_FUNC_PROPERTY","name":"`caller` and `arguments` properties should not be accessed on strict mode function","description":"This rule applies when strict mode function's `caller` and `arguments` properties are used.\n\n`caller` and `arguments` properties for accessing the call stack implies security problems that unsafe code can gain access to privileged functions. Therefore, accessing `caller` and `arguments` properties is prohibited for strict mode function objects.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"function f() {\n  'use strict';\n}\nf.caller; // STRICT_MODE_FUNC_PROPERTY alarm\nf.arguments; // STRICT_MODE_FUNC_PROPERTY alarm\nf.arguments = 1; // STRICT_MODE_FUNC_PROPERTY alarm","examplesRevised":"function f() {\n}\nf.caller;\nf.arguments;\nf.arguments = 1;","cwe":[],"see":["[Strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)"]},{"key":"STRICT_MODE_INVALID_THIS","name":"Strict mode function should not be called with invalid `this` access","description":"This rule applies when strict mode function is called with invalid `this` access.\n\nIn non-strict mode function, `this` is evaluated as global object when it is bound with `null` or `undefined` value as follows.\n\n 1. `f()`\n 2. `f.call(null)`\n\nBut in the strict mode function, `this` is evaluated as the same value as bound. Therefore, when accessing `this` in strict mode function with the above two cases, a `TypeError` exception is thrown.\n\n**Note:** A function in an ES module is implicitly in strict mode. So it is checked by this rule even if it does not have `use strict` statement.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["es6"],"examples":"function example1() {\n  function foo() {\n    'use strict';\n    this.a = 1; // 'TypeError' occurs because 'this' is undefined.\n  }\n  foo(); // STRICT_MODE_INVALID_THIS alarm\n}\n\nfunction example2() {\n  function foo() {\n    'use strict';\n    this.a = 1; // 'TypeError' occurs because 'this' is null.\n  }\n  foo.call(null); // STRICT_MODE_INVALID_THIS alarm\n}","examplesRevised":"function example1() {\n  function foo() {\n    'use strict';\n    this.a = 1;\n  }\n  const obj = { foo: foo };\n  obj.foo();\n}\n\nfunction example2() {\n  function foo() {\n    'use strict';\n    this.a = 1;\n  }\n  const obj = new foo();\n  foo.call(obj);\n}","cwe":[],"see":["[Strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)"]},{"key":"SWITCH_CASE_FALL_THROUGH","name":"Cases in `switch` statement should not fall through to the next one","description":"This rule applies when the execution of a case in `switch` statement continues to the following case.\n\nIt might be intentional, but it often is a programmer's mistake forgetting `break` statement.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["cwe"],"examples":"switch (foo) {\ncase 1: // SWITCH_CASE_FALL_THROUGH alarm\n  doSomething(1);\ncase 2:\n  doSomething(2);\n}","examplesRevised":"switch (foo) {\ncase 1:\n  doSomething(1);\n  break;\ncase 2:\n  doSomething(2);\n}","cwe":["484"],"see":["MISRA C:2004, Rule 15.2: An unconditional break statement shall terminate every non-empty switch clause","MISRA C:2012, Rule 16.3: An unconditional break statement shall terminate every switch-clause"]},{"key":"SWITCH_CASE_INCOMPATIBLE_TYPE","name":"`switch` and its cases should be compared with equal types","description":"This rule applies when `switch` and its cases are compared with different types. That is, `switch` statement has numeric string value and `case` statements have number value.\n\nBecause `switch` and its cases are compared with strict equality, cases with different types do not match. A programmer might incorrectly think numeric string and number match by implicit type conversion, but it's not the case.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"const s = '42';\nswitch (s) { // SWITCH_CASE_INCOMPATIBLE_TYPE alarm\ncase 0:\ncase 42:\n  matched = true;\n  break;\n}","examplesRevised":"const s = 42;\nswitch (s) {\ncase 0:\ncase 42:\n  matched = true;\n  break;\n}","cwe":[],"see":["[switch statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch)"]},{"key":"SYNTAX_ERROR","name":"JavaScript syntax error","description":"This rule applies when JavaScript file has syntax errors.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"// Example 1\nlett x; // SYNTAX_ERROR alarm\n\n// Example 2\nconst regexp = /?/g; // SYNTAX_ERROR alarm","examplesRevised":"// Example 1\nlet x;\n\n// Example 2\nconst regexp = /a?/g;","cwe":[],"see":[]},{"key":"TOO_MANY_ARGS","name":"Functions should not be called with extra arguments","description":"This rule applies when a function is called with extra arguments.\n\nFor code readability and maintainability, this is not recommended because the extra arguments are always ignored in the function execution.\n\nIt is recommended to remove the unnecessary arguments or refactor the function itself to process the extra arguments.\n\n**Note:** Not applied for empty functions and the case wherein `arguments` is used.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["cwe"],"examples":"function add(x, y) {\n  return x + y;\n}\nconst sum = add(1, 2, 3); // TOO_MANY_ARGS alarm because 'add' function takes only 2 arguments.","examplesRevised":"function add3(x, y, z) {\n  return x + y + z;\n}\nconst sum = add3(1, 2, 3);","cwe":["628","685"],"see":["MISRA C:2004, Rule 16.6: The number of arguments passed to a function shall match the number of parameters.","MISRA C:2012, Rule 8.2: Number of formal and actual parameters passed to function do not match"]},{"key":"TRIPLE_NEGATION_OPERATOR","name":"The logical negation operator should not be applied 3 or more times in a row","description":"This rule applies when the logical negation operator (`!`) is applied 3 or more times in a row.\n\nA triple negation like `!!!e` is equivalent to the single negation `!e`.\n\nTherefore, it is recommended to remove the unnecessary negation operations for readability and maintainability.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":[],"examples":"// Example 1\nfoo(!!!arg); // TRIPLE_NEGATION_OPERATOR alarm because 3 negations are used.\n\n// Example 2\nif ((cond1 && !(!!(cond2 && !cond3))) || cond4) { // TRIPLE_NEGATION_OPERATOR alarm because 3 negations are used.\n  bar();\n}","examplesRevised":"// Example 1\nfoo(!arg);\n\n// Example 2\nif ((cond1 && !(cond2 && !cond3)) || cond4) {\n  bar();\n}","cwe":[],"see":[]},{"key":"UNDEFINED_IMPORT","name":"Imported bindings should be defined and exported from the requested module","description":"This rule applies when an imported binding is not exported from the requested module.\n\nImporting the bindings not exported from the requested modules results in a `SyntaxError` exception when a module bundler is not used.\nWhen bundling with Webpack, a warning message is given and the name will be bound to `undefined`. Note that if the imported binding is not referenced at all, Webpack gives no warning.\n\n**Note:** This rule doesn't apply when the importing module uses TypeScript or Flow types, or the imported module is CommonJS.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["es6"],"examples":"// ./def.js\nexport const foo = 'foo is defined';\nclass bar {\n  // do something\n}\n\n// ./use.js\nimport {\n  notFoo, // UNDEFINED_IMPORT alarm\n  bar // UNDEFINED_IMPORT alarm\n} from './def.js';\nimport * as def from './def.js';\nconsole.log(def.bar); // UNDEFINED_IMPORT alarm","examplesRevised":"// ./def.js\nexport const foo = 'foo is defined';\nexport class bar {\n  // do something\n}\n\n// ./use.js\nimport {\n  foo,\n  bar\n} from './def.js';\nimport * as def from './def.js';\nconsole.log(def.bar);","cwe":[],"see":["[import declaration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)","[export declaration](https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export)","Uncaught SyntaxError: The requested module './def.js' does not provide an export named 'bar'"]},{"key":"UNEXPECTED_GLOBAL_DECL","name":"Unexpected global variable declaration should be avoided","description":"This rule applies when global variable is unexpectedly declared.\n\nAssigning a value to undeclared variable creates a new variable inside the global scope. Unexpectedly created global variables can cause memory leaks.\n\nFor example, unexpected global variables can be created in the following cases:\n 1. Initialize a loop variable without declaration.\n 2. Assign to an intermediate variable accessed only inside a loop without declaration.\n 3. In the middle of variable declaration list, comma is missing or semicolon is inserted by mistake at the end of variable declaration.","severity":["Medium"],"type":"Code Quality","cleanCodeAttribute":"Logical","tag":[],"examples":"// Example 1\nconst b = [1, 2, 3];\nfor (a = 0 /* UNEXPECTED_GLOBAL_DECL alarm */; a < b.length; a++) {}\n\n// Example 2\nfunction foo(x) {\n  for (let i = 0; i < x.length; i++) {\n    bar = getBar(x[i]); // UNEXPECTED_GLOBAL_DECL alarm\n    doSomething(bar);\n  }\n}\n\n// Example 3\nlet c = 1,\n    d = 2\n    e = 3, // UNEXPECTED_GLOBAL_DECL alarm\n    f = 4; // UNEXPECTED_GLOBAL_DECL alarm","examplesRevised":"// Example 1\nconst b = [1, 2, 3];\nfor (let a = 0; a < b.length; a++) {}\n\n// Example 2\nfunction foo(x) {\n  for (let i = 0; i < x.length; i++) {\n    const bar = getBar(x[i]);\n    doSomething(bar);\n  }\n}\n\n// Example 3\nlet c = 1,\n    d = 2,\n    e = 3,\n    f = 4;","cwe":[],"see":[]},{"key":"UNINITIALIZED_LOCAL_VAR","name":"Uninitialized local variables should not be accessed","description":"This rule applies when uninitialized local variables are accessed.\n\nIt is not likely to be a programmer's intent because accessing an uninitialized local variable results in `undefined` value.\n\n**Note:** This rule does not apply when the uninitialized access appears after the variable declaration because it is often intended. In contrast, when the access appears before the declaration, it is highly likely to be a bug and also impedes code readability.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[],"examples":"function foo() {\n  clearTimeout(x); // UNINITIALIZED_LOCAL_VAR alarm\n  var x = 1000;\n}","examplesRevised":"function foo() {\n  var x = 1000;\n  clearTimeout(x);\n}","cwe":[],"see":[]},{"key":"UNINVOKED_ARRAY_CALLBACK","name":"`Array` callback function should not be used for an array with empty slots.","description":"This rule applies when the `Array` functions having callback argument are used for an array with empty slots.\n\nWhen the `Array` constructor is called with a single number argument, an array with the specified number of empty slots (not actual `undefined` values) is constructed.\n\nIf a callback function is passed to the function of this array, the callback function is never invoked because the array has no actual elements.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":[""],"examples":"const list = new Array(5).map(_ => createElement()); // UNINVOKED_ARRAY_CALLBACK alarm","examplesRevised":"const list = new Array(5).fill().map(_ => createElement());","cwe":[],"see":["[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)"]},{"key":"UNREACHABLE_CODE","name":"Unreachable code should not be used","description":"This rule applies when code is unreachable.\n\nUnreachable statements after `return`, `throw`, `break` and `continue` are never executed, so that it might not be a programmer's intent.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Clear","tag":["cwe"],"examples":"function example1() {\n  doSomething();\n  return;\n  doOther(); // UNREACHABLE_CODE alarm\n}\n\nfunction example2() {\n  const x = doSomething();\n  return x;\n  doOther(); // UNREACHABLE_CODE alarm\n}","examplesRevised":"// In case when 'return' statement is a mistake\nfunction example1() {\n  doSomething();\n  doOther();\n}\n\n// In case when you do not need statements after 'return' statement\nfunction example2() {\n  const x = doSomething();\n  return x;\n}","cwe":["561"],"see":["MISRA C:2012, Rule 2.1: A project shall not contain unreachable code"]},{"key":"UNUSED_DECL","name":"Unused local variables and functions should be removed","description":"This rule applies when local variables and functions are declared but not used.\n\nFor maintainability, it is recommended to remove unused code. Also, it might be a mistake that a programmer forgets to use declared variables and functions.\n\n**Note:**\n 1. Not applied when the variable or function name starts with `_` because we regard it as intentionally unused.\n 2. Not applied when the value of a `const` variable holds `this` context because it is often used as boilerplate (e.g. `const self = this;`).\n 3. Not applied at test case code because unused declarations are usually harmless at tests and tend to occur more. Currently, BDD, TDD and QUnit style test cases are recognized.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":[],"examples":"function foo() {\n  function unusedFunction() { // UNUSED_DECL alarm because local variable 'unusedFunction' is not used.\n  }\n  let bar = 1;\n  let unusedVar; // UNUSED_DECL alarm because local variable 'unusedVar' is not used.\n  doSomething(bar);\n}","examplesRevised":"function foo() {\n  let bar = 1;\n  doSomething(bar);\n}","cwe":[],"see":[]},{"key":"UNUSED_EXPR","name":"Result of expressions should be used","description":"This rule applies when the result of expression is not used.\n\nUnused expression is meaningless, so that it might imply a mistake or unnecessary code.\n\n**Note:**\n 1. Not applied for the code in `try` statement because unused expression is often used to check an exception, e.g. `try { opener.document; } catch (e) {}`.\n 2. Not applied for `void` expression because it could be a programmer's intention that the value of the expression is not to be used.\n 3. Not applied for property or variable accesses appearing as separate statements because they are usually harmless and often intended for various purposes.","severity":["Low","Medium"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["cwe"],"examples":"function example1(x) {\n  x + 1; // UNUSED_EXPR alarm\n}\n\nfunction example2(x, y) {\n  x.p == y.p; // UNUSED_EXPR alarm\n}","examplesRevised":"function example1(x) {\n  return x + 1;\n}\n\nfunction example2(x, y) {\n  x.p = y.p;\n}","cwe":["398","482","665"],"see":["MISRA C:2004, Rule 14.2: All non-null statements shall either have at least one side effect however executed, or cause control flow to change"]},{"key":"UNUSED_IMPORT","name":"Unused imported bindings should be removed","description":"This rule applies when imported bindings are declared but not used.\n\nFor maintainability, it is recommended to remove unused code. Also, it might be a mistake that a programmer forgets to use declared imported bindings.\n\n**Note:** Not applied when the binding name starts with `_` (excluding `_` itself) because we regard it as intentionally unused.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["es6"],"examples":"import {\n  count,\n  increment // UNUSED_IMPORT alarm\n} from \"my-counter\";\nconsole.log(count);","examplesRevised":"// In case when the imported binding is actually not used\nimport {\n  count\n} from \"my-counter\";\nconsole.log(count);","cwe":[],"see":[]},{"key":"UNUSED_LABEL","name":"Unused label should be removed","description":"This rule applies when labels are declared but not used.\n\nFor maintainability, it is recommended to remove unused code. Also, it might be a mistake that a programmer forgets to use the declared label.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":[""],"examples":"outmost: { // UNUSED_LABEL alarm\n  while (true) {\n    if (finishNow) break;\n    else if (updateLastAndFinish) break;\n    updateState();\n  }\n  updateLast();\n}","examplesRevised":"outmost: {\n  while (true) {\n    if (finishNow) break outmost;\n    else if (updateLastAndFinish) break;\n    updateState();\n  }\n  updateLast();\n}","cwe":[],"see":[]},{"key":"UNUSED_PARAM","name":"Unused parameters of local function should be removed","description":"This rule applies when parameters are specified but not used in the body of a locally declared function.\n\nIn general, function parameters could be part of an API contract that cannot be changed easily.\n\nHowever, local functions do not have such restrictions because they are only used inside the declaring file. So, for code readability and maintainability, it is recommended to remove unused parameters of a local function and cleanup unnecessary code at call sites.\n\nAlso, it might be a mistake that a programmer forgets to use the specified parameters.\n\n**Note:**\n 1. Not applied when the parameter name starts with `_` because we regard it as intentionally unused.\n 2. Not applied for callback function.\n 3. Not applied when the call sites of a function cannot be determined statically.\n 4. Not applied when the call sites of a function may call other functions.\n 5. Not applied if the function is empty or uses `arguments` variable.\n 6. Not applied at test case code because unused parameters are usually harmless at tests. Currently, BDD, TDD and QUnit style test cases are recognized.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":[],"examples":"function foo(x) {\n  function helper(width, height) { // UNUSED_PARAM alarm on 'width' because it is not used in the function body.\n    doSomething(height);\n  }\n  let width = computeWidth(x);\n  let height = computeHeight(x);\n  helper(width, height);\n}","examplesRevised":"function foo(x) {\n  function helper(height) {\n    doSomething(height);\n  }\n  let height = computeHeight(x);\n  helper(height);\n}","cwe":[],"see":[]},{"key":"UNUSED_PRIVATE_FIELD","name":"Unused private fields in a class should be removed","description":"This rule applies when private fields and methods are declared in a class but not used in the class body.\n\nFor maintainability, it is recommended to remove unused code. Also, it might be a mistake that a programmer forgets to use declared fields and methods.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["es13"],"examples":"class Example {\n  #x = 1;\n  #unusedField = 2; // UNUSED_PRIVATE_FIELD alarm\n  #unusedMethod() { // UNUSED_PRIVATE_FIELD alarm\n  }\n  foo() {\n    doSomething(this.#x);\n  }\n}","examplesRevised":"class Example {\n  #x = 1;\n  foo() {\n    doSomething(this.#x);\n  }\n}","cwe":[],"see":["[Private elements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_elements)"]},{"key":"UNUSED_REQUIRE","name":"Unused `require()` should be removed","description":"This rule applies when a variable holding a `require()` result is not used.\n\nFor maintainability, it is recommended to remove unused module dependencies. If just module loading was intended, it is more explicit to require the module without variable assignment.\n\n**Note:** Not applied when the variable name starts with `_` (excluding `_` itself) because we regard it as intentionally unused.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["nodejs"],"examples":"let init = require(\"initialize\"); // UNUSED_REQUIRE alarm\nlet foo = require(\"foo\"); // UNUSED_REQUIRE alarm\nmodule.exports = function () { }","examplesRevised":"require(\"initialize\");\nmodule.exports = function () { }","cwe":[],"see":[]},{"key":"UNUSED_VAR_ASSIGN","name":"Dead variables should not be used","description":"This rule applies when a variable is assigned a value that is not used by subsequent code or is overwritten by another assignment without use.\n\nIt might imply a mistake or unnecessary code becuase the value becomes meaningless.\n\n**Note:**\n 1. Not applied when the variable name starts with `_` because we regard it as intentionally unused.\n 2. Not applied for the assignment with initialization values like \"\", '', 0, true, !0, false, !1, null, undefined, void ..., {}, [].\n 3. Not applied for the assignment saving `this` context because it is often used as boilerplate (e.g. `let self = this;`).\n 4. Not applied at test case code because unused values are usually harmless at tests and tend to occur more. Currently, BDD, TDD and QUnit style test cases are recognized.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["cwe"],"examples":"function foo(url) {\n  let target = url + \"user\" + user; // UNUSED_VAR_ASSIGN alarm\n  target = url.replace(/\\.|\\?|\\&|\\/|\\=|\\:|\\-|\\s/gi, \"\"); // UNUSED_VAR_ASSIGN alarm\n}","examplesRevised":"function foo(url) {\n  let target = url + \"user\" + user;\n  target = target.replace(/\\.|\\?|\\&|\\/|\\=|\\:|\\-|\\s/gi, \"\");\n  return target;\n}","cwe":["563"],"see":["MISRA C:2012, Rule 2.2: There shall be no dead code"]},{"key":"USELESS_ARRAY","name":"Elements added to an array should be used","description":"This rule applies when an array becomes useless because elements added to the array are never used.\n\nFor maintainability, it is recommended to remove useless arrays. Also, it might be a mistake that a programmer forgets to use the array.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":[],"examples":"// Example 1\nfunction makeMap(data) {\n  let map = new Map();\n  let keys = []; // USELESS_ARRAY alarm\n  for (let elem of data) {\n    let key = elem.key;\n    let value = elem.value;\n    keys.push(key);\n    map.set(key, value);\n  }\n  return map;\n}\n\n// Example 2\nfunction countIf(arr, predicate) {\n  let satisfying = []; // USELESS_ARRAY alarm because only 'length' property is used.\n  for (let elem of arr) {\n    if (predicate(elem)) {\n      satisfying.push(elem);\n    }\n  }\n  return satisfying.length;\n}","examplesRevised":"// Example 1\nfunction makeMap(data) {\n  let map = new Map();\n  for (let elem of data) {\n    let key = elem.key;\n    let value = elem.value;\n    map.set(key, value);\n  }\n  return map;\n}\n\n// Example 2\nfunction countIf(arr, predicate) {\n  let satisfying = 0;\n  for (let elem of arr) {\n    if (predicate(elem)) {\n      satisfying++;\n    }\n  }\n  return satisfying;\n}","cwe":[],"see":[]},{"key":"USELESS_ARROW_FUNC_BIND","name":"Arrow functions cannot be bound","description":"This rule applies when an arrow function is bound.\n\nArrow functions are always bound with the `this` object of the context at which the function is defined, and it cannot be changed.\nTherefore, the attempt to bind arrow functions with calling `bind()` or `call()` has no effect.\n\n**Note:** Not applied when the first argument of `bind()` is a dummy value like `undefined`, `null`, or `{}` because copying a function value may be intended.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["es6"],"examples":"function Adder(base) {\n  this.base = base;\n\n  const add = (a) => {\n    return this.base + a;\n  };\n\n  this.addBase = function (baseObj, a) {\n    return add.call(baseObj, a); // USELESS_ARROW_FUNC_BIND alarm because the bound function 'add' is an arrow function.\n  };\n}\n\nconst adder = new Adder(1);\nadder.addBase({ base: 2 }, 2); // Return value is 3","examplesRevised":"function Adder(base) {\n  this.base = base;\n\n  const add = (a) => {\n    return this.base + a;\n  };\n\n  this.addBase = function (baseObj, a) {\n    this.base = baseObj.base;\n    return add(a);\n  };\n}\n\nconst adder = new Adder(1);\nadder.addBase({ base: 2 }, 2); // Return value is 4","cwe":[],"see":["[Arrow function expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)"]},{"key":"USELESS_CALL","name":"`Function.prototype.call()` should not be used when `this` context remains the same","description":"This rule applies when `this` context remains the same after applying `Function.prototype.call()`.\n\nWhen an object method is called, its `this` context is normally set to the object on which it is called.\nThis behavior can be changed by invoking the method through `Function.prototype.call()`.\n\nHowever, when `Function.prototype.call()` does not change `this` context, it becomes useless. For example, `obj.foo.call(obj, 42)` is equivalent to `obj.foo(42)`.\nThis could happen as a result of refactoring or could be an actual bug. So, it is recommended to check the code and remove `Function.prototype.call()` if it is not needed.\n\nThis rule also applies to `Function.prototype.apply()` when the number of argument is 1.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":[""],"examples":"class Test {\n  data = 'data';\n  foo() {\n    console.log(this.data);\n  }\n  bar() {\n    this.foo.call(this); // USELESS_CALL alarm\n  }\n}","examplesRevised":"class Test {\n  data = 'data';\n  foo() {\n    console.log(this.data);\n  }\n  bar() {\n    this.foo();\n  }\n}","cwe":[],"see":["[Function.prototype.call()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call)","[Function.prototype.apply()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)","[this keyword](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this)"]},{"key":"USELESS_CATCH","name":"A `catch` clause should not just rethrow the exception","description":"This rule applies when a `catch` clause just rethrows the caught exception.\n\nThe `catch` clause is useless if the action taken is just rethrowing the same exception. Therefore, it is recommended to remove the `catch` clause or add comments (e.g., TODO et al.) for understanding the code.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":[""],"examples":"// USELESS_CATCH alarm at the 'catch' clause because it only rethrows the caught exception.\ntry {\n  riskyFunction();\n} catch (e) {\n  throw e;\n}","examplesRevised":"// Remove alarm by adding comments.\ntry {\n  riskyFunction();\n} catch (e) {\n  // riskyFunction can fail when ...\n  throw e;\n}","cwe":[],"see":["[try...catch statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try%2e%2e%2ecatch)"]},{"key":"USELESS_LOCAL_VAR_DELETE","name":"`delete` operator should not be used on local variables","description":"This rule applies when the `delete` operator is used on a local variable.\n\nIn JavaScript, `delete` operator does not immediately remove objects from memory. Instead, it just removes references to the objects. When all references to an object are gone, the object will be garbage-collected automatically.\n\nEspecially, local variables cannot be explicitly deleted and applying `delete` operator will have no effect. If the intention is to remove references, values like `null` should be assigned instead.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":[""],"examples":"function foo(x) {\n  let obj = getObject(x);\n  doSomething(obj);\n  delete obj; // USELESS_LOCAL_VAR_DELETE alarm because local variable 'obj' cannot be deleted.\n  doOther();\n}","examplesRevised":"function foo(x) {\n  let obj = getObject(x);\n  doSomething(obj);\n  obj = null;\n  doOther();\n}","cwe":[],"see":["[delete operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete)"]},{"key":"USELESS_LOOP","name":"Loop should not be used when only a single iteration is needed","description":"This rule applies when an unconditional `break`, `return` or `throw` is used inside a loop body.\n\nWhen a control flow statement like `break`, `return`, or `throw` statement is used in a loop without a condition, the enclosing loop will not repeat but execute only once.\n\nFor code readability and maintainability, it is recommended to use simpler `if` statement instead of the loop that executes only once. Also, it might be a mistake that the programmer forgets to check a condition before executing the control flow statement.\n\n**Note:** Not applied for `for-in` or `for-of` loop because this pattern is often used for checking an empty array or object.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":[],"examples":"// Example 1\nfunction doSomethingIfArrIsNotEmpty(arr) {\n  for (let i = 0; i < arr.length; i++) { // USELESS_LOOP alarm because the enclosing 'for' can be refactored to 'if'.\n    doSomething(arr[i]);\n    break;\n  }\n}\n\n// Example 2\nfunction getEnclosingTable(tdElem) {\n  let elem = tdElem;\n  while (elem.parentNode) { // USELESS_LOOP alarm because a condition is missing at the 'return' statement.\n    elem = elem.parentNode;\n    return elem;\n  }\n  throw new Error(\"No enclosing table\");\n}","examplesRevised":"// Example 1\nfunction doSomethingIfArrIsNotEmpty(arr) {\n  if (arr.length > 0) {\n    doSomething(arr[0]);\n  }\n}\n\n// Example 2\nfunction getEnclosingTable(tdElem) {\n  let elem = tdElem;\n  while (elem.parentNode) {\n    elem = elem.parentNode;\n    if (elem.tagName === \"TABLE\") {\n      return elem;\n    }\n  }\n  throw new Error(\"No enclosing table\");\n}","cwe":[],"see":[]},{"key":"VUE_ASSIGN_TO_READONLY_PROPERTY","name":"Read-only property of Vue should not be assigned","description":"This rule applies when a value is assigned to the read-only properties of Vue.\n\nThe read-only properties of Vue are as follows:\n 1. `$data`\n 2. `$props`\n 3. `$el`\n 4. `$options`\n 5. `$parent`\n 6. `$root`\n 7. `$slots`\n 8. `$refs`\n 9. `$attrs`\n 10. `app.config`\n\nAssignment to the above properties will be ignored or may cause an unintended behavior. Also, Vue outputs a warning message.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<script>\nexport default {\n  data() {\n    return { msg: '' };\n  },\n  mounted() {\n    this.$data = { msg: 'hi' }; // VUE_ASSIGN_TO_READONLY_PROPERTY alarm because 'this.$data' is read-only.\n  }\n}\n</script>","examplesRevised":"<script>\nexport default {\n  data() {\n    return { msg: '' };\n  },\n  mounted() {\n    this.msg = 'hi'; // Use nested data properties instead.\n  }\n}\n</script>","cwe":[],"see":["[Component Instance Properties](https://vuejs.org/api/component-instance.html)","[Application API: app.config](https://vuejs.org/api/application.html#app-config)","[Vue warn]: Attempting to mutate public property \"$data\". Properties starting with $ are reserved and readonly.","[Vue warn]: app.config cannot be replaced. Modify individual options instead."]},{"key":"VUE_BAD_API_RETURN_VALUE","name":"Return value of function-typed Vue options should be a valid type","description":"This rule applies when the return value of a function-typed Vue option is invalid.\n\nIf an invalid value is returned from a function-typed Vue option, it may cause a problem when Vue uses the value. Even when no immediate problem occurs, the value becomes meaningless.\n\nThe options which cause problem for an invalid return value are listed below with the valid return values:\n\n 1. `setup()`: `Object`, `Function`, or `undefined`\n 2. `data()`: `Object`\n 3. `errorCaptured()` lifecycle hook: `false`, `undefined`, or `null`\n\nAlso, this rule checks the following lifecycle hooks which need no return value:\n\n 1. `beforeCreate()`\n 2. `created()`\n 3. `beforeMount()`\n 4. `mounted()`\n 5. `beforeUpdate()`\n 6. `updated()`\n 7. `beforeUnmount()`\n 8. `unmounted()`\n 9. `renderTracked()`\n 10. `renderTriggered()`\n 11. `activated()`\n 12. `deactivated()`\n\nIn the above cases, returning a value has no effect.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<script>\nexport default {\n  data() {\n    return 'data'; // VUE_BAD_API_RETURN_VALUE alarm because 'data()' does not return an object.\n  },\n  beforeCreate() {\n    return true; // VUE_BAD_API_RETURN_VALUE alarm because 'beforeCreate()' does not need a return value.\n  }\n}\n</script>","examplesRevised":"<script>\nexport default {\n  data() {\n    return { msg: 'hi' };\n  },\n  beforeCreate() {\n    // do something\n  }\n}\n</script>","cwe":[],"see":["[Composition API: setup()](https://vuejs.org/api/composition-api-setup.html)","[Options API: data()](https://vuejs.org/api/options-state.html#data)","[Options API: Lifecycle](https://vuejs.org/api/options-lifecycle.html)"]},{"key":"VUE_BAD_ARROW_FUNC","name":"Arrow function with `this` accesses should not be used as a Vue instance option","description":"This rule applies when an arrow function with `this` accesses is used as a Vue instance option.\n\nVue automatically binds the following function-typed options when creating a Vue instance:\n\n 1. Getter/setter functions of `computed` property\n 2. Properties of `methods` and `watch` options\n 3. `render()` option\n 4. Lifecycle methods\n\nHowever, arrow functions are always bound with the `this` object of the context at which the function is defined, and it cannot be changed afterwards.\nTherefore, `this` object will not be bound with the Vue instance when arrow functions are used to define the above options.\n\nTo define the above options correctly, you can use normal function definition syntax instead of arrow functions.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<script>\nexport default {\n  data() {\n    return { msg: 'hello' };\n  },\n  computed: {\n    foo: () => {\n      // VUE_BAD_ARROW_FUNC alarm because 'foo' getter function of 'computed' property is defined with arrow function and has 'this' access.\n      return this.msg + ' hi';\n    },\n    bar: {\n      get: () => {\n        // VUE_BAD_ARROW_FUNC alarm because 'bar' getter function of 'computed' property is defined with arrow function and has 'this' access.\n        return this.msg + ' bar';\n      }\n    }\n  },\n  created: () => {\n    // VUE_BAD_ARROW_FUNC alarm because 'created' lifecycle method is defined with arrow function and has 'this' access.\n    this.msg += ' created';\n  }    \n}\n</script>","examplesRevised":"<script>\nexport default {\n  data() {\n    return { msg: 'hello' };\n  },\n  computed: {\n    foo() {\n      return this.msg + ' hi';\n    },\n    bar: {\n      get() {\n        return this.msg + ' bar';\n      }\n    }\n  },\n  created: function () {\n    this.msg += ' created';\n  }\n}\n</script>","cwe":[],"see":["[Options API: computed](https://vuejs.org/api/options-state.html#computed)","[Options API: methods](https://vuejs.org/api/options-state.html#methods)","[Options API: watch](https://vuejs.org/api/options-state.html#watch)","[Options API: render()](https://vuejs.org/api/options-rendering.html#render)","[Options API: Lifecycle](https://vuejs.org/api/options-lifecycle.html)"]},{"key":"VUE_BAD_COMPONENT_NAME","name":"Vue component name should be defined with valid string","description":"This rule applies when an invalid string is used as a Vue component name.\n\nVue component is not registered when you use invalid name for it. Also Vue outputs a warning message.\n\nIt can be applied to the following:\n\n 1. HTML or SVG tag names are used (e.g. `header`).\n 2. Vue's built-in component `slot` or `component` is used.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"import { createApp } from 'vue';\nimport App from './App.vue';\nimport Header from './components/Header.vue';\n\nconst app = createApp(App);\napp.component('header', Header); // VUE_BAD_COMPONENT_NAME alarm because 'header' is a HTML tag name.","examplesRevised":"import { createApp } from 'vue';\nimport App from './App.vue';\nimport TheHeader from './components/TheHeader.vue';\n\nconst app = createApp(App);\napp.component('TheHeader', TheHeader);","cwe":[],"see":["[Vue warn]: Do not use built-in or reserved HTML elements as component id: header"]},{"key":"VUE_BAD_DIRECTIVE_FORMAT","name":"Vue directive should be defined with a right format","description":"This rule applies when a Vue directive is defined with a wrong format.\n\nVue provides a specific format for each directive.\nIf a directive is wrongly defined as follows, the directive is ignored and malfunctions may occur:\n\n 1. An argument is used at the directive which cannot have any argument (e.g. <span v-text:aaa=\"foo\" />).\n 2. A modifier is used at the directive which cannot have any modifier (e.g. <span v-text.aaa=\"foo\" />).\n 3. An unsupported modifier is used (e.g. <input v-model.ltrim=\"msg\">).\n 4. An attribute value is missing, but it is required at the directive (e.g. <span v-text />).\n 5. An attribute value is defined at the directive which requires no value (e.g. <span v-once=\"foo\" />).\n 6. A modifier is used at the `v-on` directive without an argument (e.g. <span v-on.once=\"foo\" />).","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<template>\n  <input v-model.ltrim=\"msg\"> <!-- VUE_BAD_DIRECTIVE_FORMAT alarm because 'ltrim' modifier is not supported for 'v-model' directive. -->\n  <div v-if=\"sayHi\">Hi</div>\n  <div v-else=\"sayBye\">Bye</div> <!-- VUE_BAD_DIRECTIVE_FORMAT alarm because value is not needed for 'v-else' directive. -->\n</template>","examplesRevised":"<template>\n  <input v-model.trim=\"msg\">\n  <div v-if=\"sayHi\">Hi</div>\n  <div v-else-if=\"sayBye\">Bye</div>\n</template>","cwe":[],"see":["[Built-in Directives](https://vuejs.org/api/built-in-directives.html)"]},{"key":"VUE_BAD_DIRECTIVE_VALUE","name":"Vue directive should be defined with values of correct types","description":"This rule applies when values of wrong types are used at Vue directives.\n\nVue requires specific types of values for some directives.\nIf wrong values are used as follows, unintended behaviors may occur:\n\n 1. A non-function value is used at `v-on` directive. In this case, a `TypeError` exception is thrown when the corresponding event fires. See Example 1 below.\n 2. A non-object value is used at `v-bind` or `v-on` directive without an argument. In this case, the directive is ignored and Vue outputs a warning message. See Example 2 below.\n 3. A function is used as the iteration source of `v-for` directive. In this case, the directive is ignored and no iteration occurs.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<template>\n  <!-- Example 1 -->\n  <a href=\"http://foo.com\" @click=\"false\"> <!-- VUE_BAD_DIRECTIVE_VALUE alarm because 'false' is not a function. -->\n    foo.com\n  </a>\n\n  <!-- Example 2 -->\n  <MyComponent v-bind=\"getProps()\"> <!-- VUE_BAD_DIRECTIVE_VALUE alarm because the return value of 'getProps()' is not an object. -->\n    Hello\n  </MyComponent>\n\n  <!-- Example 3 -->\n  <div v-for=\"item in getItems\" :key=\"item.id\"> <!-- VUE_BAD_DIRECTIVE_VALUE alarm because 'getItems' is a function. -->\n    {{ item.name }}\n  </div>\n</template>\n\n<script>\nexport default {\n  methods: {\n    getProps() {\n      return 42;\n    },\n    getItems() {\n      return [\n        { id: 1, name: \"foo\" },\n        { id: 2, name: \"bar\" }\n      ];\n    }\n  }\n}\n</script>","examplesRevised":"<template>\n  <!-- Example 1 -->\n  <a href=\"http://foo.com\" @click.prevent>\n    foo.com\n  </a>\n\n  <!-- Example 2 -->\n  <MyComponent v-bind=\"getProps()\">\n    Hello\n  </MyComponent>\n\n  <!-- Example 3 -->\n  <div v-for=\"item in getItems()\" :key=\"item.id\">\n    {{ item.name }}\n  </div>\n</template>\n\n<script>\nexport default {\n  methods: {\n    getProps() {\n      return {\n        prop1: 42,\n        prop2: 42\n      }\n    },\n    getItems() {\n      return [\n        { id: 1, name: \"foo\" },\n        { id: 2, name: \"bar\" }\n      ];\n    }\n  }\n}\n</script>","cwe":[],"see":["[Built-in Directives](https://vuejs.org/api/built-in-directives.html)","[Vue warn]: v-on with no argument expects an object value."]},{"key":"VUE_BAD_DYNAMIC_COMPONENT","name":"Vue dynamic component should have a dynamically bound `is` attribute","description":"This rule applies when a Vue dynamic component does not have a proper `is` attribute.\n\nSince dynamic component is used to dynamically choose a component, dynamic `is` attribute is essential.\n\n* If a dynamic component does not have an `is` attribute, Vue considers it as an unknown custom element.\n* If a dynamic component has the attribute, but a static one, it is likely that `v-bind` directive on the attribute is missing.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<script setup>\nimport SayHi from './SayHi.vue';\nimport SayBye from './SayBye.vue';\n\nconst currentMsg = Math.random() > 0.5 ? SayHi : SayBye;\n</script>\n\n<template>\n  <component is=\"currentMsg\" /> <!-- VUE_BAD_DYNAMIC_COMPONENT alarm -->\n</template>","examplesRevised":"<script setup>\nimport SayHi from './SayHi.vue';\nimport SayBye from './SayBye.vue';\n\nconst currentMsg = Math.random() > 0.5 ? SayHi : SayBye;\n</script>\n\n<template>\n  <component v-bind:is=\"currentMsg\" />\n</template>","cwe":[],"see":["[Built-in Special Elements: <component>](https://vuejs.org/api/built-in-special-elements.html#component)"]},{"key":"VUE_BAD_EVENT_HANDLER_RETURN_FALSE","name":"`return false` should not be used in a Vue event handler","description":"This rule applies when the return value of a Vue event handler is `false`.\n\nUnlike vanilla HTML, returning `false` from a DOM event handler does not prevent event propagation or default behavior in Vue. Instead, `stopPropagation()` or `preventDefault()` should be explicitly called on the event object received as a parameter.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<template>\n  <a href=\"http://foo.com\" @click=\"handleClick\">\n    foo.com\n  </a>\n</template>\n\n<script>\nexport default {\n  props: ['disabled'],\n  methods: {\n    handleClick() {\n      if (this.disabled) {\n        return false; // VUE_BAD_EVENT_HANDLER_RETURN_FALSE alarm\n      }\n    }\n  }\n}\n</script>","examplesRevised":"<template>\n  <a href=\"http://foo.com\" @click=\"handleClick\">\n    foo.com\n  </a>\n</template>\n\n<script>\nexport default {\n  props: ['disabled'],\n  methods: {\n    handleClick(event) {\n      if (this.disabled) {\n        event.preventDefault();\n      }\n    }\n  }\n}\n</script>","cwe":[],"see":["[Built-in Directives: v-on](https://vuejs.org/api/built-in-directives.html#v-on)","[Event Handling](https://vuejs.org/guide/essentials/event-handling)"]},{"key":"VUE_BAD_HTML_SYNTAX","name":"HTML syntax error in Vue template","description":"This rule applies when a Vue template has HTML syntax errors.\n\nWhen a Vue template has HTML syntax errors, DOM rendering is generally not blocked because HTML has extensive recovery mechanism. However, the rendered output can be different from what is intended. So, it is recommended to fix those syntax errors.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<template>\n  <div v-custom\"a\"> <!-- VUE_BAD_HTML_SYNTAX alarm because an equals sign is missing in the attribute. -->\n    &ndsp; <!-- VUE_BAD_HTML_SYNTAX alarm because `ndsp` is unknown named character reference. -->\n  </div v-custom=\"b\"> <!-- VUE_BAD_HTML_SYNTAX alarm because the end tag has an attribute. -->\n</template>","examplesRevised":"<template>\n  <div v-custom=\"a\">\n    &nbsp;\n  </div>\n</template>","cwe":[],"see":["[HTML Parse Errors](https://html.spec.whatwg.org/multipage/parsing.html#parse-errors)"]},{"key":"VUE_BAD_MOUNT_ELEMENT","name":"Vue instance should be mounted on a proper element","description":"This rule applies when the mounting point of a Vue instance is inappropriate.\n\nThe mount element provided as a value of `el` option or an argument of `$mount()` will be replaced with Vue-generated DOM. It is therefore not recommended to mount a Vue instance on `<html>` or `<body>` element. In this case, Vue does not render the element and outputs a warning message.\n\n**Note:** This rule is based on Vue 2.x API specifications.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<!-- HTML file -->\n<html>\n  <head></head>\n  <body>\n  </body>\n</html>\n\n// JavaScript file\nimport Vue from 'vue';\n\n// Example 1\nnew Vue({\n  el: 'html', // VUE_BAD_MOUNT alarm\n  template: '<div>Hello!</div>'\n});\n\n// Example 2\nconst MyComponent = Vue.extend({\n  template: '<div>Hello!</div>'\n});\nnew MyComponent().$mount('body'); // VUE_BAD_MOUNT alarm","examplesRevised":"<!-- HTML file -->\n<html>\n  <head></head>\n  <body>\n    <div id=\"app1\"></div>\n    <div id=\"app2\"></div>\n  </body>\n</html>\n\n// JavaScript file\nimport Vue from 'vue';\n\n// Example 1\nnew Vue({\n  el: '#app1',\n  template: '<div>Hello!</div>'\n});\n\n// Example 2\nconst MyComponent = Vue.extend({\n  template: '<div>Hello!</div>'\n});\nnew MyComponent().$mount('#app2');","cwe":[],"see":["[el option](https://v2.vuejs.org/v2/api/#el)","[vm.$mount](https://v2.vuejs.org/v2/api/#vm-mount)","[Vue warn]: Do not mount Vue to <html> or <body> - mount to normal elements instead."]},{"key":"VUE_BAD_PROP_DECL","name":"Vue prop should be declared properly","description":"This rule applies when a Vue prop is not declared properly in the `props` option as follows:\n\n * The right-hand side of a prop declaration can be either `null`, a constructor function (e.g. `String`, `Number`), an array of constructors, or an object with validation requirements. If other value is given, prop validation will not work properly. See Example 1 below.\n * An object with validation requirements can have properties like `type`, `default`, `validator` or `required`. If a typo exists in property names, prop validation may not work as intended. See Example 2 below.\n * A `type` property in the requirement object can have either `null`, `undefined`, a constructor, or an array of constructors. See Example 3 below.\n * In order to avoid the prop validation, it is recommended to use `null` or `undefined` instead of other falsy values because a programmer can confuse it as a default value. See Example 4 below.\n * An object value should not be directly used as the default value of a prop. You should use a factory function that returns the object. See Example 5 below.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<script>\nexport default {\n  props: {\n    // Example 1\n    prop1_1: 42, // VUE_BAD_PROP_DECL alarm\n    prop1_2: 'String', // VUE_BAD_PROP_DECL alarm\n    prop1_3: String | Number, // VUE_BAD_PROP_DECL alarm\n\n    // Example 2\n    prop2: {\n      Type: String, // VUE_BAD_PROP_DECL alarm\n      Default: 'success', // VUE_BAD_PROP_DECL alarm\n      validate: function (value) { // VUE_BAD_PROP_DECL alarm\n        return ['success', 'warning', 'danger'].indexOf(value) !== 1\n      },\n      require: true // VUE_BAD_PROP_DECL alarm\n    },\n\n    // Example 3\n    prop3: {\n      type: 'String' // VUE_BAD_PROP_DECL alarm\n    },\n\n    // Example 4\n    prop4: '', // VUE_BAD_PROP_DECL alarm\n\n    // Example 5\n    prop5: {\n      type: Array,\n      default: [] // VUE_BAD_PROP_DECL alarm\n    }\n  }\n}\n</script>","examplesRevised":"<script>\nexport default {\n  props: {\n    // Example 1\n    prop1_1: {\n      type: Number,\n      default: 42\n    },\n    prop1_2: String,\n    prop1_3: [String, Number],\n\n    // Example 2\n    prop2: {\n      type: String,\n      default: 'success',\n      validator: function (value) {\n        return ['success', 'warning', 'danger'].indexOf(value) !== 1\n      },\n      required: true\n    },\n\n    // Example 3\n    prop3: {\n      type: String\n    },\n\n    // Example 4\n    prop4: null,\n\n    // Example 5\n    prop5: {\n      type: Array,\n      default: function () {\n        return [];\n      }\n    }\n  }\n}\n</script>","cwe":[],"see":["[Prop Validation](https://vuejs.org/guide/components/props.html#prop-validation)"]},{"key":"VUE_BAD_PROPERTY_SET_DELETE","name":"Vue's global API `Vue.set` and `Vue.delete` should be called with proper argument","description":"This rule applies when `Vue.set()` or `Vue.delete()` is called with wrong arguments.\n\nThe first argument of `Vue.set()` or `Vue.delete()` cannot be a Vue instance, or the root data object of a Vue instance. In this case, Vue outputs a warning message and ignores the function call.\n\nVue does not allow dynamically adding or deleting root-level reactive properties to an already created instance.\n\n * In order to modify the value of a root-level property at runtime, declare the property upfront in `data` option and modify it by assigning the value instead of calling the API.\n * In order to add or delete reactive properties at runtime, make a wrapper object and call `Vue.set()` or `Vue.delete()` method on the object.\n\n**Note:** This rule is based on Vue 2.x API specifications.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<template>\n  <div>\n    <input class=\"input\" type=\"text\" v-model=\"inputString\">\n    <button @click=\"storeString\">+</button>\n    <button @click=\"resetString\">-</button>\n    <p>\n      {{ this.$data }}\n    </p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      inputString: ''\n    }\n  },\n  methods: {\n    storeString() {\n      // NOTE: this.$set is an alias to the global Vue.set\n      this.$set(this, 'storedString', this.inputString); // VUE_BAD_PROPERTY_SET_DELETE alarm\n    },\n    resetString() {\n      // NOTE: this.$delete is an alias to the global Vue.delete\n      this.$delete(this, 'storedString'); // VUE_BAD_PROPERTY_SET_DELETE alarm\n    }\n  }\n}\n</script>","examplesRevised":"<template>\n  <div>\n    <input class=\"input\" type=\"text\" v-model=\"inputString\">\n    <button @click=\"storeString\">+</button>\n    <button @click=\"resetString\">-</button>\n    <p>\n      {{ this.$data }}\n    </p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      inputString: '',\n      storedString: ''\n    }\n  },\n  methods: {\n    storeString() {\n      // NOTE: this.$set is an alias to the global Vue.set\n      this.storedString = this.inputString;\n    },\n    resetString() {\n      // NOTE: this.$delete is an alias to the global Vue.delete\n      this.storedString = null;\n    }\n  }\n}\n</script>","cwe":[],"see":["[Vue.set()](https://v2.vuejs.org/v2/api/#Vue-set)","[Vue.delete()](https://v2.vuejs.org/v2/api/#Vue-delete)","[Reactivity in Depth](https://v2.vuejs.org/v2/guide/reactivity.html)","[Vue warn] Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option.","[Vue warn] Avoid deleting properties on a Vue instance or its root $data - just set it to null."]},{"key":"VUE_BAD_TRANSITION_GROUP","name":"`<transition-group>` component of Vue should be used properly","description":"This rule applies when `<transition-group>` component of Vue is wrongly used.\n\nIt can be applied to the following cases:\n\n 1. `<transition>` is used on multiple elements. In this case, Vue renders only the first child and ignores the rest. You can fix this problem by applying one of the following:\n  * Use `<transition-group>` instead of `<transition>` if the effect is intended for each child separately.\n  * Use a wrapper element for the children if the effect is intended for the children as a whole.\n  * Select one child by using conditional directives like `v-if`.\n 2. Elements inside `<transition-group>` do not have `key` attribute. In this case, the elements without `key` will not be rendered.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<template>\n  <!-- Example 1 -->\n  <transition> <!-- VUE_BAD_TRANSITION_GROUP alarm because '<transition>' has three elements as children. -->\n    <button>Edit</button>\n    <button>Save</button>\n    <button>Cancel</button>\n  </transition>\n\n  <!-- Example 2 -->\n  <transition name=\"list\"> <!-- VUE_BAD_TRANSITION_GROUP alarm because the child element has 'v-for'. That means, it will be rendered as multiple elements. -->\n    <span v-for=\"item in items\" v-bind:key=\"item.id\" class=\"list-item\">\n      {{ item }}\n    </span>\n  </transition>\n\n  <!-- Example 3 -->\n  <transition-group name=\"list\" tag=\"p\">\n    <span v-for=\"item in items\" class=\"list-item\"> <!-- VUE_BAD_TRANSITION_GROUP alarm because '<span>' does not have 'key' attribute. -->\n      {{ item }}\n    </span>\n  </transition-group>\n</template>","examplesRevised":"<template>\n  <!-- Example 1 -->\n  <transition>\n    <button v-if=\"docState === 'saved'\">Edit</button>\n    <button v-else-if=\"docState === 'edited'\">Save</button>\n    <button v-else-if=\"docState === 'editing'\">Cancel</button>\n  </transition>\n\n  <!-- Example 2 -->\n  <transition-group name=\"list\">\n    <span v-for=\"item in items\" v-bind:key=\"item.id\" class=\"list-item\">\n      {{ item }}\n    </span>\n  </transition-group>\n\n  <!-- Example 3 -->\n  <transition-group name=\"list\" tag=\"p\">\n    <span v-for=\"item in items\" v-bind:key=\"item.id\" class=\"list-item\">\n      {{ item }}\n    </span>\n  </transition-group>\n</template>","cwe":[],"see":["[Built-in Components: <Transition>](https://vuejs.org/api/built-in-components.html#transition)","[Built-in Components: <TransitionGroup>](https://vuejs.org/api/built-in-components.html#transitiongroup)","[Vue error]: <Transition> expects exactly one child element or component.","[Vue warn]: <TransitionGroup> children must be keyed."]},{"key":"VUE_DEPRECATED_FEATURE","name":"Deprecated features of Vue should not be used","description":"This rule applies when a deprecated or removed feature of Vue is used.\n\nCurrently, this rule checks the following features that are removed or replaced in Vue 3.0:\n\n 1. Global API\n  * `new Vue()` (replaced by `createApp()`)\n  * `Vue.component()` (replaced by `app.component()`)\n  * `Vue.directive()` (replaced by `app.directive()`)\n  * `Vue.mixin()` (replaced by `app.mixin()`)\n  * `Vue.use()` (replaced by `app.use()`)\n  * `Vue.config` (replaced by `app.config`)\n  * `Vue.observable()` (replaced by `reactive()`)\n  * `Vue.extend()`\n  * `Vue.filter()`\n  * `Vue.set()`\n  * `Vue.delete()`\n 2. Config properties\n  * `ignoredElements` (replaced by `isCustomElement()`)\n  * `devtools`\n  * `keyCodes`\n  * `productionTip`\n 3. Options\n  * `el` (replaced by `app.mount()`)\n  * `propsData` (replaced by the second argument of `createApp()`)\n  * `beforeDestroy()` (replaced by `beforeUnmount()`)\n  * `destroyed()` (replaced by `unmounted()`)\n  * `renderError()`\n  * `filters`\n  * `functional`\n  * `model`\n 4. Instance methods\n  * `$mount()` (replaced by `app.mount()`)\n  * `$destroy()`\n  * `$on()`\n  * `$once()`\n  * `$off()`\n  * `$set()`\n  * `$delete()`\n 5. Instance properties\n  * `$listeners` (merged into `$attrs`)\n  * `$scopedSlots` (merged into `$slots`)\n  * `$children`\n 6. Special attributes\n  * `slot-scope` (replaced by `v-slot`)\n  * `inline-template`\n 7. Directive modifiers\n  * `v-bind.sync` (replaced by `v-model` with an argument)\n  * `v-bind.prop`\n  * `v-on.native`\n  * The numeric key codes of `v-on`\n 8. Custom directive hooks\n  * `bind()` (replaced by `beforeMount()`)\n  * `inserted()` (replaced by `mounted()`)\n  * `componentUpdated()` (replaced by `updated()`)\n  * `unbind()` (replaced by `unmounted()`)\n  * `update()`\n 9. Async component options\n  * `component` (replaced by `loader`)\n  * `loading` (replaced by `loadingComponent`)\n  * `error` (replaced by `errorComponent`)\n 10. Directly using a factory function as an async component (replaced by `defineAsyncComponent()`)\n 11. Filters\n 12. Functional templates\n 13. The `createElement` parameter of `render()` (replaced by the globally imported `h` function)\n 14. The dot-delimited key paths of `$watch()`\n\nThe following features deprecated in Vue 3.1 are checked also:\n\n 1. Config properties\n  * `isCustomElement()` (replaced by `compilerOptions.isCustomElement()`)\n 2. Options\n  * `delimiters` (replaced by `compilerOptions.delimiters`)\n 3. Directive\n  * `v-is` (replaced by `is` attribute with `vue:` prefix)\n\n**Note:** The application of this rule is limited to projects using Vue 3.x version.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"import Vue from 'vue';\nimport App from 'App.vue';\nimport Comp from 'Comp.vue';\n\nVue.component('Comp', Comp); // VUE_DEPRECATED_FEATURE alarm because 'Vue.component()' is deprecated.\n\nnew Vue({ // VUE_DEPRECATED_FEATURE alarm because 'new Vue()' is deprecated.\n  el: '#app', // VUE_DEPRECATED_FEATURE alarm because the 'el' option is deprecated.\n  render(createElement) { // VUE_DEPRECATED_FEATURE alarm because the 'createElement' parameter is deprecated.\n    return createElement(App);\n  },\n  beforeDestroy() { // VUE_DEPRECATED_FEATURE alarm because 'beforeDestroy()' is deprecated.\n    console.log(\"Destroying\");\n  }\n});","examplesRevised":"import { createApp, h } from 'vue';\nimport App from 'App.vue';\nimport Comp from 'Comp.vue';\n\nconst app = createApp({\n  render() {\n    return h(App);\n  },\n  beforeUnmount() {\n    console.log(\"Unmounting\");\n  }\n});\napp.component('Comp', Comp);\napp.mount('#app');","cwe":[],"see":["[Vue 2 API](https://v2.vuejs.org/v2/api/)","[Vue 3 API](https://vuejs.org/api/)","[Vue 3 Migration Guide](https://v3-migration.vuejs.org/)"]},{"key":"VUE_DUPLICATE_ATTRIBUTE","name":"Each attribute of a Vue element should be unique","description":"This rule applies when a Vue element has multiple attributes with the same name.\n\nIf an element has duplicate attributes, Vue may throw a compile error. Even when no error occurs, only one of the attributes is used, which can lead to unintended behavior because values specified at others are ignored.","severity":["Medium","High"],"type":"Error","cleanCodeAttribute":"Clear","tag":["vue"],"examples":"<template>\n  <!-- VUE_DUPLICATE_ATTRIBUTE alarm -->\n  <Person\n    first-name=\"John\"\n    first-name=\"Doe\"\n  />\n</template>","examplesRevised":"<template>\n  <Person\n    first-name=\"John\"\n    last-name=\"Doe\"\n  />\n</template>","cwe":[],"see":[]},{"key":"VUE_DUPLICATE_PROPERTY_IN_OPTION","name":"Property should be unique between Vue options","description":"This rule applies when multiple properties with the same name are defined between Vue options.\n\nIf duplicate property names are declared between the following Vue options, only one of them is used:\n\n 1. `props`\n 2. `computed`\n 3. `data`\n 4. `methods`\n\nDuplicate properties can lead to unintended behavior because the values specified at others are ignored. Also Vue outputs a warning message.\n\nThis rule also applies when duplicate elements exist inside an array-style `props` option. Although immediate problems may not occur in this case, it is recommended to remove the duplicates for code readability and maintainability.","severity":["Low","Medium"],"type":"Error","cleanCodeAttribute":"Clear","tag":["vue"],"examples":"<script>\nexport default {\n  data() {\n    return {\n      foo: 'hi',\n      myName: 'Mike'\n    };\n  },\n  computed: {\n    foo() { // VUE_DUPLICATE_PROPERTY_IN_OPTION alarm because 'foo' is already defined in 'data' option.\n      return this.myName + ' hi';\n    }\n  }\n}\n</script>","examplesRevised":"<script>\nexport default {\n  data() {\n    return {\n      myName: 'Mike'\n    };\n  },\n  computed: {\n    foo() {\n      return this.myName + ' hi';\n    }\n  }\n}\n</script>","cwe":[],"see":["[Vue warn]: Computed property \"foo\" is already defined in Data."]},{"key":"VUE_DUPLICATE_SLOT","name":"Each slot passed to a component should have unique name","description":"This rule applies when multiple slots with the same name are passed to a component as follows:\n\n 1. Two `<template>` slots of a component have `v-slot` directives with the same argument. In this case, the previous `<template>` is ignored. See Example 1 below.\n 2. `v-slot` having fixed argument is used together with `v-for` on the same `<template>`. In this case, only the last iteration content is recognized as the slot. See Example 2 below.\n 3. Child nodes not belonging to a `<template>` slot exist when the parent component has an explicit `<template>` for the default slot. Those extraneous nodes are ignored. See Example 3 below.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Clear","tag":["vue"],"examples":"<template>\n  <!-- Example 1 -->\n  <MyComponent>\n    <template v-slot:foo>\n      Foo slot\n    </template>\n    <template v-slot:foo> <!-- VUE_DUPLICATE_SLOT alarm -->\n      Bar slot\n    </template>\n  </MyComponent>\n\n  <!-- Example 2 -->\n  <MyComponent>\n    <template v-for=\"item in list\" v-slot:foo> <!-- VUE_DUPLICATE_SLOT alarm -->\n      <div :key=\"item.id\">\n        {{ item.name }}\n      </div>\n    </template>\n  </MyComponent>\n\n  <!-- Example 3 -->\n  <MyComponent>\n    <template v-slot:default>\n      <div>Default slot content 1</div>\n    </template>\n    <div>Default slot content 2</div> <!-- VUE_DUPLICATE_SLOT alarm -->\n  </MyComponent>\n</template>","examplesRevised":"<template>\n  <!-- Example 1 -->\n  <MyComponent>\n    <template v-slot:foo>\n      Foo slot\n    </template>\n    <template v-slot:bar>\n      Bar slot\n    </template>\n  </MyComponent>\n\n  <!-- Example 2 -->\n  <MyComponent>\n    <template v-slot:foo>\n      <div v-for=\"item in list\" :key=\"item.id\">\n        {{ item.name }}\n      </div>\n    </template>\n  </MyComponent>\n\n  <!-- Example 3 -->\n  <MyComponent>\n    <template v-slot:default>\n      <div>Default slot content 1</div>\n      <div>Default slot content 2</div>\n    </template>\n  </MyComponent>\n</template>","cwe":[],"see":["[Components In-Depth - Slots](https://vuejs.org/guide/components/slots.html)"]},{"key":"VUE_FIXED_TRANSITION_CHILD","name":"The child of a `<transition>` component should have changes to trigger the transition","description":"This rule applies when the child of a `<transition>` component does not have any changes to trigger the transition.\n\nThe `<transition>` component supports the changes incurred by the following:\n\n 1. Conditional rendering using `v-if`\n 2. Conditional display using `v-show`\n 3. Dynamic components\n 4. The `key` attribute value\n\nFor the transition effect to work, the above changes should be present in the child of `<transition>`, not the `<transition>` itself or its ancestors.\n\n**Note:** The application of this rule is limited to projects using Vue 3.x version because in Vue 2.x, `<transition>` worked by accident when toggled from the outside.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<template>\n  <button @click=\"show = !show\">Toggle</button>\n  <transition name=\"fade\" v-if=\"show\">\n    <div>Hello</div> <!-- VUE_FIXED_TRANSITION_CHILD alarm -->\n  </transition>\n</template>","examplesRevised":"<template>\n  <button @click=\"show = !show\">Toggle</button>\n  <transition name=\"fade\">\n    <div v-if=\"show\">Hello</div>\n  </transition>\n</template>","cwe":[],"see":["[Built-in Components: <Transition>](https://vuejs.org/api/built-in-components.html#transition)"]},{"key":"VUE_IDENTICAL_BRANCHES_IN_TEMPLATE","name":"Branches of `v-if` directive should not have the same implementation","description":"This rule applies when the content of an element having `v-if` or `v-else-if` directive is identical to the `v-else` branch.\n\nThis might imply the condition is unnecessary, but at worst this is a programmer's mistake. For example, a programmer copies code from a branch into another and forgets to modify it.\n\nTherefore, a programmer needs to check the same content is really needed for both branches.","severity":["Medium"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["cwe","vue"],"examples":"<template>\n  <div v-if=\"cond\">\n    Hi there!\n  </div>\n  <div v-else>\n    Hi there!\n  </div>\n</template>","examplesRevised":"<template>\n  <div v-if=\"cond\">\n    Hi there!\n  </div>\n  <div v-else>\n    Goodbye!\n  </div>\n</template>","cwe":["398"],"see":["[Built-in Directives: v-if](https://vuejs.org/api/built-in-directives.html#v-if)","[Built-in Directives: v-else-if](https://vuejs.org/api/built-in-directives.html#v-else-if)","[Built-in Directives: v-else](https://vuejs.org/api/built-in-directives.html#v-else)"]},{"key":"VUE_INVALID_COMPUTED_PROPERTY_ACCESS","name":"Computed properties should be accessed properly according to the existence of getter or setter","description":"This rule applies when a value is read from or assigned to a computed property but the property does not have a getter or setter.\n\nA computed property is normally getter-only if it is declared as a function. However, one can define a getter and a setter by using an object having `get` and `set` properties.\n\nUnintended behaviors may occur if either getter or setter is missing as follows:\n\n 1. A value is read from a computed property but the getter is missing. In this case, Vue outputs a warning message and an `undefined` value is read.\n 2. A value is assigned to a computed property but the setter is missing. In this case, Vue outputs a warning message and the assignment is ignored.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<script>\nexport default {\n  data() {\n    return {\n      fooValue: '',\n      barValue: ''\n    }\n  },\n  computed: {\n    foo: {\n      set(x) {\n        this.fooValue = validateFoo(x);\n      }\n    },\n    bar() {\n      return this.barValue;\n    }\n  },\n  methods: {\n    example1() {\n      return this.foo; // VUE_INVALID_COMPUTED_PROPERTY_ACCESS alarm because 'foo' does not have a getter.\n    },\n    example2(x) {\n      this.bar = x; // VUE_INALID_COMPUTED_PROPERTY_ACCESS alarm because 'bar' does not have a setter.\n    }\n  }\n}\n</script>","examplesRevised":"<script>\nexport default {\n  data() {\n    return {\n      fooValue: '',\n      barValue: ''\n    }\n  },\n  computed: {\n    foo: {\n      get() {\n        return this.fooValue;\n      },\n      set(x) {\n        this.fooValue = validateFoo(x);\n      }\n    },\n    bar: {\n      get() {\n        return this.barValue;\n      },\n      set(x) {\n        this.barValue = validateBar(x);\n      }\n    }\n  },\n  methods: {\n    example1() {\n      return this.foo;\n    },\n    example2(x) {\n      this.bar = x;\n    }\n  }\n}\n</script>","cwe":[],"see":["[Options API: computed](https://vuejs.org/api/options-state.html#computed)","[Vue warn]: Computed property \"foo\" has no getter.","[Vue warn]: Write operation failed: computed property \"foo\" is readonly."]},{"key":"VUE_INVALID_REF_ACCESS","name":"Properties of `$refs` should not be accessed when the component is not mounted","description":"This rule applies when the properties of `$refs` are accessed when the component is not mounted.\n\nA component is not mounted at the following lifecycles:\n 1. `beforeCreate()`\n 2. `created()`\n 3. `beforeMount()`\n 4. `unmounted()`\n\nIf `$refs` is accessed at the above lifecycles, an undefined or null value is read because the referred element does not exist.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<template>\n  <div ref=\"x\"/>\n</template>\n\n<script>\nexport default {\n  beforeCreate() {\n    console.log(this.$refs.x); // VUE_INVALID_REF_ACCESS alarm\n  }\n}\n</script>","examplesRevised":"<template>\n  <div ref=\"x\"/>\n</template>\n\n<script>\nexport default {\n  mounted() {\n    console.log(this.$refs.x);\n  }\n}\n</script>","cwe":[],"see":["[Built-in Special Attributes: ref](https://vuejs.org/api/built-in-special-attributes.html#ref)","[Component Instance Properties: $refs](https://vuejs.org/api/component-instance.html#refs)"]},{"key":"VUE_INVALID_V_ELSE","name":"`v-else` directive should be used in proper place","description":"This rule applies when `v-else` directive is used in improper places.\n\n`v-else` directive has the meaning of specifying the alternative of the previous element.\nSo, it is invalid to use `v-else` in the following cases:\n\n 1. The previous element does not have `v-if` or `v-else-if` directive. In this case, Vue throws a compile error.\n 2. `v-if`, `v-else-if`, and `v-else` directives are used in the same element.\n\nThis rule also applies to `v-else-if` directive which has the same restriction as `v-else`.","severity":["Medium","High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<template>\n  <!-- Example 1 -->\n  <div>\n    foo is 1\n  </div>\n  <div v-else> <!-- VUE_INVALID_V_ELSE alarm because the preceding element does not have 'v-if'. -->\n    foo is not 1\n  </div>\n\n  <!-- Example 2 -->\n  <div v-if=\"bar === 1\" v-else-if=\"bar === 2\"> <!-- VUE_INVALID_V_ELSE alarm because 'v-if' and 'v-else-if' are used in the same element. -->\n    bar is 1 or 2\n  </div>\n</template>","examplesRevised":"<template>\n  <!-- Example 1 -->\n  <div v-if=\"foo === 1\">\n    foo is 1\n  </div>\n  <div v-else>\n    foo is not 1\n  </div>\n\n  <!-- Example 2 -->\n  <div v-if=\"bar === 1 || bar === 2\">\n    bar is 1 or 2\n  </div>\n</template>","cwe":[],"see":["[Built-in Directives: v-else](https://vuejs.org/api/built-in-directives.html#v-else)","[Built-in Directives: v-else-if](https://vuejs.org/api/built-in-directives.html#v-else-if)","[Vue error]: v-else/v-else-if has no adjacent v-if or v-else-if."]},{"key":"VUE_MISMATCHED_COUNT_OF_ARGS","name":"Vue API should be called with the correct number of arguments","description":"This rule applies when Vue API is called with the wrong number of arguments.\n\nBecause Vue API has the specification for its arguments, arguments are useless or cause undefined behavior if the number of arguments does not match.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["cwe","vue"],"examples":"<script setup>\nimport { provide } from 'vue';\n\nconst message = 'Hello World';\nprovide(message); // VUE_MISMATCHED_COUNT_OF_ARGS alarm because 'provide()' takes two arguments.\n</script>","examplesRevised":"<script setup>\nimport { provide } from 'vue';\n\nconst message = 'Hello World';\nprovide('message', message);\n</script>","cwe":["628","685"],"see":["[Vue API Reference](https://vuejs.org/api/)"]},{"key":"VUE_MISMATCHED_TYPE_OF_ARG","name":"Vue API should be called with arguments of correct types","description":"This rule applies when Vue API is called with arguments of wrong types.\n\nBecause Vue API has the specification for its arguments, Vue will throw an error or output a warning message if the types of arguments are wrong.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["cwe","vue"],"examples":"<script setup>\nimport { ref, watch } from 'vue';\n\nconst count = ref(0);\nwatch(\n  'count', // VUE_MISMATCHED_TYPE_OF_ARG alarm\n  (newVal, oldVal) => {\n    // do something\n  }\n);\n</script>","examplesRevised":"<script setup>\nimport { ref, watch } from 'vue';\n\nconst count = ref(0);\nwatch(\n  count,\n  (newVal, oldVal) => {\n    // do something\n  }\n);\n</script>","cwe":["628"],"see":["[Vue API Reference](https://vuejs.org/api/)","[Vue warn]: Invalid watch source: count. A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types."]},{"key":"VUE_MISMATCHED_TYPE_OF_OPTION","name":"Vue option should be defined with a valid type","description":"This rule applies when Vue options are defined with invalid types.\n\nIf Vue options are defined with invalid types, their meanings are ignored, and Vue outputs a warning message.\nFor example, the `data` option of a Vue component cannot be defined as an object. Instead, a function that returns the object should be used.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<script>\nexport default {\n  props: [{ // VUE_MISMATCHED_TYPE_OF_OPTION alarm\n    foo: String\n  }],\n  data: { // VUE_MISMATCHED_TYPE_OF_OPTION alarm\n    bar: 'hi'\n  }\n}\n</script>","examplesRevised":"<script>\nexport default {\n  props: {\n    foo: String\n  },\n  data() {\n    return { bar: 'hi' };\n  }\n}\n</script>","cwe":[],"see":["[Options API: State](https://vuejs.org/api/options-state)","[Options API: Rendering](https://vuejs.org/api/options-rendering)","[Options API: Lifecycle](https://vuejs.org/api/options-lifecycle)","[Options API: Composition](https://vuejs.org/api/options-composition)","[Options API: Misc](https://vuejs.org/api/options-misc)","[Vue warn]: props must be strings when using array syntax.","[Vue warn]: The data option must be a function. Plain object usage is no longer supported."]},{"key":"VUE_MISMATCHED_TYPE_OF_PROP","name":"Vue component should receive prop values of correct prop types","description":"This rule applies when a Vue component receives a prop value which does not match its prop type declaration.\n\nWhen a Vue component receives such a prop value, Vue outputs a warning message.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<template>\n  <Person :name=\"myName\" :age=\"20\" :isMale=\"true\"/> <!-- VUE_MISMATCHED_TYPE_OF_PROP alarm because 'name' should be string type. -->\n  <Person name=\"John\" age=\"20\" :isMale=\"true\"/> <!-- VUE_MISMATCHED_TYPE_OF_PROP alarm because 'age' should be number type. -->\n  <Person name=\"Adam\" :age=\"20\"/> <!-- VUE_MISMATCHED_TYPE_OF_PROP alarm because 'isMale' is required. -->\n</template>\n\n<script>\nexport default {\n  computed: {\n    myName() {\n      return 42;\n    }\n  },\n  components: {\n    Person: {\n      props: {\n        name: String,\n        age: {\n          type: Number,\n          default: \"\" // VUE_MISMATCHED_TYPE_OF_PROP alarm because the default value should be number type.\n        },\n        isMale: {\n          type: Boolean,\n          required: true\n        }\n      }\n    }\n  }\n}\n</script>","examplesRevised":"<template>\n  <Person :name=\"myName\" :age=\"20\" :isMale=\"true\"/>\n  <Person name=\"John\" :age=\"20\" :isMale=\"true\"/>\n  <Person name=\"Adam\" :age=\"20\" :isMail=\"true\"/>\n</template>\n\n<script>\nexport default {\n  computed: {\n    myName() {\n      return \"James\";\n    }\n  },\n  components: {\n    Person: {\n      props: {\n        name: String,\n        age: {\n          type: Number,\n          default: 0\n        },\n        isMale: {\n          type: Boolean,\n          required: true\n        }\n      }\n    }\n  }\n}\n</script>","cwe":[],"see":["[Prop Validation](https://vuejs.org/guide/components/props.html#prop-validation)","[Vue warn]: Invalid prop: type check failed for prop \"age\". Expected Number with value 20, got String with value \"20\".","[Vue warn]: Missing required prop: \"isMale\""]},{"key":"VUE_MISPLACED_OPTION","name":"Vue options should be used in proper place","description":"This rule applies when certain Vue options are used in the wrong place.\n\n`el` and `propsData` options can only be used during the creation of a Vue instance with the `new` keyword.\nIf they are used in other places, e.g. Vue component definition, their meanings are ignored, and Vue outputs a warning message.\n\n**Note:** This rule is based on Vue 2.x API specifications.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"import Vue from 'vue';\n\nVue.component('Hello', {\n  propsData: { // VUE_MISPLACED_OPTION alarm because 'propsData' option is used in a Vue component option.\n    msg: 'hello'\n  },\n  template: '<div>{{ msg }}</div>'\n});\n\nnew Vue({\n  el: '#app',\n  template: '<Hello msg=\"hi\" />'\n});","examplesRevised":"import Vue from 'vue';\n\nVue.component('Hello', {\n  props: ['msg'],\n  template: '<div>{{ msg }}</div>'\n});\n\nnew Vue({\n  el: '#app',\n  template: '<Hello msg=\"hi\" />'\n});","cwe":[],"see":["[el option](https://v2.vuejs.org/v2/api/#el)","[propsData option](https://v2.vuejs.org/v2/api/#propsData)","[Vue warn]: option \"el\" can only be used during instance creation with the `new` keyword.","[Vue warn]: option \"propsData\" can only be used during instance creation with the `new` keyword."]},{"key":"VUE_MISSING_CLEANUP_IN_LIFECYCLE","name":"Global event handlers should be properly removed during Vue component lifecycle","description":"This rule applies when global event handlers are added but not removed properly during the lifecycle of a Vue component.\n\nIn general, global handlers added at `mounted()` should be explicitly removed at `beforeUnmount()` because they persist beyond the Vue component lifecycle.\n\nIf the handler is not removed,\n\n 1. It can be executed unnecessarily.\n 2. Data reachable from it cannot be garbage-collected and a memory leak would occur.\n\nCurrently, this rule detects alarms on the following global handlers:\n\n 1. Event listeners on the `window` object\n 2. Event listeners on the `document` object\n 3. `setInterval()` handlers","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Complete","tag":["vue"],"examples":"<script>\nexport default {\n  methods: {\n    update() { doSomething(); }\n  },\n  mounted() {\n    window.addEventListener('hashchange', this.update, false); // VUE_MISSING_CLEANUP_IN_LIFECYCLE alarm\n  },\n  beforeUnmount() {\n    window.removeEventListener('hashChange', this.update, false); // 'C' is upper-case\n  }\n}\n</script>","examplesRevised":"<script>\nexport default {\n  methods: {\n    update() { doSomething(); }\n  },\n  mounted() {\n    window.addEventListener('hashchange', this.update, false);\n  },\n  beforeUnmount() {\n    window.removeEventListener('hashchange', this.update, false);\n  }\n}\n</script>","cwe":[],"see":[]},{"key":"VUE_MISSING_KEY_ATTRIBUTE","name":"Vue component iterated with `v-for` should have a `key` attribute","description":"This rule applies when a Vue component iterated with `v-for` directive does not have a `key` attribute.\n\nVue uses the `key` attribute to track the identity of components when the iterated items are reordered. If no `key` is provided, the default \"in-place patch\" strategy is used, which does not maintain the component states.\n\nTherefore, to ensure correct states after the reordering, it is recommended to always use the `key` attribute when iterating Vue components.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Efficient","tag":["vue"],"examples":"<template>\n  <MyComponent v-for=\"item in items\"> <!-- VUE_MISSING_KEY_ATTRIBUTE alarm -->\n    {{ item.name }}\n  </MyComponent>\n</template>","examplesRevised":"<template>\n  <MyComponent v-for=\"item in items\" :key=\"item.id\">\n    {{ item.name }}\n  </MyComponent>\n</template>","cwe":[],"see":["[Built-in Special Attributes: key](https://vuejs.org/api/built-in-special-attributes.html#key)","[Maintaining State with key](https://vuejs.org/guide/essentials/list.html#maintaining-state-with-key)"]},{"key":"VUE_MISSING_REF_UNWRAP","name":"Ref objects should be used after unwrapping","description":"This rule applies when a `ref` object is used without unwrapping the value.\n\nThe `ref` object is a reactive wrapper object of a value and the actual value is stored in its `value` property.\n\nInside `<template>`, Vue provides auto-unwrapping of `ref` objects, so that one can directly access the wrapped value without the `value` property.\n\nHowever, caution is needed when using `ref` objects inside `<script setup>` including function definitions. For example, if a `ref` object is used as an operand of `+` operator without unwrapping, it is likely a programmer's mistake.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<script setup>\nimport { ref } from 'vue';\n\nconst count = ref(0);\nfunction nextCount() {\n  count.value = count + 100; // VUE_MISSING_REF_UNWRAP alarm\n}\n</script>\n\n<template>\n  <div>{{ count }}</div>\n  <button @click=\"nextCount\">Next</button>\n</template>","examplesRevised":"<script setup>\nimport { ref } from 'vue';\n\nconst count = ref(0);\nfunction nextCount() {\n  count.value = count.value + 100;\n}\n</script>\n\n<template>\n  <div>{{ count }}</div>\n  <button @click=\"nextCount\">Next</button>\n</template>","cwe":[],"see":["[Reactivity Fundamentals - ref()](https://vuejs.org/guide/essentials/reactivity-fundamentals.html#ref)"]},{"key":"VUE_MISSING_RETURN_VALUE_IN_COMPUTED","name":"Getter function of computed property should have return values","description":"This rule applies when a getter function of a computed property does not return a value.\n\nIn this case, accessing the computed property always results in `undefined` value, which could be unintended.","severity":["Medium"],"type":"Code Quality","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<script>\nexport default {\n  data() {\n    return {\n      currentYear: new Date().getFullYear()\n    };\n  },\n  computed: {\n    prevYear() { // VUE_MISSING_RETURN_VALUE_IN_COMPUTED\n      this.currentYear - 1;\n    },\n    nextYear: {\n      get() { // VUE_MISSING_RETURN_VALUE_IN_COMPUTED\n        this.currentYear + 1;\n      },\n      set(nextYear) {\n        this.currentYear = nextYear - 1;\n      }\n    }\n  }\n}\n</script>","examplesRevised":"<script>\nexport default {\n  data() {\n    return {\n      currentYear: new Date().getFullYear()\n    };\n  },\n  computed: {\n    prevYear() {\n      return this.currentYear - 1;\n    },\n    nextYear: {\n      get() {\n        return this.currentYear + 1;\n      },\n      set(nextYear) {\n        this.currentYear = nextYear - 1;\n      }\n    }\n  }\n}\n</script>","cwe":[],"see":["[Options API: computed](https://vuejs.org/api/options-state.html#computed)"]},{"key":"VUE_MISSING_RETURN_VALUE_IN_VALIDATOR","name":"Validator functions for Vue prop and event should have return values","description":"This rule applies when a validator function for Vue prop or event does not return a value.\n\nOne can check the prop value or event payload by specifying a validator function. For a validation to be successful, a truthy value should be returned from the validator.\n\nHowever, validation always fails if the validator returns no value, which is likely to be a programmer's mistake.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<script>\nexport default {\n  props: {\n    name: { // VUE_MISSING_RETURN_VALUE_IN_VALIDATOR alarm because 'return' is missing in the validator.\n      validator: value => {\n        if (!value) {\n          console.warn('Invalid name');\n        }\n      }\n    }\n  },\n  emits: {\n    load: payload => { // VUE_MISSING_RETURN_VALUE_IN_VALIDATOR alarm because 'return' is missing in the validator.\n      if (!payload) {\n        throw new Error('Invalid load event');\n      }\n    }\n  },\n  mounted() {\n    console.log(this.name);\n    this.$emit('load', 'success');\n  }\n}\n</script>","examplesRevised":"<script>\nexport default {\n  props: {\n    name: {\n      validator: value => {\n        if (!value) {\n          console.warn('Invalid name');\n          return false;\n        }\n        return true;\n      }\n    }\n  },\n  emits: {\n    load: payload => {\n      if (!payload) {\n        throw new Error('Invalid load event');\n      }\n      return true;\n    }\n  },\n  mounted() {\n    console.log(this.name);\n    this.$emit('load', 'success');\n  }\n}\n</script>","cwe":[],"see":["[Options API: props](https://vuejs.org/api/options-state.html#props)","[Options API: emits](https://vuejs.org/api/options-state.html#emits)","[Vue warn]: Invalid prop: custom validator check failed for prop \"name\".","[Vue warn]: Invalid event arguments: event validation failed for event \"load\"."]},{"key":"VUE_MISUSED_API_AFTER_AWAIT","name":"Lifecycle hooks and watchers should not be registered after `await` in an async function","description":"This rule applies when lifecycle hook or watcher registration APIs are called after `await` in an async function.\n\nThose APIs should be called when there is an active Vue component instance to be associated with. However, the active instance is lost after `await`, which causes the following problems:\n\n 1. The lifecycle hook is not registered.\n 2. The watcher is not removed automatically when the instance is unmounted. Note that you can use the stop handle returned by the registration API to manually remove the watcher.\n\n**Note:** Not applied for top-level `await` inside `<script setup>` because Vue applies automatic instance restore when compiling `<script setup>`.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<!-- Example 1 -->\n<script>\nimport { onMounted } from 'vue';\n\nexport default {\n  async setup() {\n    await doSomething();\n    onMounted(() => console.log(\"mounted\")); // VUE_MISUSED_API_AFTER_AWAIT alarm\n  }\n}\n</script>\n\n<!-- Example 2 -->\n<script>\nimport { watch } from 'vue';\n\nexport default {\n  async setup() {\n    const count = ref(0);\n    await doSomething();\n    watch(count, () => console.log(\"count: \" + count.value)); // VUE_MISUSED_API_AFTER_AWAIT alarm\n  }\n}\n</script>","examplesRevised":"<!-- Example 1 -->\n<script>\nimport { onMounted } from 'vue';\n\nexport default {\n  async setup() {\n    onMounted(() => console.log(\"mounted\"));\n    await doSomething();\n  }\n}\n</script>\n\n<!-- Example 2 -->\n<script>\nimport { watch } from 'vue';\n\nexport default {\n  async setup() {\n    const count = ref(0);\n    watch(count, () => console.log(\"count: \" + count.value));\n    await doSomething();\n  }\n}\n</script>","cwe":[],"see":["[Composition API: Lifecycle Hooks](https://vuejs.org/api/composition-api-lifecycle.html)","[Reactivity API: watch()](https://vuejs.org/api/reactivity-core.html#watch)","[Reactivity API: watchEffect()](https://vuejs.org/api/reactivity-core.html#watcheffect)","[Stopping a Watcher](https://vuejs.org/guide/essentials/watchers.html#stopping-a-watcher)","[Vue warn]: onMounted is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement."]},{"key":"VUE_MISUSED_PROPERTY_IN_DATA","name":"Computed and data properties should not be used inside the `data()` option of a Vue component","description":"This rule applies when a computed or data property is used inside the `data()` option of a Vue component.\n\nComputed and data properties are not yet initialized when executing the `data()`. So, accessing them results in an `undefined` value and may lead to unintended behaviors.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<script>\nexport default {\n  props: [\"size\", \"startIndex\"],\n  computed: {\n    count() {\n      return Number(this.size);\n    }\n  },\n  data() {\n    if (this.count < 0) { // VUE_MISUSED_PROPERTY_IN_DATA alarm\n      console.log(\"Warning: Invalid count\");\n    }\n    return {\n      curIndex: this.startIndex,\n      nextIndex: this.curIndex + 1 // VUE_MISUSED_PROPERTY_IN_DATA alarm\n    };\n  },\n  methods: {\n    decrement() {\n      if (this.curIndex > 0) {\n        this.curIndex--;\n        this.nextIndex--;\n      }\n    }\n  }\n}\n</script>","examplesRevised":"<script>\nexport default {\n  props: [\"size\", \"startIndex\"],\n  computed: {\n    count() {\n      return Number(this.size);\n    }\n  },\n  created() {\n    if (this.count < 0) {\n      console.log(\"Warning: Invalid count\");\n    }\n  },\n  data() {\n    return {\n      curIndex: this.startIndex,\n      nextIndex: this.startIndex + 1\n    };\n  },\n  methods: {\n    decrement() {\n      if (this.curIndex > 0) {\n        this.curIndex--;\n        this.nextIndex--;\n      }\n    }\n  }\n}\n</script>","cwe":[],"see":["[Options API: computed](https://vuejs.org/api/options-state.html#computed)","[Options API: data()](https://vuejs.org/api/options-state.html#data)"]},{"key":"VUE_MISUSED_V_FOR_VAR","name":"The first variable of `v-for` should not be used as an index of the iterated array","description":"This rule applies when the first variable of a `v-for` directive is used as an index of the iterated array (or a key if used on a plain object).\n\nSince the first variable already holds the current element of the array, using it as an index of the array is likely a programmer's mistake. One should use just the variable itself.\n\nIf the array index is actually needed, the second variable should be used which holds the current index.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<template>\n  <div v-for=\"i in items\">\n    {{ items[i] /* VUE_MISUSED_V_FOR_VAR alarm */ }}\n  </div>\n</template>","examplesRevised":"<template>\n  <div v-for=\"item in items\">\n    {{ item }}\n  </div>\n</template>","cwe":[],"see":["[Built-in Directives: v-for](https://vuejs.org/api/built-in-directives.html#v-for)"]},{"key":"VUE_MISUSED_V_SLOT","name":"`v-slot` directive should be used properly","description":"This rule applies when the `v-slot` directive is not used properly as follows:\n\n 1. `v-slot` is used on an HTML element. `v-slot` can only be used on a `<template>` element or the component receiving the slot. Otherwise, Vue throws a compile error. See Example 1 below.\n 2. `v-slot` is used on a component, but the component has another `<template v-slot>` as a child. In this case, Vue throws a compile error because scope ambiguities may occur. See Example 2 below.\n 3. `<template v-slot>` is used as a child of an HTML element. In this case, Vue throws a compile error because the receiving component cannot be identified. See Example 3 below.\n 4. An element has multiple `v-slot` directives. In this case, only the first one is recognized as the directive and the remaining ones are ignored. See Example 4 below.","severity":["Medium","High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<template>\n  <!-- Example 1 -->\n  <MyComponent>\n    <div v-slot=\"slotProps\"> <!-- VUE_MISUSED_V_SLOT alarm -->\n      {{ slotProps.foo }}\n    </div>\n  </MyComponent>\n\n  <!-- Example 2 -->\n  <MyComponent v-slot=\"slotProps\"> <!-- VUE_MISUSED_V_SLOT alarm -->\n    {{ slotProps.foo }}\n    <template v-slot:other>\n      Other slot\n    </template>\n  </MyComponent>\n\n  <!-- Example 3 -->\n  <MyComponent>\n    <div>\n      <template v-slot:other> <!-- VUE_MISUSED_V_SLOT alarm -->\n        Other slot\n      </template>\n    </div>\n  </MyComponent>\n\n  <!-- Example 4 -->\n  <MyComponent>\n    <template v-slot:other1 v-slot:other2> <!-- VUE_MISUSED_V_SLOT alarm -->\n      Other slot\n    </template>\n  </MyComponent>\n</template>","examplesRevised":"<template>\n  <!-- Example 1 -->\n  <MyComponent v-slot=\"slotProps\">\n    <div>\n      {{ slotProps.foo }}\n    </div>\n  </MyComponent>\n\n  <!-- Example 2 -->\n  <MyComponent>\n    <template v-slot=\"slotProps\">\n      {{ slotProps.foo }}\n    </template>\n    <template v-slot:other>\n      Other slot\n    </template>\n  </MyComponent>\n\n  <!-- Example 3 -->\n  <MyComponent>\n    <template v-slot:other>\n      <div>\n        Other slot\n      </div>\n    </template>\n  </MyComponent>\n\n  <!-- Example 4 -->\n  <MyComponent>\n    <template v-slot:other1>\n      Other slot\n    </template>\n    <template v-slot:other2>\n      Other slot\n    </template>\n  </MyComponent>\n</template>","cwe":[],"see":["[Components In-Depth - Slots](https://vuejs.org/guide/components/slots.html)","[Vue error]: v-slot can only be used on components or <template> tags.  (See Example 1 above)","[Vue error]: Codegen node is missing for element/if/for node. Apply appropriate transforms first. (See Example 2 and 3 above)"]},{"key":"VUE_MULTIPLE_TEMPLATE_ROOT","name":"Vue template should have a single root element","description":"This rule applies when a Vue template has multiple root elements.\n\nVue 2 allows only a single element as a template root.\nIf multiple root elements are specified, unintended behaviors occur as follows:\n\n * For single-file component with a `.vue` extension, Vue throws a compile error.\n * For uncompiled templates, Vue only renders the first element as a root and outputs a warning message.\n\nVue considers the following cases as having multiple root elements:\n\n 1. Root elements without `v-if`, `v-else-if`, and `v-else` directives\n 2. A root element with `v-for` directive\n\n**Note:** The application of this rule is limited to projects using Vue 2.x version.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"// Example 1\n<template>\n  <div>Hello</div> <!-- VUE_MULTIPLE_TEMPLATE_ROOT alarm because the template has two 'div' elements as a root. -->\n  <div>Hi</div>\n</template>\n\n<script>\nexport default {\n}\n</script>\n\n// Example 2\n<template>\n  <div v-for=\"item in list\" :key=\"item.id\">{{ item.name }}</div> <!-- VUE_MULTIPLE_TEMPLATE_ROOT alarm because the template has single root element with 'v-for' directive. -->\n</template>\n\n<script>\nexport default {\n  data() {\n    return { list: [{ id: 'hello', name: 'Hello' }, { id: 'hi', name: 'Hi' }] };\n  }\n}\n</script>","examplesRevised":"// Example 1\n<template>\n  <div v-if=\"isHello\">Hello</div>\n  <div v-else>Hi</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return { isHello: true };\n  }\n}\n</script>\n\n// Example 2\n<template>\n  <div>\n    <div v-for=\"item in list\" :key=\"item.id\">{{ item.name }}</div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return { list: [{ id: 'hello', name: 'Hello' }, { id: 'hi', name: 'Hi' }] };\n  }\n}\n</script>","cwe":[],"see":["[Components Basics - A Single Root Element](https://v2.vuejs.org/v2/guide/components.html#A-Single-Root-Element)","[Vue warn]: Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead.","[Vue warn]: Inline-template components must have exactly one child element."]},{"key":"VUE_MUTATED_PROP","name":"Props of a Vue component should not be mutated","description":"This rule applies when a prop of a Vue component is mutated inside the component.\n\nBecause props are readonly, Vue ignores the mutation attempt and outputs a warning message.\n\nIf mutation is required, it is recommended to create a data or computed property based on the prop's value.","severity":["Medium"],"type":"Code Quality","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<template>\n  <div>{{ x = 42 }}</div> <!-- VUE_MUTATED_PROP alarm -->\n  <input v-model=\"y\"/> <!-- VUE_MUTATED_PROP alarm -->\n</template>\n\n<script>\nexport default {\n  props: [\"x\", \"y\"],\n  methods: {\n    bar() {\n      this.x = this.x || []; // VUE_MUTATED_PROP alarm\n    }\n  }\n}\n</script>","examplesRevised":"<template>\n  <div>{{ a = 42 }}</div>\n  <input v-model=\"b\"/>\n</template>\n\n<script>\nexport default {\n  props: [\"x\", \"y\"],\n  data() {\n    return {\n      a: this.x,\n      b: this.y\n    };\n  },\n  methods: {\n    bar() {\n      this.a = this.a || [];\n    }\n  }\n}\n</script>","cwe":[],"see":["[Components In-Depth - One-Way Data Flow](https://vuejs.org/guide/components/props.html#one-way-data-flow)","[Vue warn]: Attempting to mutate prop \"x\". Props are readonly."]},{"key":"VUE_OPTION_TYPO","name":"Vue option should not have typo","description":"This rule applies when Vue options have typo.\n\nTypos in the option names may prevent intended behaviors from occurring as follows:\n\n 1. Vue lifecycle hooks having typo will not be called on the intended lifecycle.\n 2. Other Vue options having typo can cause Vue warnings, and the instance may not be rendered as intended.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<script>\nexport default {\n  beforeCreated() { // VUE_OPTION_TYPO alarm because 'beforeCreate' is a correct name of the lifecycle method.\n    // do something\n  }\n}\n</script>","examplesRevised":"<script>\nexport default {\n  beforeCreate() {\n    // do something\n  }\n}\n</script>","cwe":[],"see":["[Options API: State](https://vuejs.org/api/options-state)","[Options API: Rendering](https://vuejs.org/api/options-rendering)","[Options API: Lifecycle](https://vuejs.org/api/options-lifecycle)","[Options API: Composition](https://vuejs.org/api/options-composition)","[Options API: Misc](https://vuejs.org/api/options-misc)"]},{"key":"VUE_PASSIVE_WITH_PREVENT","name":"`v-on` directive should not have `passive` and `prevent` modifiers at the same time","description":"This rule applies when a `v-on` directive has `passive` and `prevent` modifiers at the same time.\n\nThese two modifiers have conflicting meanings:\n * `passive` declares that the handler will not execute `preventDefault()`.\n * `prevent` executes `preventDefault()` while executing the handler.\n\nIf you use them together, you will see a warning from the browser and the default behavior will not be prevented.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<template>\n  <a href=\"#\" @click.passive.prevent=\"handleClick\">Click here and stay.</a> <!-- VUE_PASSIVE_WITH_PREVENT alarm -->\n  <div class=\"small-box\" @wheel.passive.prevent=\"doSomething\">Use wheel to scroll down and read further.</div> <!-- VUE_PASSIVE_WITH_PREVENT alarm -->\n</template>\n\n<script>\nexport default {\n  methods: {\n    handleClick(e) {\n      // Handle click event.\n    },\n    doSomething(e) {\n      // Some computation that might delay handling wheel event.\n    }\n  }\n}\n</script>\n\n<style>\n.small-box {\n  width: 100px;\n  height: 70px;\n  overflow: scroll;\n}\n</style>","examplesRevised":"<template>\n  <a href=\"#\" @click.prevent=\"handleClick\">Click here and stay.</a>\n  <div class=\"small-box\" @wheel.passive=\"doSomething\">Use wheel to scroll down and read further.</div>\n</template>\n\n<script>\nexport default {\n  methods: {\n    handleClick(e) {\n      // Handle click event.\n    },\n    doSomething(e) {\n      // Some computation that might delay handling wheel event.\n    }\n  }\n}\n</script>\n\n<style>\n.small-box {\n  width: 100px;\n  height: 70px;\n  overflow: scroll;\n}\n</style>","cwe":[],"see":["[Event Modifiers](https://vuejs.org/guide/essentials/event-handling.html#event-modifiers)","Chrome Warning: Unable to preventDefault inside passive event listener invocation."]},{"key":"VUE_REDUNDANT_INLINE_EVENT_HANDLER","name":"Vue inline event handlers should not be redundantly used","description":"This rule applies when event handling code is unnecessarily wrapped as an inline handler function.\n\nVue wraps event handling code as an inline handler if the code is not a variable or property reference expression. In an inline handler, the special `$event` variable is used to access the original DOM event passed to the handler.\n\nAn inline handler becomes redundant if the whole handler code is a function call that passes just the `$event` variable (e.g. `@click=\"handleClick($event)\"`). It is equivalent to using the function itself as the handler (e.g. `@click=\"handleClick\"`). For code readability and maintainability, it is recommended to use more succinct code not incurring the additional function call.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["vue"],"examples":"<template>\n  <div @click=\"handleClick($event)\">\n    Hello\n  </div>\n</template>","examplesRevised":"<template>\n  <div @click=\"handleClick\">\n    Hello\n  </div>\n</template>","cwe":[],"see":["[Built-in Directives: v-on](https://vuejs.org/api/built-in-directives.html#v-on)","[Event Handling](https://vuejs.org/guide/essentials/event-handling)"]},{"key":"VUE_REDUNDANT_REF_ATTRIBUTE","name":"`ref` attribute should not be redundantly defined","description":"This rule applies when a `ref` attribute becomes redundant because the referenced value is always overwritten by another `ref` with the same name.\n\nEven though Vue throws no error in this case, it can lead to an unintended behavior when the ignored value is actually needed. If the value is not needed, it is recommended to remove the useless `ref` attribute for code readability and maintainability.\n\nNote that this rule is not applied if the later `ref` is on a conditional element (e.g. element having `v-if`) because it does not always overwrite the previous `ref`.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Clear","tag":["vue"],"examples":"<template>\n  <!-- Example 1 -->\n  <Foo ref=\"fooRef\" /> <!-- VUE_REDUNDANT_REF_ATTRIBUTE alarm -->\n  <Bar ref=\"fooRef\" />\n\n  <!-- Example 2 -->\n  <CompA v-if=\"cond\" ref=\"compRef\" /> <!-- VUE_REDUNDANT_REF_ATTRIBUTE alarm -->\n  <CompB ref=\"compRef\" />\n</template>","examplesRevised":"<template>\n  <!-- Example 1 -->\n  <Foo ref=\"fooRef\" />\n  <Bar ref=\"barRef\" />\n\n  <!-- Example 2 -->\n  <CompA v-if=\"cond\" ref=\"compRef\" />\n  <CompB v-else ref=\"compRef\" />\n</template>","cwe":[],"see":["[Built-in Special Attributes: ref](https://vuejs.org/api/built-in-special-attributes.html#ref)"]},{"key":"VUE_REDUNDANT_TEMPLATE","name":"Template should not be defined redundantly for a Vue component","description":"This rule applies when the template or render function is defined multiple times in different ways for a Vue component.\n\nIt can be applied to the following cases:\n\n1. Both `<template>` element and `render` property are declared in the same `.vue` file. In this case, the `<template>` element has higher priority and the `render` property will be ignored.\n2. Both `<template>` element and `template` property are declared in the same `.vue` file. In this case, the `<template>` element has higher priority and the `template` property will be ignored.\n3. Both `render` and `template` properties are declared in the same options object of a component. In this case, the `render` property has higher priority and the `template` property will be ignored.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Clear","tag":["vue"],"examples":"<template>\n  <HelloWorld />\n</template>\n\n<script>\nimport HelloWorld from './components/HelloWorld';\n\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld\n  },\n  template: '<HelloWorld />', // VUE_REDUNDANT_TEMPLATE alarm\n  render(createElement) { // VUE_REDUNDANT_TEMPLATE alarm\n    return createElement(HelloWorld);\n  }\n}\n</script>","examplesRevised":"<template>\n  <HelloWorld />\n</template>\n\n<script>\nimport HelloWorld from './components/HelloWorld';\n\nexport default {\n  name: 'App',\n  components: {\n    HelloWorld\n  }\n}\n</script>","cwe":[],"see":["[Options API: render](https://vuejs.org/api/options-rendering.html#render)","[Options API: template](https://vuejs.org/api/options-rendering.html#template)"]},{"key":"VUE_RESERVED_PROPERTY_IN_OPTION","name":"Vue option's property name should not be a reserved name of Vue","description":"This rule applies when reserved names of Vue are used as Vue option's property names.\n\nIf Vue's reserved name is used as user-defined property name, unintended behaviors may occur as follows:\n\n 1. Reserved property names in `data` or `computed` option will be ignored (e.g. `$options`).\n 2. Reserved attribute names in `props` option will be ignored (e.g. `key`).\n 3. Reserved property names in `methods` option will overwrite the reserved methods (e.g. `$watch`).\n\nFor cases 2 and 3 above, Vue outputs warning messages.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<script>\nexport default {\n  data() {\n    return {\n      $options: [ // VUE_RESERVED_PROPERTY_IN_OPTION alarm because the '$options' property is predefined in a Vue instance.\n        { id: 'opt1', name: 'my option 1' },\n        { id: 'opt2', name: 'my option 2' }\n      ]\n    };\n  },\n  props: {\n    key: { // VUE_RESERVED_PROPERTY_IN_OPTION alarm because the 'key' attribute is one of special attributes of Vue.\n      type: String,\n      required: true\n    }\n  },\n  methods: {\n    $watch() { // VUE_RESERVED_PROPERTY_IN_OPTION alarm because the '$set' method is predefined in a Vue instance.\n      // do something\n    }\n  }\n}\n</script>","examplesRevised":"<script>\nexport default {\n  data() {\n    return {\n      optionsData: [\n        { id: 'opt1', name: 'my option 1' },\n        { id: 'opt2', name: 'my option 2' }\n      ]\n    };\n  },\n  props: {\n    keyProp: {\n      type: String,\n      required: true\n    }\n  },\n  methods: {\n    watchData() {\n      // do something\n    }\n  }\n}\n</script>","cwe":[],"see":["[Instance Properties](https://v2.vuejs.org/v2/api/#Instance-Properties)","[Instance Methods / Data](https://v2.vuejs.org/v2/api/#Instance-Methods-Data)","[Instance Methods / Events](https://v2.vuejs.org/v2/api/#Instance-Methods-Events)","[Instance Methods / Lifecycle](https://v2.vuejs.org/v2/api/#Instance-Methods-Events)","[Special Attributes](https://v2.vuejs.org/v2/api/#Special-Attributes)","[Vue warn]: Method `$watch` conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.","[Vue warn]: `key` is a reserved attribute and cannot be used as component prop."]},{"key":"VUE_SETUP_INVALID_THIS","name":"`this` object should not be used in the Vue `setup` function","description":"This rule applies when `this` object is used in the `setup` function of a Vue component.\n\n`this` is bound to an undefined value in the `setup` function unlike the `this` object of other component options, which represents the component instance. Accessing properties of `this` in `setup()` will result in a `TypeError` exception.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<script>\nexport default {\n  props: [\"foo\"],\n  setup() {\n    console.log(\"foo: \" + this.foo); // VUE_SETUP_INVALID_THIS alarm\n    return {};\n  }\n}\n</script>","examplesRevised":"<script>\nexport default {\n  props: [\"foo\"],\n  setup(props) {\n    console.log(\"foo: \" + props.foo);\n    return {};\n  }\n}\n</script>","cwe":[],"see":["[Composition API: setup()](https://vuejs.org/api/composition-api-setup.html)"]},{"key":"VUE_SHARED_DATA","name":"The `data` function of a Vue component should return a newly created object","description":"This rule applies when the `data` function of a Vue component returns a shared object.\n\nBecause a Vue component is reused for multiple instances, the returned data object should be a newly created one.\nOtherwise, updating the data object of one instance will affect the data of all other instances, which can cause an unintended behavior.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<script>\nconst obj = {\n  msg: 'hi'\n};\nexport default {\n  data() {\n    return obj; // VUE_SHARED_DATA alarm because 'obj' is a shared object.\n  }\n}\n</script>","examplesRevised":"<script>\nexport default {\n  data() {\n    return { msg: 'hi' };\n  }\n}\n</script>","cwe":[],"see":["[Options API: data()](https://vuejs.org/api/options-state.html#data)"]},{"key":"VUE_STATIC_KEY_ATTRIBUTE","name":"Element iterated with `v-for` should not have a static `key` attribute","description":"This rule applies when an element iterated with `v-for` directive has a static `key` attribute without `v-bind`.\n\nWhen rendering `v-for`, Vue uses the `key` attribute to track the identity of iterated elements.\n\nIf a static `key` attribute is used, elements share the same value for the `key` attribute. This may cause an update error and Vue outputs a warning message.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<template>\n  <ul>\n    <li v-for=\"p in persons\" key=\"p.id\"> <!-- VUE_STATIC_KEY_ATTRIBUTE alarm -->\n      {{ p.id }}: {{ p.name }} <input type=\"text\">\n    </li>\n  </ul>\n</template>","examplesRevised":"<template>\n  <ul>\n    <li v-for=\"p in persons\" v-bind:key=\"p.id\">\n      {{ p.id }}: {{ p.name }} <input type=\"text\">\n    </li>\n  </ul>\n</template>","cwe":[],"see":["[Built-in Special Attributes: key](https://vuejs.org/api/built-in-special-attributes.html#key)","[Maintaining State with key](https://vuejs.org/guide/essentials/list.html#maintaining-state-with-key)","[Vue warn]: Duplicate keys found during update: \"p.id\". Make sure keys are unique."]},{"key":"VUE_TEMPLATE_WITH_V_SHOW","name":"Vue `<template>` element should not have `v-show` directive","description":"This rule applies when a Vue `<template>` element has a `v-show` directive.\n\n`v-show` is a directive for conditionally displaying an element but it does not support `<template>`. If `v-show` is used with `<template>`, it will be ignored and the `<template>` will be rendered as a native HTML element instead of a Vue built-in.\n\nIf you intended not to show the contents of `<template>` according to a specific value, you should specify the value as `v-if` instead of `v-show`.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<template>\n  <button v-on:click=\"flag = !flag\">Show or hide (flag: {{ flag }})</button>\n  <template v-show=\"flag\"> <!-- VUE_TEMPLATE_WITH_V_SHOW alarm -->\n    Only show me if flag is true!\n  </template>\n</template>","examplesRevised":"<template>\n  <button v-on:click=\"flag = !flag\">Show or hide (flag: {{ flag }})</button>\n  <template v-if=\"flag\">\n    Only show me if flag is true!\n  </template>\n</template>","cwe":[],"see":["[Built-in Special Elements: <template>](https://vuejs.org/api/built-in-special-elements.html#template)","[Conditional Rendering - v-show](https://vuejs.org/guide/essentials/conditional.html#v-show)"]},{"key":"VUE_TEXTAREA_WITH_USELESS_CHILDREN","name":"`<textarea>` with `v-model` directive should not have children","description":"This rule applies when `<textarea>` element with `v-model` directive has non-empty children.\n\nIf `v-model` is specified at `<textarea>`, the contents of `<textarea>` are completely determined by the value of `v-model`. In this case, the contents specified by the children of `<textarea>` have no effect.\n\nFor example, the following code shows the value of `message`, but the contents 'Initial value' are ignored:\n\n```\n<textarea v-model=\"message\">Initial value</textarea>\n```","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["vue"],"examples":"<template>\n  <!-- Example 1 (Unnecessary contents) -->\n  <textarea v-model=\"text\">{{ text }}</textarea> <!-- VUE_TEXTAREA_WITH_USELESS_CHILDREN alarm -->\n\n  <!-- Example 2 (Ignored contents) -->\n  <textarea v-model=\"text\">Please enter a value</textarea> <!-- VUE_TEXTAREA_WITH_USELESS_CHILDREN alarm -->\n</template>","examplesRevised":"<template>\n  <!-- Example 1 -->\n  <textarea v-model=\"text\" />\n\n  <!-- Example 2 -->\n  <textarea v-model=\"text\" placeholder=\"Please enter a value\" />\n</template>","cwe":[],"see":["[Form Input Bindings - Multiline Text](https://vuejs.org/guide/essentials/forms.html#multiline-text)"]},{"key":"VUE_UNINITIALIZED_INSTANCE_PROPERTY","name":"Uninitialized properties of a Vue instance should not be accessed","description":"This rule applies when uninitialized properties of a Vue instance are accessed.\n\nIn Vue's certain lifecycle methods, some properties are not yet initialized as follows:\n\n 1. `beforeCreate()`: `$data`, `$props`, `$el` properties\n 2. `created()`: `$el` property\n\nAccessing uninitialized properties in the above lifecycle methods causes a `TypeError` exception or leads to an undefined behavior.\n\n**Note:** The application of this rule is limited to projects using Vue 2.x version.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<script>\nexport default {\n  data() {\n    return { msg: 'hi' };\n  },\n  beforeCreate() {\n    // VUE_UNINITIALIZED_INSTANCE_PROPERTY alarm because 'this.$data' property has not yet been initialized in 'beforeCreate()'.\n    // A TypeError occurs because 'this.$data' is 'undefined'.\n    if (this.$data.msg === 'hi') {\n      // do something\n    }\n  }\n}\n</script>","examplesRevised":"<script>\nexport default {\n  data() {\n    return { msg: 'hi' };\n  },\n  created() {\n    if (this.$data.msg === 'hi') {\n      // do something\n    }\n  }\n}\n</script>","cwe":[],"see":["[beforeCreate() lifecycle method](https://v2.vuejs.org/v2/api/#beforeCreate)","[created() lifecycle method](https://v2.vuejs.org/v2/api/#created)","[Vue warn]: Error in beforeCreate hook: `TypeError: this.$data is undefined`"]},{"key":"VUE_UNUSED_DECL_IN_TEMPLATE","name":"Variables declared in a Vue template should be used","description":"This rule applies when variables declared in a Vue template are not used.\n\nIn a Vue template, variables are declared in the following positions:\n\n 1. `v-for` directive\n 2. `v-slot` directive\n\nFor maintainability, it is recommended to remove unused variables. Also, it might be a mistake that a programmer forgets to use the declared variables.\n\n**Note:** Not applied when the variable name starts with `_` because we regard it as intentionally unused.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["vue"],"examples":"<template>\n  <div v-for=\"(item, index) in items\" :key=\"item.id\">  <!-- VUE_UNUSED_DECL_IN_TEMPLATE alarm because variable 'index' is never used. -->\n    {{ item.value }}\n  </div>\n</template>","examplesRevised":"<template>\n  <div v-for=\"item in items\" :key=\"item.id\">\n    {{ item.value }}\n  </div>\n</template>","cwe":[],"see":["[Built-in Directives: v-for](https://vuejs.org/api/built-in-directives.html#v-for)","[Built-in Directives: v-slot](https://vuejs.org/api/built-in-directives.html#v-slot)"]},{"key":"VUE_UNUSED_LOCAL_COMPONENT","name":"Local components declared in a Vue component should be used","description":"This rule applies when local components declared in a Vue component are not used.\n\nFor maintainability, it is recommended to remove unused local components. Also, it might be a mistake that a programmer forgets to use the declared local components.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Clear","tag":["vue"],"examples":"<template>\n  <div>name: {{ person.name }}</div>\n  <div>age: {{ person.age }}</div>\n  <Address :info=\"person.address\" />\n  <!-- <EmailAddress :info=\"person.contact.emailAddress\" /> -->\n  <Contact :info=\"person.contact\" />\n</template>\n\n<script>\nimport Address from \"./Address.vue\";\nimport EmailAddress from \"./EmailAddress.vue\";\nimport Contact from \"./Contact.vue\";\n\nexport default {\n  props: [\"person\"],\n  components: {\n    Address,\n    EmailAddress, // VUE_UNUSED_LOCAL_COMPONENT alarm\n    Contact\n  }\n}\n</script>","examplesRevised":"<template>\n  <div>name: {{ person.name }}</div>\n  <div>age: {{ person.age }}</div>\n  <Address :info=\"person.address\" />\n  <Contact :info=\"person.contact\" />\n</template>\n\n<script>\nimport Address from \"./Address.vue\";\nimport Contact from \"./Contact.vue\";\n\nexport default {\n  props: [\"person\"],\n  components: {\n    Address,\n    Contact\n  }\n}\n</script>","cwe":[],"see":["[Options API: components](https://vuejs.org/api/options-misc.html#components)"]},{"key":"VUE_USELESS_V_ONCE","name":"`v-once` directive should be used properly","description":"This rule applies when `v-once` directive is wrongly used.\n\n`v-once` directive has the meaning of rendering an element only once.\nHowever, when `v-once` is used inside `v-for` iteration that is not keyed, it becomes useless as follows:\n\n * For single-file component with a `.vue` extension, Vue throws a compile error.\n * For uncompiled templates, Vue ignores the meaning of `v-once` and outputs a warning message.\n\n**Note:** The application of this rule is limited to projects using Vue 2.x version.","severity":["High"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<template>\n  <div>\n    <div v-for=\"item in list\" @click=\"handleClick\">\n      <span v-once>message: {{ item.message }}</span> <!-- VUE_USELESS_V_ONCE alarm because 'v-once' is used in the child of a node using 'v-for' without 'key'. -->\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      list: [{ message: 'hi' }, { message: 'bye' }]\n    };\n  },\n  methods: {\n    handleClick() {\n      this.list[0].message = 'hello';\n    }\n  }\n}\n</script>","examplesRevised":"<template>\n  <div>\n    <div v-for=\"item in list\" @click=\"handleClick\" :key=\"item.key\">\n      <span v-once>message: {{ item.message }}</span>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      list: [{ key: 'hiKey', message: 'hi' }, { key: 'byeKey', message: 'bye' }]\n    };\n  },\n  methods: {\n    handleClick() {\n      this.list[0].message = 'hello';\n    }\n  }\n}\n</script>","cwe":[],"see":["[v-once directive](https://v2.vuejs.org/v2/api/#v-once)","[Vue error]: v-once can only be used inside v-for that is keyed."]},{"key":"VUE_V_BIND_ON_DIRECTIVE","name":"`v-bind` should not be used on Vue directives","description":"This rule applies when `v-bind` is used on Vue directives.\n\nThere is no need to use `v-bind` on a Vue directive because the directive's value is automatically interpreted as a JavaScript expression.\nMoreover, if `v-bind` is used, the directive will not work as intended because it is recognized as a plain attribute.","severity":["Medium"],"type":"Error","cleanCodeAttribute":"Logical","tag":["vue"],"examples":"<template>\n  <div :class=\"fooClass\" :v-if=\"isFoo\"> <!-- VUE_V_BIND_ON_DIRECTIVE alarm because 'v-bind' is used on 'v-if' directive. -->\n    Foo\n  </div>\n</template>","examplesRevised":"<template>\n  <div :class=\"fooClass\" v-if=\"isFoo\">\n    Foo\n  </div>\n</template>","cwe":[],"see":["[Built-in Directives: v-bind](https://vuejs.org/api/built-in-directives.html#v-bind)","[Template Syntax - Directives](https://vuejs.org/guide/essentials/template-syntax.html#directives)"]},{"key":"VUE_V_IF_WITH_V_FOR","name":"`v-if` directive should use variables defined at `v-for` appearing on the same element","description":"This rule applies when `v-if` directive is used on the same element as `v-for` directive but does not use any variables defined at `v-for`.\n\nWhen `v-if` and `v-for` directives exist on the same node, `v-for` has a higher priority than `v-if`.\nThat means `v-if` will be run on each iteration of the loop.\n\nIf the `v-if` condition is independent of `v-for`, you can efficiently skip the execution of the loop by moving the `v-if` directive to a wrapper element. It is checked once and the `v-for` will not be evaluated if the condition is `false`.\n\n**Note:** The application of this rule is limited to projects using Vue 2.x version.","severity":["Low"],"type":"Code Quality","cleanCodeAttribute":"Efficient","tag":["vue"],"examples":"<template>\n  <ul>\n    <li\n      v-if=\"users\"\n      v-for=\"user in users\"\n      :key=\"user.id\"\n    >\n      {{ user.name }}\n    </li>\n  </ul>\n</template>","examplesRevised":"<template>\n  <ul v-if=\"users\">\n    <li\n      v-for=\"user in users\"\n      :key=\"user.id\"\n    >\n      {{ user.name }}\n    </li>\n  </ul>\n</template>","cwe":[],"see":["[v-for with v-if](https://v2.vuejs.org/v2/guide/list.html#v-for-with-v-if)","[Avoid v-if with v-for](https://v2.vuejs.org/v2/style-guide/#Avoid-v-if-with-v-for-essential)"]}]}
